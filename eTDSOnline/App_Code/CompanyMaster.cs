// This code was generated by an EVALUATION copy of Schematrix SchemaCoder.
// Redistribution of this source code, or an application developed from it, is forbidden.
// Modification of this source code to remove this comment is also forbidden.
// Please visit http://www.schematrix.com/ to obtain a license to use this software.

using System;
using System.Collections;
using System.Collections.Generic;
using System.Data;
using System.Data.SqlClient;
using System.Data.SqlTypes;
using System.IO;

namespace PayrollProject
{
    public partial class CompanyMaster
    {
        private static ICompanyMasterPersister _DefaultPersister;
        private ICompanyMasterPersister _Persister;
        private int _CompId;
        private int? _id;
        private string _CompanyName;
        private string _Address1;
        private string _Address2;
        private string _Address3;
        private string _City;
        private string _Pin;
        private string _Phone;
        private string _Website;
        private string _Email;
        private string _username;
        private string _password;
        private DateTime? _CreatedDate;
        private string _Role;
        private bool? _IsApproved;
        private Guid? _UserId;
        private int? _Logins;
        private DateTime? _LastLogin;
        private string _FirstName;
        private string _LastName;
        private string _Cash;
        private string _Freeze;
        private int? _Freezedays;

        static CompanyMaster()
        {
            // Assign default persister
            _DefaultPersister = new SqlServerCompanyMasterPersister();
        }

        public CompanyMaster()
        {
            // Assign default persister to instance persister
            _Persister = _DefaultPersister; 
        }

        public CompanyMaster(int _CompId)
        {
            // Assign default persister to instance persister
            _Persister = _DefaultPersister; 

            // Assign method parameter to private fields
            this._CompId = _CompId; 

            // Call associated retrieve method
            Retrieve();
        }

        public CompanyMaster(DataRow row)
        {
            // Assign default persister to instance persister
            _Persister = _DefaultPersister; 

            // Assign column values to private members
            for (int  i = 0; i < row.Table.Columns.Count; i++)
            {
                switch (row.Table.Columns[i].ColumnName.ToUpper())
                {
                    case "COMPID":
                        this.CompId = Convert.ToInt32(row[i, DataRowVersion.Current]); 
                        break;
                    
                    case "ID":
                        if(row.IsNull(i) == false)
                        {
                            this.id = Convert.ToInt32(row[i, DataRowVersion.Current]); 
                        }
                        break;
                    
                    case "COMPANYNAME":
                        if(row.IsNull(i) == false)
                        {
                            this.CompanyName = (string)row[i, DataRowVersion.Current]; 
                        }
                        break;
                    
                    case "ADDRESS1":
                        if(row.IsNull(i) == false)
                        {
                            this.Address1 = (string)row[i, DataRowVersion.Current]; 
                        }
                        break;
                    
                    case "ADDRESS2":
                        if(row.IsNull(i) == false)
                        {
                            this.Address2 = (string)row[i, DataRowVersion.Current]; 
                        }
                        break;
                    
                    case "ADDRESS3":
                        if(row.IsNull(i) == false)
                        {
                            this.Address3 = (string)row[i, DataRowVersion.Current]; 
                        }
                        break;
                    
                    case "CITY":
                        if(row.IsNull(i) == false)
                        {
                            this.City = (string)row[i, DataRowVersion.Current]; 
                        }
                        break;
                    
                    case "PIN":
                        if(row.IsNull(i) == false)
                        {
                            this.Pin = (string)row[i, DataRowVersion.Current]; 
                        }
                        break;
                    
                    case "PHONE":
                        if(row.IsNull(i) == false)
                        {
                            this.Phone = (string)row[i, DataRowVersion.Current]; 
                        }
                        break;
                    
                    case "WEBSITE":
                        if(row.IsNull(i) == false)
                        {
                            this.Website = (string)row[i, DataRowVersion.Current]; 
                        }
                        break;
                    
                    case "EMAIL":
                        if(row.IsNull(i) == false)
                        {
                            this.Email = (string)row[i, DataRowVersion.Current]; 
                        }
                        break;
                    
                    case "USERNAME":
                        if(row.IsNull(i) == false)
                        {
                            this.username = (string)row[i, DataRowVersion.Current]; 
                        }
                        break;
                    
                    case "PASSWORD":
                        if(row.IsNull(i) == false)
                        {
                            this.password = (string)row[i, DataRowVersion.Current]; 
                        }
                        break;
                    
                    case "CREATEDDATE":
                        if(row.IsNull(i) == false)
                        {
                            this.CreatedDate = Convert.ToDateTime(row[i, DataRowVersion.Current]); 
                        }
                        break;
                    
                    case "ROLE":
                        if(row.IsNull(i) == false)
                        {
                            this.Role = (string)row[i, DataRowVersion.Current]; 
                        }
                        break;
                    
                    case "ISAPPROVED":
                        if(row.IsNull(i) == false)
                        {
                            this.IsApproved = Convert.ToBoolean(row[i, DataRowVersion.Current]); 
                        }
                        break;
                    
                    case "USERID":
                        if(row.IsNull(i) == false)
                        {
                            if(row[i, DataRowVersion.Current] is Guid)
                            {
                                this.UserId = (Guid)row[i, DataRowVersion.Current]; 
                            }
                            else
                            {
                                this.UserId = new Guid((Byte[])row[i, DataRowVersion.Current]); 
                            }
                        }
                        break;
                    
                    case "LOGINS":
                        if(row.IsNull(i) == false)
                        {
                            this.Logins = Convert.ToInt32(row[i, DataRowVersion.Current]); 
                        }
                        break;
                    
                    case "LASTLOGIN":
                        if(row.IsNull(i) == false)
                        {
                            this.LastLogin = Convert.ToDateTime(row[i, DataRowVersion.Current]); 
                        }
                        break;
                    
                    case "FIRSTNAME":
                        if(row.IsNull(i) == false)
                        {
                            this.FirstName = (string)row[i, DataRowVersion.Current]; 
                        }
                        break;
                    
                    case "LASTNAME":
                        if(row.IsNull(i) == false)
                        {
                            this.LastName = (string)row[i, DataRowVersion.Current]; 
                        }
                        break;
                    
                    case "CASH":
                        if(row.IsNull(i) == false)
                        {
                            this.Cash = (string)row[i, DataRowVersion.Current]; 
                        }
                        break;
                    case "FREEZE":
                        if (row.IsNull(i) == false)
                        {
                            this._Freeze = (string)row[i, DataRowVersion.Current];
                        }
                        break;
                    case "Freezedays":
                        if (row.IsNull(i) == false)
                        {
                            this._Freezedays = Convert.ToInt32(row[i,DataRowVersion.Current]);
                        }
                        break;
                    
                }
            }
        }

        public static ICompanyMasterPersister DefaultPersister
        {
            get { return _DefaultPersister; }
            set { _DefaultPersister = value; }
        }

        public ICompanyMasterPersister Persister
        {
            get { return _Persister; }
            set { _Persister = value; }
        }

        public int CompId
        {
            get { return _CompId; }
            set { _CompId = value; }
        }

        public int? id
        {
            get { return _id; }
            set { _id = value; }
        }

        public string CompanyName
        {
            get { return _CompanyName; }
            set { _CompanyName = value; }
        }

        public string Address1
        {
            get { return _Address1; }
            set { _Address1 = value; }
        }

        public string Address2
        {
            get { return _Address2; }
            set { _Address2 = value; }
        }

        public string Address3
        {
            get { return _Address3; }
            set { _Address3 = value; }
        }

        public string City
        {
            get { return _City; }
            set { _City = value; }
        }

        public string Pin
        {
            get { return _Pin; }
            set { _Pin = value; }
        }

        public string Phone
        {
            get { return _Phone; }
            set { _Phone = value; }
        }

        public string Website
        {
            get { return _Website; }
            set { _Website = value; }
        }

        public string Email
        {
            get { return _Email; }
            set { _Email = value; }
        }

        public string username
        {
            get { return _username; }
            set { _username = value; }
        }

        public string password
        {
            get { return _password; }
            set { _password = value; }
        }

        public DateTime? CreatedDate
        {
            get { return _CreatedDate; }
            set { _CreatedDate = value; }
        }

        public string Role
        {
            get { return _Role; }
            set { _Role = value; }
        }

        public bool? IsApproved
        {
            get { return _IsApproved; }
            set { _IsApproved = value; }
        }

        public Guid? UserId
        {
            get { return _UserId; }
            set { _UserId = value; }
        }

        public int? Logins
        {
            get { return _Logins; }
            set { _Logins = value; }
        }

        public DateTime? LastLogin
        {
            get { return _LastLogin; }
            set { _LastLogin = value; }
        }

        public string FirstName
        {
            get { return _FirstName; }
            set { _FirstName = value; }
        }

        public string LastName
        {
            get { return _LastName; }
            set { _LastName = value; }
        }

        public string Cash
        {
            get { return _Cash; }
            set { _Cash = value; }
        }
        public string Freeze
        {
            get { return _Freeze; }
            set { _Freeze = value; }
        }
        public int? Freezedays
        {
            get { return _Freezedays; }
            set { _Freezedays = value; }
        }

        public virtual void Clone(CompanyMaster sourceObject)
        {
            // Clone attributes from source object
            this._CompId = sourceObject.CompId; 
            this._id = sourceObject.id; 
            this._CompanyName = sourceObject.CompanyName; 
            this._Address1 = sourceObject.Address1; 
            this._Address2 = sourceObject.Address2; 
            this._Address3 = sourceObject.Address3; 
            this._City = sourceObject.City; 
            this._Pin = sourceObject.Pin; 
            this._Phone = sourceObject.Phone; 
            this._Website = sourceObject.Website; 
            this._Email = sourceObject.Email; 
            this._username = sourceObject.username; 
            this._password = sourceObject.password; 
            this._CreatedDate = sourceObject.CreatedDate; 
            this._Role = sourceObject.Role; 
            this._IsApproved = sourceObject.IsApproved; 
            this._UserId = sourceObject.UserId; 
            this._Logins = sourceObject.Logins; 
            this._LastLogin = sourceObject.LastLogin; 
            this._FirstName = sourceObject.FirstName; 
            this._LastName = sourceObject.LastName; 
            this._Cash = sourceObject.Cash;
            this._Freeze = sourceObject.Freeze;
            this.Freezedays = sourceObject.Freezedays;
        }

        public virtual int Retrieve()
        {
            return _Persister.Retrieve(this); 
        }

        public virtual int Update()
        {
            return _Persister.Update(this); 
        }
        
        public virtual int Delete()
        {
            return _Persister.Delete(this); 
        }

        public virtual int Insert()
        {
            return _Persister.Insert(this); 
        }

        public static IReader<CompanyMaster> ListAll()
        {
            return _DefaultPersister.ListAll(); 
        }

        public static IReader<CompanyMaster> ListForid(int? id)
        {
            return _DefaultPersister.ListForid(id); 
        }

    }
    
    public partial interface ICompanyMasterPersister
    {
        int Retrieve(CompanyMaster companyMaster);
        int Update(CompanyMaster companyMaster);
        int Delete(CompanyMaster companyMaster);
        int Insert(CompanyMaster companyMaster);
        
        IReader<CompanyMaster> ListAll();
        IReader<CompanyMaster> ListForid(int? id);
    }
    
    public partial class SqlServerCompanyMasterPersister : SqlPersisterBase, ICompanyMasterPersister
    {
        public SqlServerCompanyMasterPersister()
        {
        }

        public SqlServerCompanyMasterPersister(string connectionString) : base(connectionString)
        {
        }

        public SqlServerCompanyMasterPersister(SqlConnection connection) : base(connection)
        {
        }

        public SqlServerCompanyMasterPersister(SqlTransaction transaction) : base(transaction)
        {
        }

        public int Retrieve(CompanyMaster companyMaster)
        {
            int __rowsAffected = 1;
            
            // Create command
            using (SqlCommand sqlCommand = new SqlCommand("CompanyMasterGet"))
            {
                // Set command type
                sqlCommand.CommandType = CommandType.StoredProcedure; 

                try
                {
                    // Attach command
                    AttachCommand(sqlCommand);

                    // Add command parameters
                    SqlParameter vCompId = new SqlParameter("@CompId", SqlDbType.Int);
                    vCompId.Direction = ParameterDirection.InputOutput; 
                    sqlCommand.Parameters.Add(vCompId);
                    SqlParameter vid = new SqlParameter("@id", SqlDbType.Int);
                    vid.Direction = ParameterDirection.Output; 
                    sqlCommand.Parameters.Add(vid);
                    SqlParameter vCompanyName = new SqlParameter("@CompanyName", SqlDbType.VarChar, 250);
                    vCompanyName.Direction = ParameterDirection.Output; 
                    sqlCommand.Parameters.Add(vCompanyName);
                    SqlParameter vAddress1 = new SqlParameter("@Address1", SqlDbType.VarChar, 250);
                    vAddress1.Direction = ParameterDirection.Output; 
                    sqlCommand.Parameters.Add(vAddress1);
                    SqlParameter vAddress2 = new SqlParameter("@Address2", SqlDbType.VarChar, 250);
                    vAddress2.Direction = ParameterDirection.Output; 
                    sqlCommand.Parameters.Add(vAddress2);
                    SqlParameter vAddress3 = new SqlParameter("@Address3", SqlDbType.VarChar, 250);
                    vAddress3.Direction = ParameterDirection.Output; 
                    sqlCommand.Parameters.Add(vAddress3);
                    SqlParameter vCity = new SqlParameter("@City", SqlDbType.VarChar, 250);
                    vCity.Direction = ParameterDirection.Output; 
                    sqlCommand.Parameters.Add(vCity);
                    SqlParameter vPin = new SqlParameter("@Pin", SqlDbType.VarChar, 50);
                    vPin.Direction = ParameterDirection.Output; 
                    sqlCommand.Parameters.Add(vPin);
                    SqlParameter vPhone = new SqlParameter("@Phone", SqlDbType.VarChar, 50);
                    vPhone.Direction = ParameterDirection.Output; 
                    sqlCommand.Parameters.Add(vPhone);
                    SqlParameter vWebsite = new SqlParameter("@Website", SqlDbType.VarChar, 250);
                    vWebsite.Direction = ParameterDirection.Output; 
                    sqlCommand.Parameters.Add(vWebsite);
                    SqlParameter vEmail = new SqlParameter("@Email", SqlDbType.VarChar, 250);
                    vEmail.Direction = ParameterDirection.Output; 
                    sqlCommand.Parameters.Add(vEmail);
                    SqlParameter vusername = new SqlParameter("@username", SqlDbType.VarChar, 250);
                    vusername.Direction = ParameterDirection.Output; 
                    sqlCommand.Parameters.Add(vusername);
                    SqlParameter vpassword = new SqlParameter("@password", SqlDbType.VarChar, 250);
                    vpassword.Direction = ParameterDirection.Output; 
                    sqlCommand.Parameters.Add(vpassword);
                    SqlParameter vCreatedDate = new SqlParameter("@CreatedDate", SqlDbType.DateTime);
                    vCreatedDate.Direction = ParameterDirection.Output; 
                    sqlCommand.Parameters.Add(vCreatedDate);
                    SqlParameter vRole = new SqlParameter("@Role", SqlDbType.NVarChar, 256);
                    vRole.Direction = ParameterDirection.Output; 
                    sqlCommand.Parameters.Add(vRole);
                    SqlParameter vIsApproved = new SqlParameter("@IsApproved", SqlDbType.Bit);
                    vIsApproved.Direction = ParameterDirection.Output; 
                    sqlCommand.Parameters.Add(vIsApproved);
                    SqlParameter vUserId = new SqlParameter("@UserId", SqlDbType.UniqueIdentifier);
                    vUserId.Direction = ParameterDirection.Output; 
                    sqlCommand.Parameters.Add(vUserId);
                    SqlParameter vLogins = new SqlParameter("@Logins", SqlDbType.Int);
                    vLogins.Direction = ParameterDirection.Output; 
                    sqlCommand.Parameters.Add(vLogins);
                    SqlParameter vLastLogin = new SqlParameter("@LastLogin", SqlDbType.DateTime);
                    vLastLogin.Direction = ParameterDirection.Output; 
                    sqlCommand.Parameters.Add(vLastLogin);
                    SqlParameter vFirstName = new SqlParameter("@FirstName", SqlDbType.VarChar, 250);
                    vFirstName.Direction = ParameterDirection.Output; 
                    sqlCommand.Parameters.Add(vFirstName);
                    SqlParameter vLastName = new SqlParameter("@LastName", SqlDbType.VarChar, 250);
                    vLastName.Direction = ParameterDirection.Output; 
                    sqlCommand.Parameters.Add(vLastName);
                    SqlParameter vCash = new SqlParameter("@Cash", SqlDbType.VarChar, 50);
                    vCash.Direction = ParameterDirection.Output; 
                    sqlCommand.Parameters.Add(vCash);
                    SqlParameter vFreeze = new SqlParameter("@Freeze", SqlDbType.VarChar, 50);
                    vFreeze.Direction = ParameterDirection.Output;
                    sqlCommand.Parameters.Add(vFreeze);
                    SqlParameter vFreezedays = new SqlParameter("@Freezedays", SqlDbType.Int);
                    vFreezedays.Direction = ParameterDirection.Output;
                    sqlCommand.Parameters.Add(vFreezedays);

                    // Set input parameter values
                    SqlServerHelper.SetParameterValue(vCompId, companyMaster.CompId);

                    // Execute command
                    sqlCommand.ExecuteNonQuery();

                    try
                    {
                        // Get output parameter values
                        companyMaster.CompId = SqlServerHelper.ToInt32(vCompId); 
                        companyMaster.id = SqlServerHelper.ToNullableInt32(vid); 
                        companyMaster.CompanyName = SqlServerHelper.ToString(vCompanyName); 
                        companyMaster.Address1 = SqlServerHelper.ToString(vAddress1); 
                        companyMaster.Address2 = SqlServerHelper.ToString(vAddress2); 
                        companyMaster.Address3 = SqlServerHelper.ToString(vAddress3); 
                        companyMaster.City = SqlServerHelper.ToString(vCity); 
                        companyMaster.Pin = SqlServerHelper.ToString(vPin); 
                        companyMaster.Phone = SqlServerHelper.ToString(vPhone); 
                        companyMaster.Website = SqlServerHelper.ToString(vWebsite); 
                        companyMaster.Email = SqlServerHelper.ToString(vEmail); 
                        companyMaster.username = SqlServerHelper.ToString(vusername); 
                        companyMaster.password = SqlServerHelper.ToString(vpassword); 
                        companyMaster.CreatedDate = SqlServerHelper.ToNullableDateTime(vCreatedDate); 
                        companyMaster.Role = SqlServerHelper.ToString(vRole); 
                        companyMaster.IsApproved = SqlServerHelper.ToNullableBoolean(vIsApproved); 
                        companyMaster.UserId = SqlServerHelper.ToNullableGuid(vUserId); 
                        companyMaster.Logins = SqlServerHelper.ToNullableInt32(vLogins); 
                        companyMaster.LastLogin = SqlServerHelper.ToNullableDateTime(vLastLogin); 
                        companyMaster.FirstName = SqlServerHelper.ToString(vFirstName); 
                        companyMaster.LastName = SqlServerHelper.ToString(vLastName); 
                        companyMaster.Cash = SqlServerHelper.ToString(vCash);
                        companyMaster.Freeze = SqlServerHelper.ToString(vFreeze);
                        companyMaster.Freezedays = SqlServerHelper.ToNullableInt32(vFreezedays);

                    }
                    catch(Exception ex)
                    {
                        if(ex is System.NullReferenceException)
                        {
                            __rowsAffected = 0; 
                        }
                        else
                        {
                            throw ex; 
                        }
                    }
                }
                finally
                {
                    // Detach command
                    DetachCommand(sqlCommand);
                }

            }
            
            return __rowsAffected; 
        }

        public int Update(CompanyMaster companyMaster)
        {
            int __rowsAffected = 0;
            
            // Create command
            using (SqlCommand sqlCommand = new SqlCommand("CompanyMasterUpdate"))
            {
                // Set command type
                sqlCommand.CommandType = CommandType.StoredProcedure; 

                // Add command parameters
                SqlParameter vCompId = new SqlParameter("@CompId", SqlDbType.Int);
                vCompId.Direction = ParameterDirection.Input; 
                sqlCommand.Parameters.Add(vCompId);
                SqlParameter vid = new SqlParameter("@id", SqlDbType.Int);
                vid.Direction = ParameterDirection.Input; 
                sqlCommand.Parameters.Add(vid);
                SqlParameter vCompanyName = new SqlParameter("@CompanyName", SqlDbType.VarChar, 250);
                vCompanyName.Direction = ParameterDirection.Input; 
                sqlCommand.Parameters.Add(vCompanyName);
                SqlParameter vAddress1 = new SqlParameter("@Address1", SqlDbType.VarChar, 250);
                vAddress1.Direction = ParameterDirection.Input; 
                sqlCommand.Parameters.Add(vAddress1);
                SqlParameter vAddress2 = new SqlParameter("@Address2", SqlDbType.VarChar, 250);
                vAddress2.Direction = ParameterDirection.Input; 
                sqlCommand.Parameters.Add(vAddress2);
                SqlParameter vAddress3 = new SqlParameter("@Address3", SqlDbType.VarChar, 250);
                vAddress3.Direction = ParameterDirection.Input; 
                sqlCommand.Parameters.Add(vAddress3);
                SqlParameter vCity = new SqlParameter("@City", SqlDbType.VarChar, 250);
                vCity.Direction = ParameterDirection.Input; 
                sqlCommand.Parameters.Add(vCity);
                SqlParameter vPin = new SqlParameter("@Pin", SqlDbType.VarChar, 50);
                vPin.Direction = ParameterDirection.Input; 
                sqlCommand.Parameters.Add(vPin);
                SqlParameter vPhone = new SqlParameter("@Phone", SqlDbType.VarChar, 50);
                vPhone.Direction = ParameterDirection.Input; 
                sqlCommand.Parameters.Add(vPhone);
                SqlParameter vWebsite = new SqlParameter("@Website", SqlDbType.VarChar, 250);
                vWebsite.Direction = ParameterDirection.Input; 
                sqlCommand.Parameters.Add(vWebsite);
                SqlParameter vEmail = new SqlParameter("@Email", SqlDbType.VarChar, 250);
                vEmail.Direction = ParameterDirection.Input; 
                sqlCommand.Parameters.Add(vEmail);
                SqlParameter vusername = new SqlParameter("@username", SqlDbType.VarChar, 250);
                vusername.Direction = ParameterDirection.Input; 
                sqlCommand.Parameters.Add(vusername);
                SqlParameter vpassword = new SqlParameter("@password", SqlDbType.VarChar, 250);
                vpassword.Direction = ParameterDirection.Input; 
                sqlCommand.Parameters.Add(vpassword);
                SqlParameter vCreatedDate = new SqlParameter("@CreatedDate", SqlDbType.DateTime);
                vCreatedDate.Direction = ParameterDirection.Input; 
                sqlCommand.Parameters.Add(vCreatedDate);
                SqlParameter vRole = new SqlParameter("@Role", SqlDbType.NVarChar, 256);
                vRole.Direction = ParameterDirection.Input; 
                sqlCommand.Parameters.Add(vRole);
                SqlParameter vIsApproved = new SqlParameter("@IsApproved", SqlDbType.Bit);
                vIsApproved.Direction = ParameterDirection.Input; 
                sqlCommand.Parameters.Add(vIsApproved);
                SqlParameter vUserId = new SqlParameter("@UserId", SqlDbType.UniqueIdentifier);
                vUserId.Direction = ParameterDirection.Input; 
                sqlCommand.Parameters.Add(vUserId);
                SqlParameter vLogins = new SqlParameter("@Logins", SqlDbType.Int);
                vLogins.Direction = ParameterDirection.Input; 
                sqlCommand.Parameters.Add(vLogins);
                SqlParameter vLastLogin = new SqlParameter("@LastLogin", SqlDbType.DateTime);
                vLastLogin.Direction = ParameterDirection.Input; 
                sqlCommand.Parameters.Add(vLastLogin);
                SqlParameter vFirstName = new SqlParameter("@FirstName", SqlDbType.VarChar, 250);
                vFirstName.Direction = ParameterDirection.Input; 
                sqlCommand.Parameters.Add(vFirstName);
                SqlParameter vLastName = new SqlParameter("@LastName", SqlDbType.VarChar, 250);
                vLastName.Direction = ParameterDirection.Input; 
                sqlCommand.Parameters.Add(vLastName);
                SqlParameter vCash = new SqlParameter("@Cash", SqlDbType.VarChar, 50);
                vCash.Direction = ParameterDirection.Input; 
                sqlCommand.Parameters.Add(vCash);
                SqlParameter vFreeze = new SqlParameter("@Freeze", SqlDbType.VarChar, 50);
                vFreeze.Direction = ParameterDirection.Input;
                sqlCommand.Parameters.Add(vFreeze);
                SqlParameter vFreezedays = new SqlParameter("@Freezedays", SqlDbType.Int);
                vFreezedays.Direction = ParameterDirection.Input;
                sqlCommand.Parameters.Add(vFreezedays);

                // Set input parameter values
                SqlServerHelper.SetParameterValue(vCompId, companyMaster.CompId);
                SqlServerHelper.SetParameterValue(vid, companyMaster.id);
                SqlServerHelper.SetParameterValue(vCompanyName, companyMaster.CompanyName);
                SqlServerHelper.SetParameterValue(vAddress1, companyMaster.Address1);
                SqlServerHelper.SetParameterValue(vAddress2, companyMaster.Address2);
                SqlServerHelper.SetParameterValue(vAddress3, companyMaster.Address3);
                SqlServerHelper.SetParameterValue(vCity, companyMaster.City);
                SqlServerHelper.SetParameterValue(vPin, companyMaster.Pin);
                SqlServerHelper.SetParameterValue(vPhone, companyMaster.Phone);
                SqlServerHelper.SetParameterValue(vWebsite, companyMaster.Website);
                SqlServerHelper.SetParameterValue(vEmail, companyMaster.Email);
                SqlServerHelper.SetParameterValue(vusername, companyMaster.username);
                SqlServerHelper.SetParameterValue(vpassword, companyMaster.password);
                SqlServerHelper.SetParameterValue(vCreatedDate, companyMaster.CreatedDate);
                SqlServerHelper.SetParameterValue(vRole, companyMaster.Role);
                SqlServerHelper.SetParameterValue(vIsApproved, companyMaster.IsApproved);
                SqlServerHelper.SetParameterValue(vUserId, companyMaster.UserId);
                SqlServerHelper.SetParameterValue(vLogins, companyMaster.Logins);
                SqlServerHelper.SetParameterValue(vLastLogin, companyMaster.LastLogin);
                SqlServerHelper.SetParameterValue(vFirstName, companyMaster.FirstName);
                SqlServerHelper.SetParameterValue(vLastName, companyMaster.LastName);
                SqlServerHelper.SetParameterValue(vCash, companyMaster.Cash);
                SqlServerHelper.SetParameterValue(vFreeze, companyMaster.Freeze);
                SqlServerHelper.SetParameterValue(vFreezedays, companyMaster.Freezedays);

                try
                {
                    // Attach command
                    AttachCommand(sqlCommand);

                    // Execute command
                    __rowsAffected = sqlCommand.ExecuteNonQuery(); 
                    if(__rowsAffected == 0)
                    {
                        return __rowsAffected; 
                    }
                    

                }
                finally
                {
                    // Detach command
                    DetachCommand(sqlCommand);
                }

            }
            
            return __rowsAffected; 
        }
       
        public int Delete(CompanyMaster companyMaster)
        {
            int __rowsAffected = 0;
            
            // Create command
            using (SqlCommand sqlCommand = new SqlCommand("CompanyMasterDelete"))
            {
                // Set command type
                sqlCommand.CommandType = CommandType.StoredProcedure; 

                try
                {
                    // Attach command
                    AttachCommand(sqlCommand);

                    // Add command parameters
                    SqlParameter vCompId = new SqlParameter("@CompId", SqlDbType.Int);
                    vCompId.Direction = ParameterDirection.Input; 
                    sqlCommand.Parameters.Add(vCompId);

                    // Set input parameter values
                    SqlServerHelper.SetParameterValue(vCompId, companyMaster.CompId);

                    // Execute command
                    __rowsAffected = sqlCommand.ExecuteNonQuery(); 

                }
                finally
                {
                    // Detach command
                    DetachCommand(sqlCommand);
                }

            }
            
            return __rowsAffected; 
        }

        public int Insert(CompanyMaster companyMaster)
        {
            int __rowsAffected = 0;
            
            // Create command
            using (SqlCommand sqlCommand = new SqlCommand("CompanyMasterInsert"))
            {
                // Set command type
                sqlCommand.CommandType = CommandType.StoredProcedure; 

                // Add command parameters
                SqlParameter vCompId = new SqlParameter("@CompId", SqlDbType.Int);
                vCompId.Direction = ParameterDirection.InputOutput; 
                sqlCommand.Parameters.Add(vCompId);
                SqlParameter vid = new SqlParameter("@id", SqlDbType.Int);
                vid.Direction = ParameterDirection.Input; 
                sqlCommand.Parameters.Add(vid);
                SqlParameter vCompanyName = new SqlParameter("@CompanyName", SqlDbType.VarChar, 250);
                vCompanyName.Direction = ParameterDirection.Input; 
                sqlCommand.Parameters.Add(vCompanyName);
                SqlParameter vAddress1 = new SqlParameter("@Address1", SqlDbType.VarChar, 250);
                vAddress1.Direction = ParameterDirection.Input; 
                sqlCommand.Parameters.Add(vAddress1);
                SqlParameter vAddress2 = new SqlParameter("@Address2", SqlDbType.VarChar, 250);
                vAddress2.Direction = ParameterDirection.Input; 
                sqlCommand.Parameters.Add(vAddress2);
                SqlParameter vAddress3 = new SqlParameter("@Address3", SqlDbType.VarChar, 250);
                vAddress3.Direction = ParameterDirection.Input; 
                sqlCommand.Parameters.Add(vAddress3);
                SqlParameter vCity = new SqlParameter("@City", SqlDbType.VarChar, 250);
                vCity.Direction = ParameterDirection.Input; 
                sqlCommand.Parameters.Add(vCity);
                SqlParameter vPin = new SqlParameter("@Pin", SqlDbType.VarChar, 50);
                vPin.Direction = ParameterDirection.Input; 
                sqlCommand.Parameters.Add(vPin);
                SqlParameter vPhone = new SqlParameter("@Phone", SqlDbType.VarChar, 50);
                vPhone.Direction = ParameterDirection.Input; 
                sqlCommand.Parameters.Add(vPhone);
                SqlParameter vWebsite = new SqlParameter("@Website", SqlDbType.VarChar, 250);
                vWebsite.Direction = ParameterDirection.Input; 
                sqlCommand.Parameters.Add(vWebsite);
                SqlParameter vEmail = new SqlParameter("@Email", SqlDbType.VarChar, 250);
                vEmail.Direction = ParameterDirection.Input; 
                sqlCommand.Parameters.Add(vEmail);
                SqlParameter vusername = new SqlParameter("@username", SqlDbType.VarChar, 250);
                vusername.Direction = ParameterDirection.Input; 
                sqlCommand.Parameters.Add(vusername);
                SqlParameter vpassword = new SqlParameter("@password", SqlDbType.VarChar, 250);
                vpassword.Direction = ParameterDirection.Input; 
                sqlCommand.Parameters.Add(vpassword);
                SqlParameter vCreatedDate = new SqlParameter("@CreatedDate", SqlDbType.DateTime);
                vCreatedDate.Direction = ParameterDirection.Input; 
                sqlCommand.Parameters.Add(vCreatedDate);
                SqlParameter vRole = new SqlParameter("@Role", SqlDbType.NVarChar, 256);
                vRole.Direction = ParameterDirection.Input; 
                sqlCommand.Parameters.Add(vRole);
                SqlParameter vIsApproved = new SqlParameter("@IsApproved", SqlDbType.Bit);
                vIsApproved.Direction = ParameterDirection.Input; 
                sqlCommand.Parameters.Add(vIsApproved);
                SqlParameter vUserId = new SqlParameter("@UserId", SqlDbType.UniqueIdentifier);
                vUserId.Direction = ParameterDirection.Input; 
                sqlCommand.Parameters.Add(vUserId);
                SqlParameter vLogins = new SqlParameter("@Logins", SqlDbType.Int);
                vLogins.Direction = ParameterDirection.Input; 
                sqlCommand.Parameters.Add(vLogins);
                SqlParameter vLastLogin = new SqlParameter("@LastLogin", SqlDbType.DateTime);
                vLastLogin.Direction = ParameterDirection.Input; 
                sqlCommand.Parameters.Add(vLastLogin);
                SqlParameter vFirstName = new SqlParameter("@FirstName", SqlDbType.VarChar, 250);
                vFirstName.Direction = ParameterDirection.Input; 
                sqlCommand.Parameters.Add(vFirstName);
                SqlParameter vLastName = new SqlParameter("@LastName", SqlDbType.VarChar, 250);
                vLastName.Direction = ParameterDirection.Input; 
                sqlCommand.Parameters.Add(vLastName);
                SqlParameter vCash = new SqlParameter("@Cash", SqlDbType.VarChar, 50);
                vCash.Direction = ParameterDirection.Input; 
                sqlCommand.Parameters.Add(vCash);
                SqlParameter vFreeze = new SqlParameter("@Freeze", SqlDbType.VarChar, 50);
                vFreeze.Direction = ParameterDirection.Input;
                sqlCommand.Parameters.Add(vFreeze);
                SqlParameter vFreezedays = new SqlParameter("@Freezedays", SqlDbType.Int);
                vFreezedays.Direction = ParameterDirection.Input;
                sqlCommand.Parameters.Add(vFreezedays);

                // Set input parameter values
                SqlServerHelper.SetParameterValue(
                    vCompId, 
                    companyMaster.CompId, 
                    0);
                SqlServerHelper.SetParameterValue(vid, companyMaster.id);
                SqlServerHelper.SetParameterValue(vCompanyName, companyMaster.CompanyName);
                SqlServerHelper.SetParameterValue(vAddress1, companyMaster.Address1);
                SqlServerHelper.SetParameterValue(vAddress2, companyMaster.Address2);
                SqlServerHelper.SetParameterValue(vAddress3, companyMaster.Address3);
                SqlServerHelper.SetParameterValue(vCity, companyMaster.City);
                SqlServerHelper.SetParameterValue(vPin, companyMaster.Pin);
                SqlServerHelper.SetParameterValue(vPhone, companyMaster.Phone);
                SqlServerHelper.SetParameterValue(vWebsite, companyMaster.Website);
                SqlServerHelper.SetParameterValue(vEmail, companyMaster.Email);
                SqlServerHelper.SetParameterValue(vusername, companyMaster.username);
                SqlServerHelper.SetParameterValue(vpassword, companyMaster.password);
                SqlServerHelper.SetParameterValue(vCreatedDate, companyMaster.CreatedDate);
                SqlServerHelper.SetParameterValue(vRole, companyMaster.Role);
                SqlServerHelper.SetParameterValue(vIsApproved, companyMaster.IsApproved);
                SqlServerHelper.SetParameterValue(vUserId, companyMaster.UserId);
                SqlServerHelper.SetParameterValue(vLogins, companyMaster.Logins);
                SqlServerHelper.SetParameterValue(vLastLogin, companyMaster.LastLogin);
                SqlServerHelper.SetParameterValue(vFirstName, companyMaster.FirstName);
                SqlServerHelper.SetParameterValue(vLastName, companyMaster.LastName);
                SqlServerHelper.SetParameterValue(vCash, companyMaster.Cash);
                SqlServerHelper.SetParameterValue(vFreeze, companyMaster.Freeze);
                SqlServerHelper.SetParameterValue(vFreezedays, companyMaster.Freezedays);

                try
                {
                    // Attach command
                    AttachCommand(sqlCommand);

                    // Execute command
                    __rowsAffected = sqlCommand.ExecuteNonQuery(); 
                    if(__rowsAffected == 0)
                    {
                        return __rowsAffected; 
                    }
                    

                    // Get output parameter values
                    companyMaster.CompId = SqlServerHelper.ToInt32(vCompId); 

                }
                finally
                {
                    // Detach command
                    DetachCommand(sqlCommand);
                }

            }
            
            return __rowsAffected; 
        }

        public IReader<CompanyMaster> ListAll()
        {
            // Create command
            using (SqlCommand sqlCommand = new SqlCommand("CompanyMasterListAll"))
            {
                // Set command type
                sqlCommand.CommandType = CommandType.StoredProcedure; 

                // Execute command
                SqlDataReader reader = sqlCommand.ExecuteReader(AttachReaderCommand(sqlCommand));

                // Return reader
                return new SqlServerCompanyMasterReader(reader); 
            }
        }

        public IReader<CompanyMaster> ListForid(int? id)
        {
            // Create command
            using (SqlCommand sqlCommand = new SqlCommand("CompanyMasterListForid"))
            {
                // Set command type
                sqlCommand.CommandType = CommandType.StoredProcedure; 

                // Add command parameters
                SqlParameter vid = new SqlParameter("@id", SqlDbType.Int);
                vid.Direction = ParameterDirection.Input; 
                sqlCommand.Parameters.Add(vid);
                
                // Set input parameter values
                SqlServerHelper.SetParameterValue(vid, id);

                // Execute command
                SqlDataReader reader = sqlCommand.ExecuteReader(AttachReaderCommand(sqlCommand));

                // Return reader
                return new SqlServerCompanyMasterReader(reader); 
            }
        }

    }

    public partial class SqlServerCompanyMasterReader : IReader<CompanyMaster>
    {
        private SqlDataReader sqlDataReader;

        private CompanyMaster _CompanyMaster;

        private int _CompIdOrdinal = -1;
        private int _idOrdinal = -1;
        private int _CompanyNameOrdinal = -1;
        private int _Address1Ordinal = -1;
        private int _Address2Ordinal = -1;
        private int _Address3Ordinal = -1;
        private int _CityOrdinal = -1;
        private int _PinOrdinal = -1;
        private int _PhoneOrdinal = -1;
        private int _WebsiteOrdinal = -1;
        private int _EmailOrdinal = -1;
        private int _usernameOrdinal = -1;
        private int _passwordOrdinal = -1;
        private int _CreatedDateOrdinal = -1;
        private int _RoleOrdinal = -1;
        private int _IsApprovedOrdinal = -1;
        private int _UserIdOrdinal = -1;
        private int _LoginsOrdinal = -1;
        private int _LastLoginOrdinal = -1;
        private int _FirstNameOrdinal = -1;
        private int _LastNameOrdinal = -1;
        private int _CashOrdinal = -1;
        private int _FreezeOrdinal = -1;
        private int _FreezeDaysOrdinal = -1;

        public SqlServerCompanyMasterReader(SqlDataReader sqlDataReader)
        {
            this.sqlDataReader = sqlDataReader; 
            for (int  i = 0; i < sqlDataReader.FieldCount; i++)
            {
                string columnName = sqlDataReader.GetName(i);
                columnName = columnName.ToUpper(); 
                switch (columnName)
                {
                    case "COMPID":
                        _CompIdOrdinal = i; 
                        break;
                    
                    case "ID":
                        _idOrdinal = i; 
                        break;
                    
                    case "COMPANYNAME":
                        _CompanyNameOrdinal = i; 
                        break;
                    
                    case "ADDRESS1":
                        _Address1Ordinal = i; 
                        break;
                    
                    case "ADDRESS2":
                        _Address2Ordinal = i; 
                        break;
                    
                    case "ADDRESS3":
                        _Address3Ordinal = i; 
                        break;
                    
                    case "CITY":
                        _CityOrdinal = i; 
                        break;
                    
                    case "PIN":
                        _PinOrdinal = i; 
                        break;
                    
                    case "PHONE":
                        _PhoneOrdinal = i; 
                        break;
                    
                    case "WEBSITE":
                        _WebsiteOrdinal = i; 
                        break;
                    
                    case "EMAIL":
                        _EmailOrdinal = i; 
                        break;
                    
                    case "USERNAME":
                        _usernameOrdinal = i; 
                        break;
                    
                    case "PASSWORD":
                        _passwordOrdinal = i; 
                        break;
                    
                    case "CREATEDDATE":
                        _CreatedDateOrdinal = i; 
                        break;
                    
                    case "ROLE":
                        _RoleOrdinal = i; 
                        break;
                    
                    case "ISAPPROVED":
                        _IsApprovedOrdinal = i; 
                        break;
                    
                    case "USERID":
                        _UserIdOrdinal = i; 
                        break;
                    
                    case "LOGINS":
                        _LoginsOrdinal = i; 
                        break;
                    
                    case "LASTLOGIN":
                        _LastLoginOrdinal = i; 
                        break;
                    
                    case "FIRSTNAME":
                        _FirstNameOrdinal = i; 
                        break;
                    
                    case "LASTNAME":
                        _LastNameOrdinal = i; 
                        break;
                    
                    case "CASH":
                        _CashOrdinal = i; 
                        break;

                    case "FREEZE":
                        _FreezeOrdinal = i;
                        break;
                    case "FREEZEDAYS":
                        _FreezeDaysOrdinal = i;
                        break;

                    
                }
            }
        }

        #region IReader<CompanyMaster> Implementation
        
        public bool Read()
        {
            _CompanyMaster = null; 
            return this.sqlDataReader.Read(); 
        }

        public CompanyMaster Current
        {
            get
            {
                if(_CompanyMaster == null)
                {
                    _CompanyMaster = new CompanyMaster();
                    if(_CompIdOrdinal != -1)
                    {
                        _CompanyMaster.CompId = SqlServerHelper.ToInt32(sqlDataReader, _CompIdOrdinal); 
                    }
                    _CompanyMaster.id = SqlServerHelper.ToNullableInt32(sqlDataReader, _idOrdinal); 
                    _CompanyMaster.CompanyName = SqlServerHelper.ToString(sqlDataReader, _CompanyNameOrdinal); 
                    _CompanyMaster.Address1 = SqlServerHelper.ToString(sqlDataReader, _Address1Ordinal); 
                    _CompanyMaster.Address2 = SqlServerHelper.ToString(sqlDataReader, _Address2Ordinal); 
                    _CompanyMaster.Address3 = SqlServerHelper.ToString(sqlDataReader, _Address3Ordinal); 
                    _CompanyMaster.City = SqlServerHelper.ToString(sqlDataReader, _CityOrdinal); 
                    _CompanyMaster.Pin = SqlServerHelper.ToString(sqlDataReader, _PinOrdinal); 
                    _CompanyMaster.Phone = SqlServerHelper.ToString(sqlDataReader, _PhoneOrdinal); 
                    _CompanyMaster.Website = SqlServerHelper.ToString(sqlDataReader, _WebsiteOrdinal); 
                    _CompanyMaster.Email = SqlServerHelper.ToString(sqlDataReader, _EmailOrdinal); 
                    _CompanyMaster.username = SqlServerHelper.ToString(sqlDataReader, _usernameOrdinal); 
                    _CompanyMaster.password = SqlServerHelper.ToString(sqlDataReader, _passwordOrdinal); 
                    _CompanyMaster.CreatedDate = SqlServerHelper.ToNullableDateTime(sqlDataReader, _CreatedDateOrdinal); 
                    _CompanyMaster.Role = SqlServerHelper.ToString(sqlDataReader, _RoleOrdinal); 
                    _CompanyMaster.IsApproved = SqlServerHelper.ToNullableBoolean(sqlDataReader, _IsApprovedOrdinal); 
                    _CompanyMaster.UserId = SqlServerHelper.ToNullableGuid(sqlDataReader, _UserIdOrdinal); 
                    _CompanyMaster.Logins = SqlServerHelper.ToNullableInt32(sqlDataReader, _LoginsOrdinal); 
                    _CompanyMaster.LastLogin = SqlServerHelper.ToNullableDateTime(sqlDataReader, _LastLoginOrdinal); 
                    _CompanyMaster.FirstName = SqlServerHelper.ToString(sqlDataReader, _FirstNameOrdinal); 
                    _CompanyMaster.LastName = SqlServerHelper.ToString(sqlDataReader, _LastNameOrdinal); 
                    _CompanyMaster.Cash = SqlServerHelper.ToString(sqlDataReader, _CashOrdinal); 
                }
                

                return _CompanyMaster; 
            }
        }

        public void Close()
        {
            sqlDataReader.Close();
        }

        public List<CompanyMaster> ToList()
        {
            List<CompanyMaster> list = new List<CompanyMaster>();
            while(this.Read())
            {
                list.Add(this.Current);
            }
            this.Close();
            return list; 
        }

        public DataTable ToDataTable()
        {
            DataTable dataTable = new DataTable();
            dataTable.Load(sqlDataReader);
            return dataTable; 
        }

        #endregion
        
        #region IDisposable Implementation
        
        public void Dispose()
        {
            sqlDataReader.Dispose();
        }
        #endregion
        
        #region IEnumerable<CompanyMaster> Implementation
        
        public IEnumerator<CompanyMaster> GetEnumerator()
        {
            return new CompanyMasterEnumerator(this); 
        }

        #endregion
        
        #region IEnumerable Implementation
        
        IEnumerator IEnumerable.GetEnumerator()
        {
            return new CompanyMasterEnumerator(this); 
        }

        #endregion
        
        
        private partial class CompanyMasterEnumerator : IEnumerator<CompanyMaster>
        {
            private IReader<CompanyMaster> companyMasterReader;

            public CompanyMasterEnumerator(IReader<CompanyMaster> companyMasterReader)
            {
                this.companyMasterReader = companyMasterReader; 
            }

            #region IEnumerator<CompanyMaster> Members
            
            public CompanyMaster Current
            {
                get { return this.companyMasterReader.Current; }
            }

            #endregion
            
            #region IDisposable Members
            
            public void Dispose()
            {
                this.companyMasterReader.Dispose();
            }

            #endregion
            
            #region IEnumerator Members
            
            object IEnumerator.Current
            {
                get { return this.companyMasterReader.Current; }
            }

            public bool MoveNext()
            {
                return this.companyMasterReader.Read(); 
            }

            public void Reset()
            {
                throw new Exception("Reset of companymaster reader is not supported."); 
            }

            #endregion
            
        }
    }
}
