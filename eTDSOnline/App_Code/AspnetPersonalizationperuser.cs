// This code was generated by an EVALUATION copy of Schematrix SchemaCoder.
// Redistribution of this source code, or an application developed from it, is forbidden.
// Modification of this source code to remove this comment is also forbidden.
// Please visit http://www.schematrix.com/ to obtain a license to use this software.


using System;
using System.Collections;
using System.Collections.Generic;
using System.Data;
using System.Data.SqlClient;
using System.Data.SqlTypes;
using System.IO;

namespace PayrollProject
{
    public partial class AspnetPersonalizationperuser
    {
        private static IAspnetPersonalizationperuserPersister _DefaultPersister;
        private IAspnetPersonalizationperuserPersister _Persister;
        private Guid _Id;
        private Guid? _PathId;
        private Guid? _UserId;
        private byte[] _PageSettings;
        private Stream _PageSettingsStream;
        private DateTime _LastUpdatedDate;

        static AspnetPersonalizationperuser()
        {
            // Assign default persister
            _DefaultPersister = new SqlServerAspnetPersonalizationperuserPersister();
        }

        public AspnetPersonalizationperuser()
        {
            // Assign default persister to instance persister
            _Persister = _DefaultPersister; 
        }

        public AspnetPersonalizationperuser(Guid _Id)
        {
            // Assign default persister to instance persister
            _Persister = _DefaultPersister; 

            // Assign method parameter to private fields
            this._Id = _Id; 

            // Call associated retrieve method
            Retrieve();
        }

        public AspnetPersonalizationperuser(Guid? _PathId, Guid? _UserId)
        {
            // Assign default persister to instance persister
            _Persister = _DefaultPersister; 

            // Assign method parameter to private fields
            this._PathId = _PathId; 
            this._UserId = _UserId; 

            // Call associated retrieve method
            RetrieveByAspnetPersonalizationperuser();
        }

        public AspnetPersonalizationperuser(DataRow row)
        {
            // Assign default persister to instance persister
            _Persister = _DefaultPersister; 

            // Assign column values to private members
            for (int  i = 0; i < row.Table.Columns.Count; i++)
            {
                switch (row.Table.Columns[i].ColumnName.ToUpper())
                {
                    case "ID":
                        if(row[i, DataRowVersion.Current] is Guid)
                        {
                            this.Id = (Guid)row[i, DataRowVersion.Current]; 
                        }
                        else
                        {
                            this.Id = new Guid((Byte[])row[i, DataRowVersion.Current]); 
                        }
                        break;
                    
                    case "PATHID":
                        if(row.IsNull(i) == false)
                        {
                            if(row[i, DataRowVersion.Current] is Guid)
                            {
                                this.PathId = (Guid)row[i, DataRowVersion.Current]; 
                            }
                            else
                            {
                                this.PathId = new Guid((Byte[])row[i, DataRowVersion.Current]); 
                            }
                        }
                        break;
                    
                    case "USERID":
                        if(row.IsNull(i) == false)
                        {
                            if(row[i, DataRowVersion.Current] is Guid)
                            {
                                this.UserId = (Guid)row[i, DataRowVersion.Current]; 
                            }
                            else
                            {
                                this.UserId = new Guid((Byte[])row[i, DataRowVersion.Current]); 
                            }
                        }
                        break;
                    
                    case "PAGESETTINGS":
                        this.PageSettings = (Byte[])row[i, DataRowVersion.Current]; 
                        break;
                    
                    case "LASTUPDATEDDATE":
                        this.LastUpdatedDate = Convert.ToDateTime(row[i, DataRowVersion.Current]); 
                        break;
                    
                }
            }
        }

        public static IAspnetPersonalizationperuserPersister DefaultPersister
        {
            get { return _DefaultPersister; }
            set { _DefaultPersister = value; }
        }

        public IAspnetPersonalizationperuserPersister Persister
        {
            get { return _Persister; }
            set { _Persister = value; }
        }

        public Guid Id
        {
            get { return _Id; }
            set { _Id = value; }
        }

        public Guid? PathId
        {
            get { return _PathId; }
            set { _PathId = value; }
        }

        public Guid? UserId
        {
            get { return _UserId; }
            set { _UserId = value; }
        }

        public byte[] PageSettings
        {
            get { return _PageSettings; }
            set { _PageSettings = value; }
        }

        public Stream PageSettingsStream
        {
            get { return _PageSettingsStream; }
            set { _PageSettingsStream = value; }
        }

        public DateTime LastUpdatedDate
        {
            get { return _LastUpdatedDate; }
            set { _LastUpdatedDate = value; }
        }

        public virtual void Clone(AspnetPersonalizationperuser sourceObject)
        {
            // Clone attributes from source object
            this._Id = sourceObject.Id; 
            this._PathId = sourceObject.PathId; 
            this._UserId = sourceObject.UserId; 
            if(sourceObject.PageSettings == null)
            {
                this._PageSettings = null; 
            }
            else
            {
                this._PageSettings = (byte[])sourceObject.PageSettings.Clone(); 
            }
            this._LastUpdatedDate = sourceObject.LastUpdatedDate; 
        }

        public virtual int Retrieve()
        {
            return _Persister.Retrieve(this); 
        }

        public virtual int Update()
        {
            return _Persister.Update(this); 
        }

        public virtual int Delete()
        {
            return _Persister.Delete(this); 
        }

        public virtual int Insert()
        {
            return _Persister.Insert(this); 
        }

        public static IReader<AspnetPersonalizationperuser> ListAll()
        {
            return _DefaultPersister.ListAll(); 
        }

        public static IReader<AspnetPersonalizationperuser> ListForPathId(Guid? pathId)
        {
            return _DefaultPersister.ListForPathId(pathId); 
        }

        public static IReader<AspnetPersonalizationperuser> ListForUserId(Guid? userId)
        {
            return _DefaultPersister.ListForUserId(userId); 
        }

        public virtual int RetrieveByAspnetPersonalizationperuser()
        {
            return _Persister.RetrieveByAspnetPersonalizationperuser(this); 
        }

    }
    
    public partial interface IAspnetPersonalizationperuserPersister
    {
        int Retrieve(AspnetPersonalizationperuser aspnetPersonalizationperuser);
        int Update(AspnetPersonalizationperuser aspnetPersonalizationperuser);
        int Delete(AspnetPersonalizationperuser aspnetPersonalizationperuser);
        int Insert(AspnetPersonalizationperuser aspnetPersonalizationperuser);
        IReader<AspnetPersonalizationperuser> ListAll();
        IReader<AspnetPersonalizationperuser> ListForPathId(Guid? pathId);
        IReader<AspnetPersonalizationperuser> ListForUserId(Guid? userId);
        int RetrieveByAspnetPersonalizationperuser(AspnetPersonalizationperuser aspnetPersonalizationperuser);
    }
    
    public partial class SqlServerAspnetPersonalizationperuserPersister : SqlPersisterBase, IAspnetPersonalizationperuserPersister
    {
        public SqlServerAspnetPersonalizationperuserPersister()
        {
        }

        public SqlServerAspnetPersonalizationperuserPersister(string connectionString) : base(connectionString)
        {
        }

        public SqlServerAspnetPersonalizationperuserPersister(SqlConnection connection) : base(connection)
        {
        }

        public SqlServerAspnetPersonalizationperuserPersister(SqlTransaction transaction) : base(transaction)
        {
        }

        public int Retrieve(AspnetPersonalizationperuser aspnetPersonalizationperuser)
        {
            int __rowsAffected = 1;
            
            // Create command
            using (SqlCommand sqlCommand = new SqlCommand("AspnetPersonalizationperuserGet"))
            {
                // Set command type
                sqlCommand.CommandType = CommandType.StoredProcedure; 

                try
                {
                    // Attach command
                    AttachCommand(sqlCommand);

                    // Add command parameters
                    SqlParameter vId = new SqlParameter("@Id", SqlDbType.UniqueIdentifier);
                    vId.Direction = ParameterDirection.InputOutput; 
                    sqlCommand.Parameters.Add(vId);
                    SqlParameter vPathId = new SqlParameter("@PathId", SqlDbType.UniqueIdentifier);
                    vPathId.Direction = ParameterDirection.Output; 
                    sqlCommand.Parameters.Add(vPathId);
                    SqlParameter vUserId = new SqlParameter("@UserId", SqlDbType.UniqueIdentifier);
                    vUserId.Direction = ParameterDirection.Output; 
                    sqlCommand.Parameters.Add(vUserId);
                    SqlParameter vPageSettings = new SqlParameter("@PageSettings", SqlDbType.VarBinary, 2147483647);
                    vPageSettings.Direction = ParameterDirection.Output; 
                    sqlCommand.Parameters.Add(vPageSettings);
                    SqlParameter vLastUpdatedDate = new SqlParameter("@LastUpdatedDate", SqlDbType.DateTime);
                    vLastUpdatedDate.Direction = ParameterDirection.Output; 
                    sqlCommand.Parameters.Add(vLastUpdatedDate);

                    // Set input parameter values
                    SqlServerHelper.SetParameterValue(vId, aspnetPersonalizationperuser.Id);

                    // Execute command
                    sqlCommand.ExecuteNonQuery();

                    try
                    {
                        // Get output parameter values
                        aspnetPersonalizationperuser.Id = SqlServerHelper.ToGuid(vId); 
                        aspnetPersonalizationperuser.PathId = SqlServerHelper.ToNullableGuid(vPathId); 
                        aspnetPersonalizationperuser.UserId = SqlServerHelper.ToNullableGuid(vUserId); 
                        if(aspnetPersonalizationperuser.PageSettingsStream != null)
                            SqlServerHelper.ToStream(vPageSettings, aspnetPersonalizationperuser.PageSettingsStream);
                        else
                            aspnetPersonalizationperuser.PageSettings = SqlServerHelper.ToByteArray(vPageSettings); 
                        
                        aspnetPersonalizationperuser.LastUpdatedDate = SqlServerHelper.ToDateTime(vLastUpdatedDate); 

                    }
                    catch(Exception ex)
                    {
                        if(ex is System.NullReferenceException)
                        {
                            __rowsAffected = 0; 
                        }
                        else
                        {
                            throw ex; 
                        }
                    }
                }
                finally
                {
                    // Detach command
                    DetachCommand(sqlCommand);
                }

            }
            
            return __rowsAffected; 
        }

        public int Update(AspnetPersonalizationperuser aspnetPersonalizationperuser)
        {
            int __rowsAffected = 0;
            
            // Create command
            using (SqlCommand sqlCommand = new SqlCommand("AspnetPersonalizationperuserUpdate"))
            {
                // Set command type
                sqlCommand.CommandType = CommandType.StoredProcedure; 

                // Add command parameters
                SqlParameter vId = new SqlParameter("@Id", SqlDbType.UniqueIdentifier);
                vId.Direction = ParameterDirection.Input; 
                sqlCommand.Parameters.Add(vId);
                SqlParameter vPathId = new SqlParameter("@PathId", SqlDbType.UniqueIdentifier);
                vPathId.Direction = ParameterDirection.Input; 
                sqlCommand.Parameters.Add(vPathId);
                SqlParameter vUserId = new SqlParameter("@UserId", SqlDbType.UniqueIdentifier);
                vUserId.Direction = ParameterDirection.Input; 
                sqlCommand.Parameters.Add(vUserId);
                SqlParameter vPageSettings = new SqlParameter("@PageSettings", SqlDbType.VarBinary, 2147483647);
                vPageSettings.Direction = ParameterDirection.Input; 
                sqlCommand.Parameters.Add(vPageSettings);
                SqlParameter vLastUpdatedDate = new SqlParameter("@LastUpdatedDate", SqlDbType.DateTime);
                vLastUpdatedDate.Direction = ParameterDirection.Input; 
                sqlCommand.Parameters.Add(vLastUpdatedDate);

                // Set input parameter values
                SqlServerHelper.SetParameterValue(vId, aspnetPersonalizationperuser.Id);
                SqlServerHelper.SetParameterValue(vPathId, aspnetPersonalizationperuser.PathId);
                SqlServerHelper.SetParameterValue(vUserId, aspnetPersonalizationperuser.UserId);
                if(aspnetPersonalizationperuser.PageSettingsStream != null)
                    SqlServerHelper.SetParameterValue(vPageSettings, aspnetPersonalizationperuser.PageSettingsStream);
                else
                    SqlServerHelper.SetParameterValue(vPageSettings, aspnetPersonalizationperuser.PageSettings);
                SqlServerHelper.SetParameterValue(vLastUpdatedDate, aspnetPersonalizationperuser.LastUpdatedDate);

                try
                {
                    // Attach command
                    AttachCommand(sqlCommand);

                    // Execute command
                    __rowsAffected = sqlCommand.ExecuteNonQuery(); 
                    if(__rowsAffected == 0)
                    {
                        return __rowsAffected; 
                    }
                    

                }
                finally
                {
                    // Detach command
                    DetachCommand(sqlCommand);
                }

            }
            
            return __rowsAffected; 
        }

        public int Delete(AspnetPersonalizationperuser aspnetPersonalizationperuser)
        {
            int __rowsAffected = 0;
            
            // Create command
            using (SqlCommand sqlCommand = new SqlCommand("AspnetPersonalizationperuserDelete"))
            {
                // Set command type
                sqlCommand.CommandType = CommandType.StoredProcedure; 

                try
                {
                    // Attach command
                    AttachCommand(sqlCommand);

                    // Add command parameters
                    SqlParameter vId = new SqlParameter("@Id", SqlDbType.UniqueIdentifier);
                    vId.Direction = ParameterDirection.Input; 
                    sqlCommand.Parameters.Add(vId);

                    // Set input parameter values
                    SqlServerHelper.SetParameterValue(vId, aspnetPersonalizationperuser.Id);

                    // Execute command
                    __rowsAffected = sqlCommand.ExecuteNonQuery(); 

                }
                finally
                {
                    // Detach command
                    DetachCommand(sqlCommand);
                }

            }
            
            return __rowsAffected; 
        }

        public int Insert(AspnetPersonalizationperuser aspnetPersonalizationperuser)
        {
            int __rowsAffected = 0;
            
            // Create command
            using (SqlCommand sqlCommand = new SqlCommand("AspnetPersonalizationperuserInsert"))
            {
                // Set command type
                sqlCommand.CommandType = CommandType.StoredProcedure; 

                // Add command parameters
                SqlParameter vId = new SqlParameter("@Id", SqlDbType.UniqueIdentifier);
                vId.Direction = ParameterDirection.Input; 
                sqlCommand.Parameters.Add(vId);
                SqlParameter vPathId = new SqlParameter("@PathId", SqlDbType.UniqueIdentifier);
                vPathId.Direction = ParameterDirection.Input; 
                sqlCommand.Parameters.Add(vPathId);
                SqlParameter vUserId = new SqlParameter("@UserId", SqlDbType.UniqueIdentifier);
                vUserId.Direction = ParameterDirection.Input; 
                sqlCommand.Parameters.Add(vUserId);
                SqlParameter vPageSettings = new SqlParameter("@PageSettings", SqlDbType.VarBinary, 2147483647);
                vPageSettings.Direction = ParameterDirection.Input; 
                sqlCommand.Parameters.Add(vPageSettings);
                SqlParameter vLastUpdatedDate = new SqlParameter("@LastUpdatedDate", SqlDbType.DateTime);
                vLastUpdatedDate.Direction = ParameterDirection.Input; 
                sqlCommand.Parameters.Add(vLastUpdatedDate);

                // Set input parameter values
                SqlServerHelper.SetParameterValue(vId, aspnetPersonalizationperuser.Id);
                SqlServerHelper.SetParameterValue(vPathId, aspnetPersonalizationperuser.PathId);
                SqlServerHelper.SetParameterValue(vUserId, aspnetPersonalizationperuser.UserId);
                if(aspnetPersonalizationperuser.PageSettingsStream != null)
                    SqlServerHelper.SetParameterValue(vPageSettings, aspnetPersonalizationperuser.PageSettingsStream);
                else
                    SqlServerHelper.SetParameterValue(vPageSettings, aspnetPersonalizationperuser.PageSettings);
                SqlServerHelper.SetParameterValue(vLastUpdatedDate, aspnetPersonalizationperuser.LastUpdatedDate);

                try
                {
                    // Attach command
                    AttachCommand(sqlCommand);

                    // Execute command
                    __rowsAffected = sqlCommand.ExecuteNonQuery(); 
                    if(__rowsAffected == 0)
                    {
                        return __rowsAffected; 
                    }
                    

                }
                finally
                {
                    // Detach command
                    DetachCommand(sqlCommand);
                }

            }
            
            return __rowsAffected; 
        }

        public IReader<AspnetPersonalizationperuser> ListAll()
        {
            // Create command
            using (SqlCommand sqlCommand = new SqlCommand("AspnetPersonalizationperuserListAll"))
            {
                // Set command type
                sqlCommand.CommandType = CommandType.StoredProcedure; 

                // Execute command
                SqlDataReader reader = sqlCommand.ExecuteReader(AttachReaderCommand(sqlCommand));

                // Return reader
                return new SqlServerAspnetPersonalizationperuserReader(reader); 
            }
        }

        public IReader<AspnetPersonalizationperuser> ListForPathId(Guid? pathId)
        {
            // Create command
            using (SqlCommand sqlCommand = new SqlCommand("AspnetPersonalizationperuserListForPathId"))
            {
                // Set command type
                sqlCommand.CommandType = CommandType.StoredProcedure; 

                // Add command parameters
                SqlParameter vPathId = new SqlParameter("@PathId", SqlDbType.UniqueIdentifier);
                vPathId.Direction = ParameterDirection.Input; 
                sqlCommand.Parameters.Add(vPathId);
                
                // Set input parameter values
                SqlServerHelper.SetParameterValue(vPathId, pathId);

                // Execute command
                SqlDataReader reader = sqlCommand.ExecuteReader(AttachReaderCommand(sqlCommand));

                // Return reader
                return new SqlServerAspnetPersonalizationperuserReader(reader); 
            }
        }

        public IReader<AspnetPersonalizationperuser> ListForUserId(Guid? userId)
        {
            // Create command
            using (SqlCommand sqlCommand = new SqlCommand("AspnetPersonalizationperuserListForUserId"))
            {
                // Set command type
                sqlCommand.CommandType = CommandType.StoredProcedure; 

                // Add command parameters
                SqlParameter vUserId = new SqlParameter("@UserId", SqlDbType.UniqueIdentifier);
                vUserId.Direction = ParameterDirection.Input; 
                sqlCommand.Parameters.Add(vUserId);
                
                // Set input parameter values
                SqlServerHelper.SetParameterValue(vUserId, userId);

                // Execute command
                SqlDataReader reader = sqlCommand.ExecuteReader(AttachReaderCommand(sqlCommand));

                // Return reader
                return new SqlServerAspnetPersonalizationperuserReader(reader); 
            }
        }

        public int RetrieveByAspnetPersonalizationperuser(AspnetPersonalizationperuser aspnetPersonalizationperuser)
        {
            int __rowsAffected = 1;
            
            // Create command
            using (SqlCommand sqlCommand = new SqlCommand("AspnetPersonalizationperuserGetByAspnetPersonalizationperuserIndex1"))
            {
                // Set command type
                sqlCommand.CommandType = CommandType.StoredProcedure; 

                try
                {
                    // Attach command
                    AttachCommand(sqlCommand);

                    // Add command parameters
                    SqlParameter vId = new SqlParameter("@Id", SqlDbType.UniqueIdentifier);
                    vId.Direction = ParameterDirection.Output; 
                    sqlCommand.Parameters.Add(vId);
                    SqlParameter vPathId = new SqlParameter("@PathId", SqlDbType.UniqueIdentifier);
                    vPathId.Direction = ParameterDirection.InputOutput; 
                    sqlCommand.Parameters.Add(vPathId);
                    SqlParameter vUserId = new SqlParameter("@UserId", SqlDbType.UniqueIdentifier);
                    vUserId.Direction = ParameterDirection.InputOutput; 
                    sqlCommand.Parameters.Add(vUserId);
                    SqlParameter vPageSettings = new SqlParameter("@PageSettings", SqlDbType.VarBinary, 2147483647);
                    vPageSettings.Direction = ParameterDirection.Output; 
                    sqlCommand.Parameters.Add(vPageSettings);
                    SqlParameter vLastUpdatedDate = new SqlParameter("@LastUpdatedDate", SqlDbType.DateTime);
                    vLastUpdatedDate.Direction = ParameterDirection.Output; 
                    sqlCommand.Parameters.Add(vLastUpdatedDate);

                    // Set input parameter values
                    SqlServerHelper.SetParameterValue(vPathId, aspnetPersonalizationperuser.PathId);
                    SqlServerHelper.SetParameterValue(vUserId, aspnetPersonalizationperuser.UserId);

                    // Execute command
                    sqlCommand.ExecuteNonQuery();

                    try
                    {
                        // Get output parameter values
                        aspnetPersonalizationperuser.Id = SqlServerHelper.ToGuid(vId); 
                        aspnetPersonalizationperuser.PathId = SqlServerHelper.ToNullableGuid(vPathId); 
                        aspnetPersonalizationperuser.UserId = SqlServerHelper.ToNullableGuid(vUserId); 
                        if(aspnetPersonalizationperuser.PageSettingsStream != null)
                            SqlServerHelper.ToStream(vPageSettings, aspnetPersonalizationperuser.PageSettingsStream);
                        else
                            aspnetPersonalizationperuser.PageSettings = SqlServerHelper.ToByteArray(vPageSettings); 
                        
                        aspnetPersonalizationperuser.LastUpdatedDate = SqlServerHelper.ToDateTime(vLastUpdatedDate); 

                    }
                    catch(Exception ex)
                    {
                        if(ex is System.NullReferenceException)
                        {
                            __rowsAffected = 0; 
                        }
                        else
                        {
                            throw ex; 
                        }
                    }
                }
                finally
                {
                    // Detach command
                    DetachCommand(sqlCommand);
                }

            }
            
            return __rowsAffected; 
        }

    }

    public partial class SqlServerAspnetPersonalizationperuserReader : IReader<AspnetPersonalizationperuser>
    {
        private SqlDataReader sqlDataReader;

        private AspnetPersonalizationperuser _AspnetPersonalizationperuser;

        private int _IdOrdinal = -1;
        private int _PathIdOrdinal = -1;
        private int _UserIdOrdinal = -1;
        private int _PageSettingsOrdinal = -1;
        private int _LastUpdatedDateOrdinal = -1;

        public SqlServerAspnetPersonalizationperuserReader(SqlDataReader sqlDataReader)
        {
            this.sqlDataReader = sqlDataReader; 
            for (int  i = 0; i < sqlDataReader.FieldCount; i++)
            {
                string columnName = sqlDataReader.GetName(i);
                columnName = columnName.ToUpper(); 
                switch (columnName)
                {
                    case "ID":
                        _IdOrdinal = i; 
                        break;
                    
                    case "PATHID":
                        _PathIdOrdinal = i; 
                        break;
                    
                    case "USERID":
                        _UserIdOrdinal = i; 
                        break;
                    
                    case "PAGESETTINGS":
                        _PageSettingsOrdinal = i; 
                        break;
                    
                    case "LASTUPDATEDDATE":
                        _LastUpdatedDateOrdinal = i; 
                        break;
                    
                }
            }
        }

        #region IReader<AspnetPersonalizationperuser> Implementation
        
        public bool Read()
        {
            _AspnetPersonalizationperuser = null; 
            return this.sqlDataReader.Read(); 
        }

        public AspnetPersonalizationperuser Current
        {
            get
            {
                if(_AspnetPersonalizationperuser == null)
                {
                    _AspnetPersonalizationperuser = new AspnetPersonalizationperuser();
                    if(_IdOrdinal != -1)
                    {
                        _AspnetPersonalizationperuser.Id = SqlServerHelper.ToGuid(sqlDataReader, _IdOrdinal); 
                    }
                    _AspnetPersonalizationperuser.PathId = SqlServerHelper.ToNullableGuid(sqlDataReader, _PathIdOrdinal); 
                    _AspnetPersonalizationperuser.UserId = SqlServerHelper.ToNullableGuid(sqlDataReader, _UserIdOrdinal); 
                    _AspnetPersonalizationperuser.PageSettings = SqlServerHelper.ToByteArray(sqlDataReader, _PageSettingsOrdinal); 
                    if(_LastUpdatedDateOrdinal != -1)
                    {
                        _AspnetPersonalizationperuser.LastUpdatedDate = SqlServerHelper.ToDateTime(sqlDataReader, _LastUpdatedDateOrdinal); 
                    }
                }
                

                return _AspnetPersonalizationperuser; 
            }
        }

        public void Close()
        {
            sqlDataReader.Close();
        }

        public List<AspnetPersonalizationperuser> ToList()
        {
            List<AspnetPersonalizationperuser> list = new List<AspnetPersonalizationperuser>();
            while(this.Read())
            {
                list.Add(this.Current);
            }
            this.Close();
            return list; 
        }

        public DataTable ToDataTable()
        {
            DataTable dataTable = new DataTable();
            dataTable.Load(sqlDataReader);
            return dataTable; 
        }

        #endregion
        
        #region IDisposable Implementation
        
        public void Dispose()
        {
            sqlDataReader.Dispose();
        }
        #endregion
        
        #region IEnumerable<AspnetPersonalizationperuser> Implementation
        
        public IEnumerator<AspnetPersonalizationperuser> GetEnumerator()
        {
            return new AspnetPersonalizationperuserEnumerator(this); 
        }

        #endregion
        
        #region IEnumerable Implementation
        
        IEnumerator IEnumerable.GetEnumerator()
        {
            return new AspnetPersonalizationperuserEnumerator(this); 
        }

        #endregion
        
        
        private partial class AspnetPersonalizationperuserEnumerator : IEnumerator<AspnetPersonalizationperuser>
        {
            private IReader<AspnetPersonalizationperuser> aspnetPersonalizationperuserReader;

            public AspnetPersonalizationperuserEnumerator(IReader<AspnetPersonalizationperuser> aspnetPersonalizationperuserReader)
            {
                this.aspnetPersonalizationperuserReader = aspnetPersonalizationperuserReader; 
            }

            #region IEnumerator<AspnetPersonalizationperuser> Members
            
            public AspnetPersonalizationperuser Current
            {
                get { return this.aspnetPersonalizationperuserReader.Current; }
            }

            #endregion
            
            #region IDisposable Members
            
            public void Dispose()
            {
                this.aspnetPersonalizationperuserReader.Dispose();
            }

            #endregion
            
            #region IEnumerator Members
            
            object IEnumerator.Current
            {
                get { return this.aspnetPersonalizationperuserReader.Current; }
            }

            public bool MoveNext()
            {
                return this.aspnetPersonalizationperuserReader.Read(); 
            }

            public void Reset()
            {
                throw new Exception("Reset of aspnetpersonalizationperuser reader is not supported."); 
            }

            #endregion
            
        }
    }
}
