// This code was generated by an EVALUATION copy of Schematrix SchemaCoder.
// Redistribution of this source code, or an application developed from it, is forbidden.
// Modification of this source code to remove this comment is also forbidden.
// Please visit http://www.schematrix.com/ to obtain a license to use this software.


using System;
using System.Collections;
using System.Collections.Generic;
using System.Data;
using System.Data.SqlClient;
using System.Data.SqlTypes;
using System.IO;

namespace PayrollProject
{
    public partial class AspnetUsers
    {
        private static IAspnetUsersPersister _DefaultPersister;
        private IAspnetUsersPersister _Persister;
        private Guid _ApplicationId;
        private Guid _UserId;
        private string _UserName;
        private string _LoweredUserName;
        private string _MobileAlias;
        private bool _IsAnonymous;
        private DateTime _LastActivityDate;

        static AspnetUsers()
        {
            // Assign default persister
            _DefaultPersister = new SqlServerAspnetUsersPersister();
        }

        public AspnetUsers()
        {
            // Assign default persister to instance persister
            _Persister = _DefaultPersister; 
        }

        public AspnetUsers(Guid _UserId)
        {
            // Assign default persister to instance persister
            _Persister = _DefaultPersister; 

            // Assign method parameter to private fields
            this._UserId = _UserId; 

            // Call associated retrieve method
            Retrieve();
        }

        public AspnetUsers(Guid _ApplicationId, string _LoweredUserName)
        {
            // Assign default persister to instance persister
            _Persister = _DefaultPersister; 

            // Assign method parameter to private fields
            this._ApplicationId = _ApplicationId; 
            this._LoweredUserName = _LoweredUserName; 

            // Call associated retrieve method
            RetrieveByAspnetUsers();
        }

        public AspnetUsers(DataRow row)
        {
            // Assign default persister to instance persister
            _Persister = _DefaultPersister; 

            // Assign column values to private members
            for (int  i = 0; i < row.Table.Columns.Count; i++)
            {
                switch (row.Table.Columns[i].ColumnName.ToUpper())
                {
                    case "APPLICATIONID":
                        if(row[i, DataRowVersion.Current] is Guid)
                        {
                            this.ApplicationId = (Guid)row[i, DataRowVersion.Current]; 
                        }
                        else
                        {
                            this.ApplicationId = new Guid((Byte[])row[i, DataRowVersion.Current]); 
                        }
                        break;
                    
                    case "USERID":
                        if(row[i, DataRowVersion.Current] is Guid)
                        {
                            this.UserId = (Guid)row[i, DataRowVersion.Current]; 
                        }
                        else
                        {
                            this.UserId = new Guid((Byte[])row[i, DataRowVersion.Current]); 
                        }
                        break;
                    
                    case "USERNAME":
                        this.UserName = (string)row[i, DataRowVersion.Current]; 
                        break;
                    
                    case "LOWEREDUSERNAME":
                        this.LoweredUserName = (string)row[i, DataRowVersion.Current]; 
                        break;
                    
                    case "MOBILEALIAS":
                        if(row.IsNull(i) == false)
                        {
                            this.MobileAlias = (string)row[i, DataRowVersion.Current]; 
                        }
                        break;
                    
                    case "ISANONYMOUS":
                        this.IsAnonymous = Convert.ToBoolean(row[i, DataRowVersion.Current]); 
                        break;
                    
                    case "LASTACTIVITYDATE":
                        this.LastActivityDate = Convert.ToDateTime(row[i, DataRowVersion.Current]); 
                        break;
                    
                }
            }
        }

        public static IAspnetUsersPersister DefaultPersister
        {
            get { return _DefaultPersister; }
            set { _DefaultPersister = value; }
        }

        public IAspnetUsersPersister Persister
        {
            get { return _Persister; }
            set { _Persister = value; }
        }

        public Guid ApplicationId
        {
            get { return _ApplicationId; }
            set { _ApplicationId = value; }
        }

        public Guid UserId
        {
            get { return _UserId; }
            set { _UserId = value; }
        }

        public string UserName
        {
            get { return _UserName; }
            set { _UserName = value; }
        }

        public string LoweredUserName
        {
            get { return _LoweredUserName; }
            set { _LoweredUserName = value; }
        }

        public string MobileAlias
        {
            get { return _MobileAlias; }
            set { _MobileAlias = value; }
        }

        public bool IsAnonymous
        {
            get { return _IsAnonymous; }
            set { _IsAnonymous = value; }
        }

        public DateTime LastActivityDate
        {
            get { return _LastActivityDate; }
            set { _LastActivityDate = value; }
        }

        public virtual void Clone(AspnetUsers sourceObject)
        {
            // Clone attributes from source object
            this._ApplicationId = sourceObject.ApplicationId; 
            this._UserId = sourceObject.UserId; 
            this._UserName = sourceObject.UserName; 
            this._LoweredUserName = sourceObject.LoweredUserName; 
            this._MobileAlias = sourceObject.MobileAlias; 
            this._IsAnonymous = sourceObject.IsAnonymous; 
            this._LastActivityDate = sourceObject.LastActivityDate; 
        }

        public virtual int Retrieve()
        {
            return _Persister.Retrieve(this); 
        }

        public virtual int Update()
        {
            return _Persister.Update(this); 
        }

        public virtual int Delete()
        {
            return _Persister.Delete(this); 
        }

        public virtual int Insert()
        {
            return _Persister.Insert(this); 
        }

        public static IReader<AspnetUsers> ListAll()
        {
            return _DefaultPersister.ListAll(); 
        }

        public static IReader<AspnetUsers> ListForApplicationId(Guid applicationId)
        {
            return _DefaultPersister.ListForApplicationId(applicationId); 
        }

        public virtual int RetrieveByAspnetUsers()
        {
            return _Persister.RetrieveByAspnetUsers(this); 
        }

        public static IReader<AspnetUsers> ListForaspnet_Users_Index2(Guid applicationId, DateTime lastActivityDate)
        {
            return _DefaultPersister.ListForaspnet_Users_Index2(applicationId, lastActivityDate); 
        }

    }
    
    public partial interface IAspnetUsersPersister
    {
        int Retrieve(AspnetUsers aspnetUsers);
        int Update(AspnetUsers aspnetUsers);
        int Delete(AspnetUsers aspnetUsers);
        int Insert(AspnetUsers aspnetUsers);
        IReader<AspnetUsers> ListAll();
        IReader<AspnetUsers> ListForApplicationId(Guid applicationId);
        int RetrieveByAspnetUsers(AspnetUsers aspnetUsers);
        IReader<AspnetUsers> ListForaspnet_Users_Index2(Guid applicationId, DateTime lastActivityDate);
    }
    
    public partial class SqlServerAspnetUsersPersister : SqlPersisterBase, IAspnetUsersPersister
    {
        public SqlServerAspnetUsersPersister()
        {
        }

        public SqlServerAspnetUsersPersister(string connectionString) : base(connectionString)
        {
        }

        public SqlServerAspnetUsersPersister(SqlConnection connection) : base(connection)
        {
        }

        public SqlServerAspnetUsersPersister(SqlTransaction transaction) : base(transaction)
        {
        }

        public int Retrieve(AspnetUsers aspnetUsers)
        {
            int __rowsAffected = 1;
            
            // Create command
            using (SqlCommand sqlCommand = new SqlCommand("AspnetUsersGet"))
            {
                // Set command type
                sqlCommand.CommandType = CommandType.StoredProcedure; 

                try
                {
                    // Attach command
                    AttachCommand(sqlCommand);

                    // Add command parameters
                    SqlParameter vApplicationId = new SqlParameter("@ApplicationId", SqlDbType.UniqueIdentifier);
                    vApplicationId.Direction = ParameterDirection.Output; 
                    sqlCommand.Parameters.Add(vApplicationId);
                    SqlParameter vUserId = new SqlParameter("@UserId", SqlDbType.UniqueIdentifier);
                    vUserId.Direction = ParameterDirection.InputOutput; 
                    sqlCommand.Parameters.Add(vUserId);
                    SqlParameter vUserName = new SqlParameter("@UserName", SqlDbType.NVarChar, 256);
                    vUserName.Direction = ParameterDirection.Output; 
                    sqlCommand.Parameters.Add(vUserName);
                    SqlParameter vLoweredUserName = new SqlParameter("@LoweredUserName", SqlDbType.NVarChar, 256);
                    vLoweredUserName.Direction = ParameterDirection.Output; 
                    sqlCommand.Parameters.Add(vLoweredUserName);
                    SqlParameter vMobileAlias = new SqlParameter("@MobileAlias", SqlDbType.NVarChar, 16);
                    vMobileAlias.Direction = ParameterDirection.Output; 
                    sqlCommand.Parameters.Add(vMobileAlias);
                    SqlParameter vIsAnonymous = new SqlParameter("@IsAnonymous", SqlDbType.Bit);
                    vIsAnonymous.Direction = ParameterDirection.Output; 
                    sqlCommand.Parameters.Add(vIsAnonymous);
                    SqlParameter vLastActivityDate = new SqlParameter("@LastActivityDate", SqlDbType.DateTime);
                    vLastActivityDate.Direction = ParameterDirection.Output; 
                    sqlCommand.Parameters.Add(vLastActivityDate);

                    // Set input parameter values
                    SqlServerHelper.SetParameterValue(vUserId, aspnetUsers.UserId);

                    // Execute command
                    sqlCommand.ExecuteNonQuery();

                    try
                    {
                        // Get output parameter values
                        aspnetUsers.ApplicationId = SqlServerHelper.ToGuid(vApplicationId); 
                        aspnetUsers.UserId = SqlServerHelper.ToGuid(vUserId); 
                        aspnetUsers.UserName = SqlServerHelper.ToString(vUserName); 
                        aspnetUsers.LoweredUserName = SqlServerHelper.ToString(vLoweredUserName); 
                        aspnetUsers.MobileAlias = SqlServerHelper.ToString(vMobileAlias); 
                        aspnetUsers.IsAnonymous = SqlServerHelper.ToBoolean(vIsAnonymous); 
                        aspnetUsers.LastActivityDate = SqlServerHelper.ToDateTime(vLastActivityDate); 

                    }
                    catch(Exception ex)
                    {
                        if(ex is System.NullReferenceException)
                        {
                            __rowsAffected = 0; 
                        }
                        else
                        {
                            throw ex; 
                        }
                    }
                }
                finally
                {
                    // Detach command
                    DetachCommand(sqlCommand);
                }

            }
            
            return __rowsAffected; 
        }

        public int Update(AspnetUsers aspnetUsers)
        {
            int __rowsAffected = 0;
            
            // Create command
            using (SqlCommand sqlCommand = new SqlCommand("AspnetUsersUpdate"))
            {
                // Set command type
                sqlCommand.CommandType = CommandType.StoredProcedure; 

                // Add command parameters
                SqlParameter vApplicationId = new SqlParameter("@ApplicationId", SqlDbType.UniqueIdentifier);
                vApplicationId.Direction = ParameterDirection.Input; 
                sqlCommand.Parameters.Add(vApplicationId);
                SqlParameter vUserId = new SqlParameter("@UserId", SqlDbType.UniqueIdentifier);
                vUserId.Direction = ParameterDirection.Input; 
                sqlCommand.Parameters.Add(vUserId);
                SqlParameter vUserName = new SqlParameter("@UserName", SqlDbType.NVarChar, 256);
                vUserName.Direction = ParameterDirection.Input; 
                sqlCommand.Parameters.Add(vUserName);
                SqlParameter vLoweredUserName = new SqlParameter("@LoweredUserName", SqlDbType.NVarChar, 256);
                vLoweredUserName.Direction = ParameterDirection.Input; 
                sqlCommand.Parameters.Add(vLoweredUserName);
                SqlParameter vMobileAlias = new SqlParameter("@MobileAlias", SqlDbType.NVarChar, 16);
                vMobileAlias.Direction = ParameterDirection.Input; 
                sqlCommand.Parameters.Add(vMobileAlias);
                SqlParameter vIsAnonymous = new SqlParameter("@IsAnonymous", SqlDbType.Bit);
                vIsAnonymous.Direction = ParameterDirection.Input; 
                sqlCommand.Parameters.Add(vIsAnonymous);
                SqlParameter vLastActivityDate = new SqlParameter("@LastActivityDate", SqlDbType.DateTime);
                vLastActivityDate.Direction = ParameterDirection.Input; 
                sqlCommand.Parameters.Add(vLastActivityDate);

                // Set input parameter values
                SqlServerHelper.SetParameterValue(vApplicationId, aspnetUsers.ApplicationId);
                SqlServerHelper.SetParameterValue(vUserId, aspnetUsers.UserId);
                SqlServerHelper.SetParameterValue(vUserName, aspnetUsers.UserName);
                SqlServerHelper.SetParameterValue(vLoweredUserName, aspnetUsers.LoweredUserName);
                SqlServerHelper.SetParameterValue(vMobileAlias, aspnetUsers.MobileAlias);
                SqlServerHelper.SetParameterValue(vIsAnonymous, aspnetUsers.IsAnonymous);
                SqlServerHelper.SetParameterValue(vLastActivityDate, aspnetUsers.LastActivityDate);

                try
                {
                    // Attach command
                    AttachCommand(sqlCommand);

                    // Execute command
                    __rowsAffected = sqlCommand.ExecuteNonQuery(); 
                    if(__rowsAffected == 0)
                    {
                        return __rowsAffected; 
                    }
                    

                }
                finally
                {
                    // Detach command
                    DetachCommand(sqlCommand);
                }

            }
            
            return __rowsAffected; 
        }

        public int Delete(AspnetUsers aspnetUsers)
        {
            int __rowsAffected = 0;
            
            // Create command
            using (SqlCommand sqlCommand = new SqlCommand("AspnetUsersDelete"))
            {
                // Set command type
                sqlCommand.CommandType = CommandType.StoredProcedure; 

                try
                {
                    // Attach command
                    AttachCommand(sqlCommand);

                    // Add command parameters
                    SqlParameter vUserId = new SqlParameter("@UserId", SqlDbType.UniqueIdentifier);
                    vUserId.Direction = ParameterDirection.Input; 
                    sqlCommand.Parameters.Add(vUserId);

                    // Set input parameter values
                    SqlServerHelper.SetParameterValue(vUserId, aspnetUsers.UserId);

                    // Execute command
                    __rowsAffected = sqlCommand.ExecuteNonQuery(); 

                }
                finally
                {
                    // Detach command
                    DetachCommand(sqlCommand);
                }

            }
            
            return __rowsAffected; 
        }

        public int Insert(AspnetUsers aspnetUsers)
        {
            int __rowsAffected = 0;
            
            // Create command
            using (SqlCommand sqlCommand = new SqlCommand("AspnetUsersInsert"))
            {
                // Set command type
                sqlCommand.CommandType = CommandType.StoredProcedure; 

                // Add command parameters
                SqlParameter vApplicationId = new SqlParameter("@ApplicationId", SqlDbType.UniqueIdentifier);
                vApplicationId.Direction = ParameterDirection.Input; 
                sqlCommand.Parameters.Add(vApplicationId);
                SqlParameter vUserId = new SqlParameter("@UserId", SqlDbType.UniqueIdentifier);
                vUserId.Direction = ParameterDirection.Input; 
                sqlCommand.Parameters.Add(vUserId);
                SqlParameter vUserName = new SqlParameter("@UserName", SqlDbType.NVarChar, 256);
                vUserName.Direction = ParameterDirection.Input; 
                sqlCommand.Parameters.Add(vUserName);
                SqlParameter vLoweredUserName = new SqlParameter("@LoweredUserName", SqlDbType.NVarChar, 256);
                vLoweredUserName.Direction = ParameterDirection.Input; 
                sqlCommand.Parameters.Add(vLoweredUserName);
                SqlParameter vMobileAlias = new SqlParameter("@MobileAlias", SqlDbType.NVarChar, 16);
                vMobileAlias.Direction = ParameterDirection.Input; 
                sqlCommand.Parameters.Add(vMobileAlias);
                SqlParameter vIsAnonymous = new SqlParameter("@IsAnonymous", SqlDbType.Bit);
                vIsAnonymous.Direction = ParameterDirection.Input; 
                sqlCommand.Parameters.Add(vIsAnonymous);
                SqlParameter vLastActivityDate = new SqlParameter("@LastActivityDate", SqlDbType.DateTime);
                vLastActivityDate.Direction = ParameterDirection.Input; 
                sqlCommand.Parameters.Add(vLastActivityDate);

                // Set input parameter values
                SqlServerHelper.SetParameterValue(vApplicationId, aspnetUsers.ApplicationId);
                SqlServerHelper.SetParameterValue(vUserId, aspnetUsers.UserId);
                SqlServerHelper.SetParameterValue(vUserName, aspnetUsers.UserName);
                SqlServerHelper.SetParameterValue(vLoweredUserName, aspnetUsers.LoweredUserName);
                SqlServerHelper.SetParameterValue(vMobileAlias, aspnetUsers.MobileAlias);
                SqlServerHelper.SetParameterValue(vIsAnonymous, aspnetUsers.IsAnonymous);
                SqlServerHelper.SetParameterValue(vLastActivityDate, aspnetUsers.LastActivityDate);

                try
                {
                    // Attach command
                    AttachCommand(sqlCommand);

                    // Execute command
                    __rowsAffected = sqlCommand.ExecuteNonQuery(); 
                    if(__rowsAffected == 0)
                    {
                        return __rowsAffected; 
                    }
                    

                }
                finally
                {
                    // Detach command
                    DetachCommand(sqlCommand);
                }

            }
            
            return __rowsAffected; 
        }

        public IReader<AspnetUsers> ListAll()
        {
            // Create command
            using (SqlCommand sqlCommand = new SqlCommand("AspnetUsersListAll"))
            {
                // Set command type
                sqlCommand.CommandType = CommandType.StoredProcedure; 

                // Execute command
                SqlDataReader reader = sqlCommand.ExecuteReader(AttachReaderCommand(sqlCommand));

                // Return reader
                return new SqlServerAspnetUsersReader(reader); 
            }
        }

        public IReader<AspnetUsers> ListForApplicationId(Guid applicationId)
        {
            // Create command
            using (SqlCommand sqlCommand = new SqlCommand("AspnetUsersListForApplicationId"))
            {
                // Set command type
                sqlCommand.CommandType = CommandType.StoredProcedure; 

                // Add command parameters
                SqlParameter vApplicationId = new SqlParameter("@ApplicationId", SqlDbType.UniqueIdentifier);
                vApplicationId.Direction = ParameterDirection.Input; 
                sqlCommand.Parameters.Add(vApplicationId);
                
                // Set input parameter values
                SqlServerHelper.SetParameterValue(vApplicationId, applicationId);

                // Execute command
                SqlDataReader reader = sqlCommand.ExecuteReader(AttachReaderCommand(sqlCommand));

                // Return reader
                return new SqlServerAspnetUsersReader(reader); 
            }
        }

        public int RetrieveByAspnetUsers(AspnetUsers aspnetUsers)
        {
            int __rowsAffected = 1;
            
            // Create command
            using (SqlCommand sqlCommand = new SqlCommand("AspnetUsersGetByAspnetUsersIndex"))
            {
                // Set command type
                sqlCommand.CommandType = CommandType.StoredProcedure; 

                try
                {
                    // Attach command
                    AttachCommand(sqlCommand);

                    // Add command parameters
                    SqlParameter vApplicationId = new SqlParameter("@ApplicationId", SqlDbType.UniqueIdentifier);
                    vApplicationId.Direction = ParameterDirection.InputOutput; 
                    sqlCommand.Parameters.Add(vApplicationId);
                    SqlParameter vUserId = new SqlParameter("@UserId", SqlDbType.UniqueIdentifier);
                    vUserId.Direction = ParameterDirection.Output; 
                    sqlCommand.Parameters.Add(vUserId);
                    SqlParameter vUserName = new SqlParameter("@UserName", SqlDbType.NVarChar, 256);
                    vUserName.Direction = ParameterDirection.Output; 
                    sqlCommand.Parameters.Add(vUserName);
                    SqlParameter vLoweredUserName = new SqlParameter("@LoweredUserName", SqlDbType.NVarChar, 256);
                    vLoweredUserName.Direction = ParameterDirection.InputOutput; 
                    sqlCommand.Parameters.Add(vLoweredUserName);
                    SqlParameter vMobileAlias = new SqlParameter("@MobileAlias", SqlDbType.NVarChar, 16);
                    vMobileAlias.Direction = ParameterDirection.Output; 
                    sqlCommand.Parameters.Add(vMobileAlias);
                    SqlParameter vIsAnonymous = new SqlParameter("@IsAnonymous", SqlDbType.Bit);
                    vIsAnonymous.Direction = ParameterDirection.Output; 
                    sqlCommand.Parameters.Add(vIsAnonymous);
                    SqlParameter vLastActivityDate = new SqlParameter("@LastActivityDate", SqlDbType.DateTime);
                    vLastActivityDate.Direction = ParameterDirection.Output; 
                    sqlCommand.Parameters.Add(vLastActivityDate);

                    // Set input parameter values
                    SqlServerHelper.SetParameterValue(vApplicationId, aspnetUsers.ApplicationId);
                    SqlServerHelper.SetParameterValue(vLoweredUserName, aspnetUsers.LoweredUserName);

                    // Execute command
                    sqlCommand.ExecuteNonQuery();

                    try
                    {
                        // Get output parameter values
                        aspnetUsers.ApplicationId = SqlServerHelper.ToGuid(vApplicationId); 
                        aspnetUsers.UserId = SqlServerHelper.ToGuid(vUserId); 
                        aspnetUsers.UserName = SqlServerHelper.ToString(vUserName); 
                        aspnetUsers.LoweredUserName = SqlServerHelper.ToString(vLoweredUserName); 
                        aspnetUsers.MobileAlias = SqlServerHelper.ToString(vMobileAlias); 
                        aspnetUsers.IsAnonymous = SqlServerHelper.ToBoolean(vIsAnonymous); 
                        aspnetUsers.LastActivityDate = SqlServerHelper.ToDateTime(vLastActivityDate); 

                    }
                    catch(Exception ex)
                    {
                        if(ex is System.NullReferenceException)
                        {
                            __rowsAffected = 0; 
                        }
                        else
                        {
                            throw ex; 
                        }
                    }
                }
                finally
                {
                    // Detach command
                    DetachCommand(sqlCommand);
                }

            }
            
            return __rowsAffected; 
        }

        public IReader<AspnetUsers> ListForaspnet_Users_Index2(Guid applicationId, DateTime lastActivityDate)
        {
            // Create command
            using (SqlCommand sqlCommand = new SqlCommand("AspnetUsersListByAspnetUsersIndex2"))
            {
                // Set command type
                sqlCommand.CommandType = CommandType.StoredProcedure; 

                // Add command parameters
                SqlParameter vApplicationId = new SqlParameter("@ApplicationId", SqlDbType.UniqueIdentifier);
                vApplicationId.Direction = ParameterDirection.Input; 
                sqlCommand.Parameters.Add(vApplicationId);
                SqlParameter vLastActivityDate = new SqlParameter("@LastActivityDate", SqlDbType.DateTime);
                vLastActivityDate.Direction = ParameterDirection.Input; 
                sqlCommand.Parameters.Add(vLastActivityDate);
                
                // Set input parameter values
                SqlServerHelper.SetParameterValue(vApplicationId, applicationId);
                SqlServerHelper.SetParameterValue(vLastActivityDate, lastActivityDate);

                // Execute command
                SqlDataReader reader = sqlCommand.ExecuteReader(AttachReaderCommand(sqlCommand));

                // Return reader
                return new SqlServerAspnetUsersReader(reader); 
            }
        }

    }

    public partial class SqlServerAspnetUsersReader : IReader<AspnetUsers>
    {
        private SqlDataReader sqlDataReader;

        private AspnetUsers _AspnetUsers;

        private int _ApplicationIdOrdinal = -1;
        private int _UserIdOrdinal = -1;
        private int _UserNameOrdinal = -1;
        private int _LoweredUserNameOrdinal = -1;
        private int _MobileAliasOrdinal = -1;
        private int _IsAnonymousOrdinal = -1;
        private int _LastActivityDateOrdinal = -1;

        public SqlServerAspnetUsersReader(SqlDataReader sqlDataReader)
        {
            this.sqlDataReader = sqlDataReader; 
            for (int  i = 0; i < sqlDataReader.FieldCount; i++)
            {
                string columnName = sqlDataReader.GetName(i);
                columnName = columnName.ToUpper(); 
                switch (columnName)
                {
                    case "APPLICATIONID":
                        _ApplicationIdOrdinal = i; 
                        break;
                    
                    case "USERID":
                        _UserIdOrdinal = i; 
                        break;
                    
                    case "USERNAME":
                        _UserNameOrdinal = i; 
                        break;
                    
                    case "LOWEREDUSERNAME":
                        _LoweredUserNameOrdinal = i; 
                        break;
                    
                    case "MOBILEALIAS":
                        _MobileAliasOrdinal = i; 
                        break;
                    
                    case "ISANONYMOUS":
                        _IsAnonymousOrdinal = i; 
                        break;
                    
                    case "LASTACTIVITYDATE":
                        _LastActivityDateOrdinal = i; 
                        break;
                    
                }
            }
        }

        #region IReader<AspnetUsers> Implementation
        
        public bool Read()
        {
            _AspnetUsers = null; 
            return this.sqlDataReader.Read(); 
        }

        public AspnetUsers Current
        {
            get
            {
                if(_AspnetUsers == null)
                {
                    _AspnetUsers = new AspnetUsers();
                    if(_ApplicationIdOrdinal != -1)
                    {
                        _AspnetUsers.ApplicationId = SqlServerHelper.ToGuid(sqlDataReader, _ApplicationIdOrdinal); 
                    }
                    if(_UserIdOrdinal != -1)
                    {
                        _AspnetUsers.UserId = SqlServerHelper.ToGuid(sqlDataReader, _UserIdOrdinal); 
                    }
                    _AspnetUsers.UserName = SqlServerHelper.ToString(sqlDataReader, _UserNameOrdinal); 
                    _AspnetUsers.LoweredUserName = SqlServerHelper.ToString(sqlDataReader, _LoweredUserNameOrdinal); 
                    _AspnetUsers.MobileAlias = SqlServerHelper.ToString(sqlDataReader, _MobileAliasOrdinal); 
                    if(_IsAnonymousOrdinal != -1)
                    {
                        _AspnetUsers.IsAnonymous = SqlServerHelper.ToBoolean(sqlDataReader, _IsAnonymousOrdinal); 
                    }
                    if(_LastActivityDateOrdinal != -1)
                    {
                        _AspnetUsers.LastActivityDate = SqlServerHelper.ToDateTime(sqlDataReader, _LastActivityDateOrdinal); 
                    }
                }
                

                return _AspnetUsers; 
            }
        }

        public void Close()
        {
            sqlDataReader.Close();
        }

        public List<AspnetUsers> ToList()
        {
            List<AspnetUsers> list = new List<AspnetUsers>();
            while(this.Read())
            {
                list.Add(this.Current);
            }
            this.Close();
            return list; 
        }

        public DataTable ToDataTable()
        {
            DataTable dataTable = new DataTable();
            dataTable.Load(sqlDataReader);
            return dataTable; 
        }

        #endregion
        
        #region IDisposable Implementation
        
        public void Dispose()
        {
            sqlDataReader.Dispose();
        }
        #endregion
        
        #region IEnumerable<AspnetUsers> Implementation
        
        public IEnumerator<AspnetUsers> GetEnumerator()
        {
            return new AspnetUsersEnumerator(this); 
        }

        #endregion
        
        #region IEnumerable Implementation
        
        IEnumerator IEnumerable.GetEnumerator()
        {
            return new AspnetUsersEnumerator(this); 
        }

        #endregion
        
        
        private partial class AspnetUsersEnumerator : IEnumerator<AspnetUsers>
        {
            private IReader<AspnetUsers> aspnetUsersReader;

            public AspnetUsersEnumerator(IReader<AspnetUsers> aspnetUsersReader)
            {
                this.aspnetUsersReader = aspnetUsersReader; 
            }

            #region IEnumerator<AspnetUsers> Members
            
            public AspnetUsers Current
            {
                get { return this.aspnetUsersReader.Current; }
            }

            #endregion
            
            #region IDisposable Members
            
            public void Dispose()
            {
                this.aspnetUsersReader.Dispose();
            }

            #endregion
            
            #region IEnumerator Members
            
            object IEnumerator.Current
            {
                get { return this.aspnetUsersReader.Current; }
            }

            public bool MoveNext()
            {
                return this.aspnetUsersReader.Read(); 
            }

            public void Reset()
            {
                throw new Exception("Reset of aspnetusers reader is not supported."); 
            }

            #endregion
            
        }
    }
}
