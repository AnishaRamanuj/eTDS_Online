// This code was generated by an EVALUATION copy of Schematrix SchemaCoder.
// Redistribution of this source code, or an application developed from it, is forbidden.
// Modification of this source code to remove this comment is also forbidden.
// Please visit http://www.schematrix.com/ to obtain a license to use this software.

using System;
using System.Collections;
using System.Collections.Generic;
using System.Data;
using System.Data.SqlClient;
using System.Data.SqlTypes;
using System.IO;

namespace PayrollProject
{
    public partial class Subpage
    {
        private static ISubpagePersister _DefaultPersister;
        private ISubpagePersister _Persister;
        private int _SubPageID;
        private int _MasterPageID;
        private string _PageTitle;
        private string _PageName;
        private DateTime _ModifiedDate;
        private int? _Status;
        private int? _Module_ID; 

        static Subpage()
        {
            // Assign default persister
            _DefaultPersister = new SqlServerSubpagePersister();
        }

        public Subpage()
        {
            // Assign default persister to instance persister
            _Persister = _DefaultPersister; 
        }

        public Subpage(int _SubPageID)
        {
            // Assign default persister to instance persister
            _Persister = _DefaultPersister; 

            // Assign method parameter to private fields
            this._SubPageID = _SubPageID; 

            // Call associated retrieve method
            Retrieve();
        }

        public Subpage(DataRow row)
        {
            // Assign default persister to instance persister
            _Persister = _DefaultPersister; 

            // Assign column values to private members
            for (int  i = 0; i < row.Table.Columns.Count; i++)
            {
                switch (row.Table.Columns[i].ColumnName.ToUpper())
                {
                    case "SUBPAGEID":
                        this.SubPageID = Convert.ToInt32(row[i, DataRowVersion.Current]); 
                        break;
                    
                    case "MASTERPAGEID":
                        this.MasterPageID = Convert.ToInt32(row[i, DataRowVersion.Current]); 
                        break;
                    
                    case "PAGETITLE":
                        this.PageTitle = (string)row[i, DataRowVersion.Current]; 
                        break;
                    
                    case "PAGENAME":
                        this.PageName = (string)row[i, DataRowVersion.Current]; 
                        break;
                    
                    case "MODIFIEDDATE":
                        this.ModifiedDate = Convert.ToDateTime(row[i, DataRowVersion.Current]); 
                        break;
                    
                    case "STATUS":
                        if(row.IsNull(i) == false)
                        {
                            this.Status = Convert.ToInt32(row[i, DataRowVersion.Current]); 
                        }
                        break;

                     case "MODULE_ID":
                        if(row.IsNull(i) == false)
                        {
                            this.Module_ID  = Convert.ToInt32(row[i, DataRowVersion.Current]); 
                        }
                        break;
                }
            }
        }

        public static ISubpagePersister DefaultPersister
        {
            get { return _DefaultPersister; }
            set { _DefaultPersister = value; }
        }

        public ISubpagePersister Persister
        {
            get { return _Persister; }
            set { _Persister = value; }
        }

        public int SubPageID
        {
            get { return _SubPageID; }
            set { _SubPageID = value; }
        }

        public int MasterPageID
        {
            get { return _MasterPageID; }
            set { _MasterPageID = value; }
        }

        public string PageTitle
        {
            get { return _PageTitle; }
            set { _PageTitle = value; }
        }

        public string PageName
        {
            get { return _PageName; }
            set { _PageName = value; }
        }

        public DateTime ModifiedDate
        {
            get { return _ModifiedDate; }
            set { _ModifiedDate = value; }
        }

        public int? Status
        {
            get { return _Status; }
            set { _Status = value; }
        }

        public int? Module_ID
        {
            get { return _Module_ID; }
            set { _Module_ID = value; }
        }
        public virtual void Clone(Subpage sourceObject)
        {
            // Clone attributes from source object
            this._SubPageID = sourceObject.SubPageID; 
            this._MasterPageID = sourceObject.MasterPageID; 
            this._PageTitle = sourceObject.PageTitle; 
            this._PageName = sourceObject.PageName; 
            this._ModifiedDate = sourceObject.ModifiedDate; 
            this._Status = sourceObject.Status; 
            this._Module_ID = sourceObject.Module_ID; 
        }

        public virtual int Retrieve()
        {
            return _Persister.Retrieve(this); 
        }

        public virtual int Update()
        {
            return _Persister.Update(this); 
        }

        public virtual int Delete()
        {
            return _Persister.Delete(this); 
        }

        public virtual int Insert()
        {
            return _Persister.Insert(this); 
        }

        public static IReader<Subpage> ListAll()
        {
            return _DefaultPersister.ListAll(); 
        }

    }
    
    public partial interface ISubpagePersister
    {
        int Retrieve(Subpage subpage);
        int Update(Subpage subpage);
        int Delete(Subpage subpage);
        int Insert(Subpage subpage);
        IReader<Subpage> ListAll();
    }
    
    public partial class SqlServerSubpagePersister : SqlPersisterBase, ISubpagePersister
    {
        public SqlServerSubpagePersister()
        {
        }

        public SqlServerSubpagePersister(string connectionString) : base(connectionString)
        {
        }

        public SqlServerSubpagePersister(SqlConnection connection) : base(connection)
        {
        }

        public SqlServerSubpagePersister(SqlTransaction transaction) : base(transaction)
        {
        }

        public int Retrieve(Subpage subpage)
        {
            int __rowsAffected = 1;
            
            // Create command
            using (SqlCommand sqlCommand = new SqlCommand("SubpageGet"))
            {
                // Set command type
                sqlCommand.CommandType = CommandType.StoredProcedure; 

                try
                {
                    // Attach command
                    AttachCommand(sqlCommand);

                    // Add command parameters
                    SqlParameter vSubPageID = new SqlParameter("@SubPageID", SqlDbType.Int);
                    vSubPageID.Direction = ParameterDirection.InputOutput; 
                    sqlCommand.Parameters.Add(vSubPageID);
                    SqlParameter vMasterPageID = new SqlParameter("@MasterPageID", SqlDbType.Int);
                    vMasterPageID.Direction = ParameterDirection.Output; 
                    sqlCommand.Parameters.Add(vMasterPageID);
                    SqlParameter vPageTitle = new SqlParameter("@PageTitle", SqlDbType.VarChar, 50);
                    vPageTitle.Direction = ParameterDirection.Output; 
                    sqlCommand.Parameters.Add(vPageTitle);
                    SqlParameter vPageName = new SqlParameter("@PageName", SqlDbType.VarChar, 50);
                    vPageName.Direction = ParameterDirection.Output; 
                    sqlCommand.Parameters.Add(vPageName);
                    SqlParameter vModifiedDate = new SqlParameter("@ModifiedDate", SqlDbType.DateTime);
                    vModifiedDate.Direction = ParameterDirection.Output; 
                    sqlCommand.Parameters.Add(vModifiedDate);
                    SqlParameter vStatus = new SqlParameter("@Status", SqlDbType.Int);
                    vStatus.Direction = ParameterDirection.Output; 
                    sqlCommand.Parameters.Add(vStatus);

                    SqlParameter vModule_ID = new SqlParameter("@Module_ID", SqlDbType.Int);
                    vModule_ID.Direction = ParameterDirection.Output; 
                    sqlCommand.Parameters.Add(vModule_ID);
                    // Set input parameter values
                    SqlServerHelper.SetParameterValue(vSubPageID, subpage.SubPageID);

                    // Execute command
                    sqlCommand.ExecuteNonQuery();

                    try
                    {
                        // Get output parameter values
                        subpage.SubPageID = SqlServerHelper.ToInt32(vSubPageID); 
                        subpage.MasterPageID = SqlServerHelper.ToInt32(vMasterPageID); 
                        subpage.PageTitle = SqlServerHelper.ToString(vPageTitle); 
                        subpage.PageName = SqlServerHelper.ToString(vPageName); 
                        subpage.ModifiedDate = SqlServerHelper.ToDateTime(vModifiedDate); 
                        subpage.Status = SqlServerHelper.ToNullableInt32(vStatus); 
                        subpage.Module_ID  = SqlServerHelper.ToNullableInt32(vModule_ID); 
                    }
                    catch(Exception ex)
                    {
                        if(ex is System.NullReferenceException)
                        {
                            __rowsAffected = 0; 
                        }
                        else
                        {
                            throw ex; 
                        }
                    }
                }
                finally
                {
                    // Detach command
                    DetachCommand(sqlCommand);
                }

            }
            
            return __rowsAffected; 
        }

        public int Update(Subpage subpage)
        {
            int __rowsAffected = 0;
            
            // Create command
            using (SqlCommand sqlCommand = new SqlCommand("SubpageUpdate"))
            {
                // Set command type
                sqlCommand.CommandType = CommandType.StoredProcedure; 

                // Add command parameters
                SqlParameter vSubPageID = new SqlParameter("@SubPageID", SqlDbType.Int);
                vSubPageID.Direction = ParameterDirection.Input; 
                sqlCommand.Parameters.Add(vSubPageID);
                SqlParameter vMasterPageID = new SqlParameter("@MasterPageID", SqlDbType.Int);
                vMasterPageID.Direction = ParameterDirection.Input; 
                sqlCommand.Parameters.Add(vMasterPageID);
                SqlParameter vPageTitle = new SqlParameter("@PageTitle", SqlDbType.VarChar, 50);
                vPageTitle.Direction = ParameterDirection.Input; 
                sqlCommand.Parameters.Add(vPageTitle);
                SqlParameter vPageName = new SqlParameter("@PageName", SqlDbType.VarChar, 50);
                vPageName.Direction = ParameterDirection.Input; 
                sqlCommand.Parameters.Add(vPageName);
                SqlParameter vModifiedDate = new SqlParameter("@ModifiedDate", SqlDbType.DateTime);
                vModifiedDate.Direction = ParameterDirection.Input; 
                sqlCommand.Parameters.Add(vModifiedDate);
                SqlParameter vStatus = new SqlParameter("@Status", SqlDbType.Int);
                vStatus.Direction = ParameterDirection.Input; 
                sqlCommand.Parameters.Add(vStatus);
                SqlParameter vModule_ID = new SqlParameter("@Module_ID", SqlDbType.Int);
                vModule_ID.Direction = ParameterDirection.Input; 
                sqlCommand.Parameters.Add(vModule_ID);

                // Set input parameter values
                SqlServerHelper.SetParameterValue(vSubPageID, subpage.SubPageID);
                SqlServerHelper.SetParameterValue(vMasterPageID, subpage.MasterPageID);
                SqlServerHelper.SetParameterValue(vPageTitle, subpage.PageTitle);
                SqlServerHelper.SetParameterValue(vPageName, subpage.PageName);
                SqlServerHelper.SetParameterValue(vModifiedDate, subpage.ModifiedDate);
                SqlServerHelper.SetParameterValue(vStatus, subpage.Status);
                SqlServerHelper.SetParameterValue(vModule_ID, subpage.Module_ID );
                try
                {
                    // Attach command
                    AttachCommand(sqlCommand);

                    // Execute command
                    __rowsAffected = sqlCommand.ExecuteNonQuery(); 
                    if(__rowsAffected == 0)
                    {
                        return __rowsAffected; 
                    }
                    

                }
                finally
                {
                    // Detach command
                    DetachCommand(sqlCommand);
                }

            }
            
            return __rowsAffected; 
        }

        public int Delete(Subpage subpage)
        {
            int __rowsAffected = 0;
            
            // Create command
            using (SqlCommand sqlCommand = new SqlCommand("SubpageDelete"))
            {
                // Set command type
                sqlCommand.CommandType = CommandType.StoredProcedure; 

                try
                {
                    // Attach command
                    AttachCommand(sqlCommand);

                    // Add command parameters
                    SqlParameter vSubPageID = new SqlParameter("@SubPageID", SqlDbType.Int);
                    vSubPageID.Direction = ParameterDirection.Input; 
                    sqlCommand.Parameters.Add(vSubPageID);

                    // Set input parameter values
                    SqlServerHelper.SetParameterValue(vSubPageID, subpage.SubPageID);

                    // Execute command
                    __rowsAffected = sqlCommand.ExecuteNonQuery(); 

                }
                finally
                {
                    // Detach command
                    DetachCommand(sqlCommand);
                }

            }
            
            return __rowsAffected; 
        }

        public int Insert(Subpage subpage)
        {
            int __rowsAffected = 0;
            
            // Create command
            using (SqlCommand sqlCommand = new SqlCommand("SubpageInsert"))
            {
                // Set command type
                sqlCommand.CommandType = CommandType.StoredProcedure; 

                // Add command parameters
                SqlParameter vSubPageID = new SqlParameter("@SubPageID", SqlDbType.Int);
                vSubPageID.Direction = ParameterDirection.InputOutput; 
                sqlCommand.Parameters.Add(vSubPageID);
                SqlParameter vMasterPageID = new SqlParameter("@MasterPageID", SqlDbType.Int);
                vMasterPageID.Direction = ParameterDirection.Input; 
                sqlCommand.Parameters.Add(vMasterPageID);
                SqlParameter vPageTitle = new SqlParameter("@PageTitle", SqlDbType.VarChar, 50);
                vPageTitle.Direction = ParameterDirection.Input; 
                sqlCommand.Parameters.Add(vPageTitle);
                SqlParameter vPageName = new SqlParameter("@PageName", SqlDbType.VarChar, 50);
                vPageName.Direction = ParameterDirection.Input; 
                sqlCommand.Parameters.Add(vPageName);
                SqlParameter vModifiedDate = new SqlParameter("@ModifiedDate", SqlDbType.DateTime);
                vModifiedDate.Direction = ParameterDirection.Input; 
                sqlCommand.Parameters.Add(vModifiedDate);
                SqlParameter vStatus = new SqlParameter("@Status", SqlDbType.Int);
                vStatus.Direction = ParameterDirection.Input; 
                sqlCommand.Parameters.Add(vStatus);

                SqlParameter vModule_ID = new SqlParameter("@Module_ID", SqlDbType.Int);
                vModule_ID.Direction = ParameterDirection.Input; 
                sqlCommand.Parameters.Add(vModule_ID);
                // Set input parameter values
                SqlServerHelper.SetParameterValue(
                    vSubPageID, 
                    subpage.SubPageID, 
                    0);
                SqlServerHelper.SetParameterValue(vMasterPageID, subpage.MasterPageID);
                SqlServerHelper.SetParameterValue(vPageTitle, subpage.PageTitle);
                SqlServerHelper.SetParameterValue(vPageName, subpage.PageName);
                SqlServerHelper.SetParameterValue(vModifiedDate, subpage.ModifiedDate);
                SqlServerHelper.SetParameterValue(vStatus, subpage.Status);
                SqlServerHelper.SetParameterValue(vModule_ID, subpage.Module_ID);

                try
                {
                    // Attach command
                    AttachCommand(sqlCommand);

                    // Execute command
                    __rowsAffected = sqlCommand.ExecuteNonQuery(); 
                    if(__rowsAffected == 0)
                    {
                        return __rowsAffected; 
                    }
                    

                    // Get output parameter values
                    subpage.SubPageID = SqlServerHelper.ToInt32(vSubPageID); 

                }
                finally
                {
                    // Detach command
                    DetachCommand(sqlCommand);
                }

            }
            
            return __rowsAffected; 
        }

        public IReader<Subpage> ListAll()
        {
            // Create command
            using (SqlCommand sqlCommand = new SqlCommand("SubpageListAll"))
            {
                // Set command type
                sqlCommand.CommandType = CommandType.StoredProcedure; 

                // Execute command
                SqlDataReader reader = sqlCommand.ExecuteReader(AttachReaderCommand(sqlCommand));

                // Return reader
                return new SqlServerSubpageReader(reader); 
            }
        }

    }

    public partial class SqlServerSubpageReader : IReader<Subpage>
    {
        private SqlDataReader sqlDataReader;

        private Subpage _Subpage;

        private int _SubPageIDOrdinal = -1;
        private int _MasterPageIDOrdinal = -1;
        private int _PageTitleOrdinal = -1;
        private int _PageNameOrdinal = -1;
        private int _ModifiedDateOrdinal = -1;
        private int _StatusOrdinal = -1;
        private int _Module_IDOrdinal = -1;

        public SqlServerSubpageReader(SqlDataReader sqlDataReader)
        {
            this.sqlDataReader = sqlDataReader; 
            for (int  i = 0; i < sqlDataReader.FieldCount; i++)
            {
                string columnName = sqlDataReader.GetName(i);
                columnName = columnName.ToUpper(); 
                switch (columnName)
                {
                    case "SUBPAGEID":
                        _SubPageIDOrdinal = i; 
                        break;
                    
                    case "MASTERPAGEID":
                        _MasterPageIDOrdinal = i; 
                        break;
                    
                    case "PAGETITLE":
                        _PageTitleOrdinal = i; 
                        break;
                    
                    case "PAGENAME":
                        _PageNameOrdinal = i; 
                        break;
                    
                    case "MODIFIEDDATE":
                        _ModifiedDateOrdinal = i; 
                        break;
                    
                    case "STATUS":
                        _StatusOrdinal = i; 
                        break;

                    case "MODULE_ID":
                        _Module_IDOrdinal = i; 
                        break;                    
                }
            }
        }

        #region IReader<Subpage> Implementation
        
        public bool Read()
        {
            _Subpage = null; 
            return this.sqlDataReader.Read(); 
        }

        public Subpage Current
        {
            get
            {
                if(_Subpage == null)
                {
                    _Subpage = new Subpage();
                    if(_SubPageIDOrdinal != -1)
                    {
                        _Subpage.SubPageID = SqlServerHelper.ToInt32(sqlDataReader, _SubPageIDOrdinal); 
                    }
                    if(_MasterPageIDOrdinal != -1)
                    {
                        _Subpage.MasterPageID = SqlServerHelper.ToInt32(sqlDataReader, _MasterPageIDOrdinal); 
                    }
                    _Subpage.PageTitle = SqlServerHelper.ToString(sqlDataReader, _PageTitleOrdinal); 
                    _Subpage.PageName = SqlServerHelper.ToString(sqlDataReader, _PageNameOrdinal); 
                    if(_ModifiedDateOrdinal != -1)
                    {
                        _Subpage.ModifiedDate = SqlServerHelper.ToDateTime(sqlDataReader, _ModifiedDateOrdinal); 
                    }
                    _Subpage.Status = SqlServerHelper.ToNullableInt32(sqlDataReader, _StatusOrdinal); 
                    _Subpage.Module_ID  = SqlServerHelper.ToNullableInt32(sqlDataReader, _Module_IDOrdinal ); 
                }
                

                return _Subpage; 
            }
        }

        public void Close()
        {
            sqlDataReader.Close();
        }

        public List<Subpage> ToList()
        {
            List<Subpage> list = new List<Subpage>();
            while(this.Read())
            {
                list.Add(this.Current);
            }
            this.Close();
            return list; 
        }

        public DataTable ToDataTable()
        {
            DataTable dataTable = new DataTable();
            dataTable.Load(sqlDataReader);
            return dataTable; 
        }

        #endregion
        
        #region IDisposable Implementation
        
        public void Dispose()
        {
            sqlDataReader.Dispose();
        }
        #endregion
        
        #region IEnumerable<Subpage> Implementation
        
        public IEnumerator<Subpage> GetEnumerator()
        {
            return new SubpageEnumerator(this); 
        }

        #endregion
        
        #region IEnumerable Implementation
        
        IEnumerator IEnumerable.GetEnumerator()
        {
            return new SubpageEnumerator(this); 
        }

        #endregion
        
        
        private partial class SubpageEnumerator : IEnumerator<Subpage>
        {
            private IReader<Subpage> subpageReader;

            public SubpageEnumerator(IReader<Subpage> subpageReader)
            {
                this.subpageReader = subpageReader; 
            }

            #region IEnumerator<Subpage> Members
            
            public Subpage Current
            {
                get { return this.subpageReader.Current; }
            }

            #endregion
            
            #region IDisposable Members
            
            public void Dispose()
            {
                this.subpageReader.Dispose();
            }

            #endregion
            
            #region IEnumerator Members
            
            object IEnumerator.Current
            {
                get { return this.subpageReader.Current; }
            }

            public bool MoveNext()
            {
                return this.subpageReader.Read(); 
            }

            public void Reset()
            {
                throw new Exception("Reset of subpage reader is not supported."); 
            }

            #endregion
            
        }
    }
}
