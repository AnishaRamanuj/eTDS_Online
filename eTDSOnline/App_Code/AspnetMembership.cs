// This code was generated by an EVALUATION copy of Schematrix SchemaCoder.
// Redistribution of this source code, or an application developed from it, is forbidden.
// Modification of this source code to remove this comment is also forbidden.
// Please visit http://www.schematrix.com/ to obtain a license to use this software.


using System;
using System.Collections;
using System.Collections.Generic;
using System.Data;
using System.Data.SqlClient;
using System.Data.SqlTypes;
using System.IO;

namespace PayrollProject
{
    public partial class AspnetMembership
    {
        private static IAspnetMembershipPersister _DefaultPersister;
        private IAspnetMembershipPersister _Persister;
        private Guid _ApplicationId;
        private Guid _UserId;
        private string _Password;
        private int _PasswordFormat;
        private string _PasswordSalt;
        private string _MobilePIN;
        private string _Email;
        private string _LoweredEmail;
        private string _PasswordQuestion;
        private string _PasswordAnswer;
        private bool _IsApproved;
        private bool _IsLockedOut;
        private DateTime _CreateDate;
        private DateTime _LastLoginDate;
        private DateTime _LastPasswordChangedDate;
        private DateTime _LastLockoutDate;
        private int _FailedPasswordAttemptCount;
        private DateTime _FailedPasswordAttemptWindowStart;
        private int _FailedPasswordAnswerAttemptCount;
        private DateTime _FailedPasswordAnswerAttemptWindowStart;
        private string _Comment;
        private Stream _CommentStream;

        static AspnetMembership()
        {
            // Assign default persister
            _DefaultPersister = new SqlServerAspnetMembershipPersister();
        }

        public AspnetMembership()
        {
            // Assign default persister to instance persister
            _Persister = _DefaultPersister; 
        }

        public AspnetMembership(Guid _UserId)
        {
            // Assign default persister to instance persister
            _Persister = _DefaultPersister; 

            // Assign method parameter to private fields
            this._UserId = _UserId; 

            // Call associated retrieve method
            Retrieve();
        }

        public AspnetMembership(DataRow row)
        {
            // Assign default persister to instance persister
            _Persister = _DefaultPersister; 

            // Assign column values to private members
            for (int  i = 0; i < row.Table.Columns.Count; i++)
            {
                switch (row.Table.Columns[i].ColumnName.ToUpper())
                {
                    case "APPLICATIONID":
                        if(row[i, DataRowVersion.Current] is Guid)
                        {
                            this.ApplicationId = (Guid)row[i, DataRowVersion.Current]; 
                        }
                        else
                        {
                            this.ApplicationId = new Guid((Byte[])row[i, DataRowVersion.Current]); 
                        }
                        break;
                    
                    case "USERID":
                        if(row[i, DataRowVersion.Current] is Guid)
                        {
                            this.UserId = (Guid)row[i, DataRowVersion.Current]; 
                        }
                        else
                        {
                            this.UserId = new Guid((Byte[])row[i, DataRowVersion.Current]); 
                        }
                        break;
                    
                    case "PASSWORD":
                        this.Password = (string)row[i, DataRowVersion.Current]; 
                        break;
                    
                    case "PASSWORDFORMAT":
                        this.PasswordFormat = Convert.ToInt32(row[i, DataRowVersion.Current]); 
                        break;
                    
                    case "PASSWORDSALT":
                        this.PasswordSalt = (string)row[i, DataRowVersion.Current]; 
                        break;
                    
                    case "MOBILEPIN":
                        if(row.IsNull(i) == false)
                        {
                            this.MobilePIN = (string)row[i, DataRowVersion.Current]; 
                        }
                        break;
                    
                    case "EMAIL":
                        if(row.IsNull(i) == false)
                        {
                            this.Email = (string)row[i, DataRowVersion.Current]; 
                        }
                        break;
                    
                    case "LOWEREDEMAIL":
                        if(row.IsNull(i) == false)
                        {
                            this.LoweredEmail = (string)row[i, DataRowVersion.Current]; 
                        }
                        break;
                    
                    case "PASSWORDQUESTION":
                        if(row.IsNull(i) == false)
                        {
                            this.PasswordQuestion = (string)row[i, DataRowVersion.Current]; 
                        }
                        break;
                    
                    case "PASSWORDANSWER":
                        if(row.IsNull(i) == false)
                        {
                            this.PasswordAnswer = (string)row[i, DataRowVersion.Current]; 
                        }
                        break;
                    
                    case "ISAPPROVED":
                        this.IsApproved = Convert.ToBoolean(row[i, DataRowVersion.Current]); 
                        break;
                    
                    case "ISLOCKEDOUT":
                        this.IsLockedOut = Convert.ToBoolean(row[i, DataRowVersion.Current]); 
                        break;
                    
                    case "CREATEDATE":
                        this.CreateDate = Convert.ToDateTime(row[i, DataRowVersion.Current]); 
                        break;
                    
                    case "LASTLOGINDATE":
                        this.LastLoginDate = Convert.ToDateTime(row[i, DataRowVersion.Current]); 
                        break;
                    
                    case "LASTPASSWORDCHANGEDDATE":
                        this.LastPasswordChangedDate = Convert.ToDateTime(row[i, DataRowVersion.Current]); 
                        break;
                    
                    case "LASTLOCKOUTDATE":
                        this.LastLockoutDate = Convert.ToDateTime(row[i, DataRowVersion.Current]); 
                        break;
                    
                    case "FAILEDPASSWORDATTEMPTCOUNT":
                        this.FailedPasswordAttemptCount = Convert.ToInt32(row[i, DataRowVersion.Current]); 
                        break;
                    
                    case "FAILEDPASSWORDATTEMPTWINDOWSTART":
                        this.FailedPasswordAttemptWindowStart = Convert.ToDateTime(row[i, DataRowVersion.Current]); 
                        break;
                    
                    case "FAILEDPASSWORDANSWERATTEMPTCOUNT":
                        this.FailedPasswordAnswerAttemptCount = Convert.ToInt32(row[i, DataRowVersion.Current]); 
                        break;
                    
                    case "FAILEDPASSWORDANSWERATTEMPTWINDOWSTART":
                        this.FailedPasswordAnswerAttemptWindowStart = Convert.ToDateTime(row[i, DataRowVersion.Current]); 
                        break;
                    
                    case "COMMENT":
                        if(row.IsNull(i) == false)
                        {
                            this.Comment = (string)row[i, DataRowVersion.Current]; 
                        }
                        break;
                    
                }
            }
        }

        public static IAspnetMembershipPersister DefaultPersister
        {
            get { return _DefaultPersister; }
            set { _DefaultPersister = value; }
        }

        public IAspnetMembershipPersister Persister
        {
            get { return _Persister; }
            set { _Persister = value; }
        }

        public Guid ApplicationId
        {
            get { return _ApplicationId; }
            set { _ApplicationId = value; }
        }

        public Guid UserId
        {
            get { return _UserId; }
            set { _UserId = value; }
        }

        public string Password
        {
            get { return _Password; }
            set { _Password = value; }
        }

        public int PasswordFormat
        {
            get { return _PasswordFormat; }
            set { _PasswordFormat = value; }
        }

        public string PasswordSalt
        {
            get { return _PasswordSalt; }
            set { _PasswordSalt = value; }
        }

        public string MobilePIN
        {
            get { return _MobilePIN; }
            set { _MobilePIN = value; }
        }

        public string Email
        {
            get { return _Email; }
            set { _Email = value; }
        }

        public string LoweredEmail
        {
            get { return _LoweredEmail; }
            set { _LoweredEmail = value; }
        }

        public string PasswordQuestion
        {
            get { return _PasswordQuestion; }
            set { _PasswordQuestion = value; }
        }

        public string PasswordAnswer
        {
            get { return _PasswordAnswer; }
            set { _PasswordAnswer = value; }
        }

        public bool IsApproved
        {
            get { return _IsApproved; }
            set { _IsApproved = value; }
        }

        public bool IsLockedOut
        {
            get { return _IsLockedOut; }
            set { _IsLockedOut = value; }
        }

        public DateTime CreateDate
        {
            get { return _CreateDate; }
            set { _CreateDate = value; }
        }

        public DateTime LastLoginDate
        {
            get { return _LastLoginDate; }
            set { _LastLoginDate = value; }
        }

        public DateTime LastPasswordChangedDate
        {
            get { return _LastPasswordChangedDate; }
            set { _LastPasswordChangedDate = value; }
        }

        public DateTime LastLockoutDate
        {
            get { return _LastLockoutDate; }
            set { _LastLockoutDate = value; }
        }

        public int FailedPasswordAttemptCount
        {
            get { return _FailedPasswordAttemptCount; }
            set { _FailedPasswordAttemptCount = value; }
        }

        public DateTime FailedPasswordAttemptWindowStart
        {
            get { return _FailedPasswordAttemptWindowStart; }
            set { _FailedPasswordAttemptWindowStart = value; }
        }

        public int FailedPasswordAnswerAttemptCount
        {
            get { return _FailedPasswordAnswerAttemptCount; }
            set { _FailedPasswordAnswerAttemptCount = value; }
        }

        public DateTime FailedPasswordAnswerAttemptWindowStart
        {
            get { return _FailedPasswordAnswerAttemptWindowStart; }
            set { _FailedPasswordAnswerAttemptWindowStart = value; }
        }

        public string Comment
        {
            get { return _Comment; }
            set { _Comment = value; }
        }

        public Stream CommentStream
        {
            get { return _CommentStream; }
            set { _CommentStream = value; }
        }

        public virtual void Clone(AspnetMembership sourceObject)
        {
            // Clone attributes from source object
            this._ApplicationId = sourceObject.ApplicationId; 
            this._UserId = sourceObject.UserId; 
            this._Password = sourceObject.Password; 
            this._PasswordFormat = sourceObject.PasswordFormat; 
            this._PasswordSalt = sourceObject.PasswordSalt; 
            this._MobilePIN = sourceObject.MobilePIN; 
            this._Email = sourceObject.Email; 
            this._LoweredEmail = sourceObject.LoweredEmail; 
            this._PasswordQuestion = sourceObject.PasswordQuestion; 
            this._PasswordAnswer = sourceObject.PasswordAnswer; 
            this._IsApproved = sourceObject.IsApproved; 
            this._IsLockedOut = sourceObject.IsLockedOut; 
            this._CreateDate = sourceObject.CreateDate; 
            this._LastLoginDate = sourceObject.LastLoginDate; 
            this._LastPasswordChangedDate = sourceObject.LastPasswordChangedDate; 
            this._LastLockoutDate = sourceObject.LastLockoutDate; 
            this._FailedPasswordAttemptCount = sourceObject.FailedPasswordAttemptCount; 
            this._FailedPasswordAttemptWindowStart = sourceObject.FailedPasswordAttemptWindowStart; 
            this._FailedPasswordAnswerAttemptCount = sourceObject.FailedPasswordAnswerAttemptCount; 
            this._FailedPasswordAnswerAttemptWindowStart = sourceObject.FailedPasswordAnswerAttemptWindowStart; 
            this._Comment = sourceObject.Comment; 
        }

        public virtual int Retrieve()
        {
            return _Persister.Retrieve(this); 
        }

        public virtual int Update()
        {
            return _Persister.Update(this); 
        }

        public virtual int Delete()
        {
            return _Persister.Delete(this); 
        }

        public virtual int Insert()
        {
            return _Persister.Insert(this); 
        }

        public static IReader<AspnetMembership> ListAll()
        {
            return _DefaultPersister.ListAll(); 
        }

        public static IReader<AspnetMembership> ListForApplicationId(Guid applicationId)
        {
            return _DefaultPersister.ListForApplicationId(applicationId); 
        }

        public static IReader<AspnetMembership> ListForUserId(Guid userId)
        {
            return _DefaultPersister.ListForUserId(userId); 
        }

        public static IReader<AspnetMembership> ListForaspnet_Membership_index(Guid applicationId, string loweredEmail)
        {
            return _DefaultPersister.ListForaspnet_Membership_index(applicationId, loweredEmail); 
        }

    }
    
    public partial interface IAspnetMembershipPersister
    {
        int Retrieve(AspnetMembership aspnetMembership);
        int Update(AspnetMembership aspnetMembership);
        int Delete(AspnetMembership aspnetMembership);
        int Insert(AspnetMembership aspnetMembership);
        IReader<AspnetMembership> ListAll();
        IReader<AspnetMembership> ListForApplicationId(Guid applicationId);
        IReader<AspnetMembership> ListForUserId(Guid userId);
        IReader<AspnetMembership> ListForaspnet_Membership_index(Guid applicationId, string loweredEmail);
    }
    
    public partial class SqlServerAspnetMembershipPersister : SqlPersisterBase, IAspnetMembershipPersister
    {
        public SqlServerAspnetMembershipPersister()
        {
        }

        public SqlServerAspnetMembershipPersister(string connectionString) : base(connectionString)
        {
        }

        public SqlServerAspnetMembershipPersister(SqlConnection connection) : base(connection)
        {
        }

        public SqlServerAspnetMembershipPersister(SqlTransaction transaction) : base(transaction)
        {
        }

        public int Retrieve(AspnetMembership aspnetMembership)
        {
            int __rowsAffected = 1;
            
            // Create command
            using (SqlCommand sqlCommand = new SqlCommand("AspnetMembershipGet"))
            {
                // Set command type
                sqlCommand.CommandType = CommandType.StoredProcedure; 

                try
                {
                    // Attach command
                    AttachCommand(sqlCommand);

                    // Add command parameters
                    SqlParameter vApplicationId = new SqlParameter("@ApplicationId", SqlDbType.UniqueIdentifier);
                    vApplicationId.Direction = ParameterDirection.Output; 
                    sqlCommand.Parameters.Add(vApplicationId);
                    SqlParameter vUserId = new SqlParameter("@UserId", SqlDbType.UniqueIdentifier);
                    vUserId.Direction = ParameterDirection.InputOutput; 
                    sqlCommand.Parameters.Add(vUserId);
                    SqlParameter vPassword = new SqlParameter("@Password", SqlDbType.NVarChar, 128);
                    vPassword.Direction = ParameterDirection.Output; 
                    sqlCommand.Parameters.Add(vPassword);
                    SqlParameter vPasswordFormat = new SqlParameter("@PasswordFormat", SqlDbType.Int);
                    vPasswordFormat.Direction = ParameterDirection.Output; 
                    sqlCommand.Parameters.Add(vPasswordFormat);
                    SqlParameter vPasswordSalt = new SqlParameter("@PasswordSalt", SqlDbType.NVarChar, 128);
                    vPasswordSalt.Direction = ParameterDirection.Output; 
                    sqlCommand.Parameters.Add(vPasswordSalt);
                    SqlParameter vMobilePIN = new SqlParameter("@MobilePIN", SqlDbType.NVarChar, 16);
                    vMobilePIN.Direction = ParameterDirection.Output; 
                    sqlCommand.Parameters.Add(vMobilePIN);
                    SqlParameter vEmail = new SqlParameter("@Email", SqlDbType.NVarChar, 256);
                    vEmail.Direction = ParameterDirection.Output; 
                    sqlCommand.Parameters.Add(vEmail);
                    SqlParameter vLoweredEmail = new SqlParameter("@LoweredEmail", SqlDbType.NVarChar, 256);
                    vLoweredEmail.Direction = ParameterDirection.Output; 
                    sqlCommand.Parameters.Add(vLoweredEmail);
                    SqlParameter vPasswordQuestion = new SqlParameter("@PasswordQuestion", SqlDbType.NVarChar, 256);
                    vPasswordQuestion.Direction = ParameterDirection.Output; 
                    sqlCommand.Parameters.Add(vPasswordQuestion);
                    SqlParameter vPasswordAnswer = new SqlParameter("@PasswordAnswer", SqlDbType.NVarChar, 128);
                    vPasswordAnswer.Direction = ParameterDirection.Output; 
                    sqlCommand.Parameters.Add(vPasswordAnswer);
                    SqlParameter vIsApproved = new SqlParameter("@IsApproved", SqlDbType.Bit);
                    vIsApproved.Direction = ParameterDirection.Output; 
                    sqlCommand.Parameters.Add(vIsApproved);
                    SqlParameter vIsLockedOut = new SqlParameter("@IsLockedOut", SqlDbType.Bit);
                    vIsLockedOut.Direction = ParameterDirection.Output; 
                    sqlCommand.Parameters.Add(vIsLockedOut);
                    SqlParameter vCreateDate = new SqlParameter("@CreateDate", SqlDbType.DateTime);
                    vCreateDate.Direction = ParameterDirection.Output; 
                    sqlCommand.Parameters.Add(vCreateDate);
                    SqlParameter vLastLoginDate = new SqlParameter("@LastLoginDate", SqlDbType.DateTime);
                    vLastLoginDate.Direction = ParameterDirection.Output; 
                    sqlCommand.Parameters.Add(vLastLoginDate);
                    SqlParameter vLastPasswordChangedDate = new SqlParameter("@LastPasswordChangedDate", SqlDbType.DateTime);
                    vLastPasswordChangedDate.Direction = ParameterDirection.Output; 
                    sqlCommand.Parameters.Add(vLastPasswordChangedDate);
                    SqlParameter vLastLockoutDate = new SqlParameter("@LastLockoutDate", SqlDbType.DateTime);
                    vLastLockoutDate.Direction = ParameterDirection.Output; 
                    sqlCommand.Parameters.Add(vLastLockoutDate);
                    SqlParameter vFailedPasswordAttemptCount = new SqlParameter("@FailedPasswordAttemptCount", SqlDbType.Int);
                    vFailedPasswordAttemptCount.Direction = ParameterDirection.Output; 
                    sqlCommand.Parameters.Add(vFailedPasswordAttemptCount);
                    SqlParameter vFailedPasswordAttemptWindowStart = new SqlParameter("@FailedPasswordAttemptWindowStart", SqlDbType.DateTime);
                    vFailedPasswordAttemptWindowStart.Direction = ParameterDirection.Output; 
                    sqlCommand.Parameters.Add(vFailedPasswordAttemptWindowStart);
                    SqlParameter vFailedPasswordAnswerAttemptCount = new SqlParameter("@FailedPasswordAnswerAttemptCount", SqlDbType.Int);
                    vFailedPasswordAnswerAttemptCount.Direction = ParameterDirection.Output; 
                    sqlCommand.Parameters.Add(vFailedPasswordAnswerAttemptCount);
                    SqlParameter vFailedPasswordAnswerAttemptWindowStart = new SqlParameter("@FailedPasswordAnswerAttemptWindowStart", SqlDbType.DateTime);
                    vFailedPasswordAnswerAttemptWindowStart.Direction = ParameterDirection.Output; 
                    sqlCommand.Parameters.Add(vFailedPasswordAnswerAttemptWindowStart);
                    SqlParameter vComment = new SqlParameter("@Comment", SqlDbType.NVarChar, 1073741823);
                    vComment.Direction = ParameterDirection.Output; 
                    sqlCommand.Parameters.Add(vComment);

                    // Set input parameter values
                    SqlServerHelper.SetParameterValue(vUserId, aspnetMembership.UserId);

                    // Execute command
                    sqlCommand.ExecuteNonQuery();

                    try
                    {
                        // Get output parameter values
                        aspnetMembership.ApplicationId = SqlServerHelper.ToGuid(vApplicationId); 
                        aspnetMembership.UserId = SqlServerHelper.ToGuid(vUserId); 
                        aspnetMembership.Password = SqlServerHelper.ToString(vPassword); 
                        aspnetMembership.PasswordFormat = SqlServerHelper.ToInt32(vPasswordFormat); 
                        aspnetMembership.PasswordSalt = SqlServerHelper.ToString(vPasswordSalt); 
                        aspnetMembership.MobilePIN = SqlServerHelper.ToString(vMobilePIN); 
                        aspnetMembership.Email = SqlServerHelper.ToString(vEmail); 
                        aspnetMembership.LoweredEmail = SqlServerHelper.ToString(vLoweredEmail); 
                        aspnetMembership.PasswordQuestion = SqlServerHelper.ToString(vPasswordQuestion); 
                        aspnetMembership.PasswordAnswer = SqlServerHelper.ToString(vPasswordAnswer); 
                        aspnetMembership.IsApproved = SqlServerHelper.ToBoolean(vIsApproved); 
                        aspnetMembership.IsLockedOut = SqlServerHelper.ToBoolean(vIsLockedOut); 
                        aspnetMembership.CreateDate = SqlServerHelper.ToDateTime(vCreateDate); 
                        aspnetMembership.LastLoginDate = SqlServerHelper.ToDateTime(vLastLoginDate); 
                        aspnetMembership.LastPasswordChangedDate = SqlServerHelper.ToDateTime(vLastPasswordChangedDate); 
                        aspnetMembership.LastLockoutDate = SqlServerHelper.ToDateTime(vLastLockoutDate); 
                        aspnetMembership.FailedPasswordAttemptCount = SqlServerHelper.ToInt32(vFailedPasswordAttemptCount); 
                        aspnetMembership.FailedPasswordAttemptWindowStart = SqlServerHelper.ToDateTime(vFailedPasswordAttemptWindowStart); 
                        aspnetMembership.FailedPasswordAnswerAttemptCount = SqlServerHelper.ToInt32(vFailedPasswordAnswerAttemptCount); 
                        aspnetMembership.FailedPasswordAnswerAttemptWindowStart = SqlServerHelper.ToDateTime(vFailedPasswordAnswerAttemptWindowStart); 
                        if(aspnetMembership.CommentStream != null)
                            SqlServerHelper.ToStream(vComment, aspnetMembership.CommentStream);
                        else
                            aspnetMembership.Comment = SqlServerHelper.ToString(vComment); 
                        

                    }
                    catch(Exception ex)
                    {
                        if(ex is System.NullReferenceException)
                        {
                            __rowsAffected = 0; 
                        }
                        else
                        {
                            throw ex; 
                        }
                    }
                }
                finally
                {
                    // Detach command
                    DetachCommand(sqlCommand);
                }

            }
            
            return __rowsAffected; 
        }

        public int Update(AspnetMembership aspnetMembership)
        {
            int __rowsAffected = 0;
            
            // Create command
            using (SqlCommand sqlCommand = new SqlCommand("AspnetMembershipUpdate"))
            {
                // Set command type
                sqlCommand.CommandType = CommandType.StoredProcedure; 

                // Add command parameters
                SqlParameter vApplicationId = new SqlParameter("@ApplicationId", SqlDbType.UniqueIdentifier);
                vApplicationId.Direction = ParameterDirection.Input; 
                sqlCommand.Parameters.Add(vApplicationId);
                SqlParameter vUserId = new SqlParameter("@UserId", SqlDbType.UniqueIdentifier);
                vUserId.Direction = ParameterDirection.Input; 
                sqlCommand.Parameters.Add(vUserId);
                SqlParameter vPassword = new SqlParameter("@Password", SqlDbType.NVarChar, 128);
                vPassword.Direction = ParameterDirection.Input; 
                sqlCommand.Parameters.Add(vPassword);
                SqlParameter vPasswordFormat = new SqlParameter("@PasswordFormat", SqlDbType.Int);
                vPasswordFormat.Direction = ParameterDirection.Input; 
                sqlCommand.Parameters.Add(vPasswordFormat);
                SqlParameter vPasswordSalt = new SqlParameter("@PasswordSalt", SqlDbType.NVarChar, 128);
                vPasswordSalt.Direction = ParameterDirection.Input; 
                sqlCommand.Parameters.Add(vPasswordSalt);
                SqlParameter vMobilePIN = new SqlParameter("@MobilePIN", SqlDbType.NVarChar, 16);
                vMobilePIN.Direction = ParameterDirection.Input; 
                sqlCommand.Parameters.Add(vMobilePIN);
                SqlParameter vEmail = new SqlParameter("@Email", SqlDbType.NVarChar, 256);
                vEmail.Direction = ParameterDirection.Input; 
                sqlCommand.Parameters.Add(vEmail);
                SqlParameter vLoweredEmail = new SqlParameter("@LoweredEmail", SqlDbType.NVarChar, 256);
                vLoweredEmail.Direction = ParameterDirection.Input; 
                sqlCommand.Parameters.Add(vLoweredEmail);
                SqlParameter vPasswordQuestion = new SqlParameter("@PasswordQuestion", SqlDbType.NVarChar, 256);
                vPasswordQuestion.Direction = ParameterDirection.Input; 
                sqlCommand.Parameters.Add(vPasswordQuestion);
                SqlParameter vPasswordAnswer = new SqlParameter("@PasswordAnswer", SqlDbType.NVarChar, 128);
                vPasswordAnswer.Direction = ParameterDirection.Input; 
                sqlCommand.Parameters.Add(vPasswordAnswer);
                SqlParameter vIsApproved = new SqlParameter("@IsApproved", SqlDbType.Bit);
                vIsApproved.Direction = ParameterDirection.Input; 
                sqlCommand.Parameters.Add(vIsApproved);
                SqlParameter vIsLockedOut = new SqlParameter("@IsLockedOut", SqlDbType.Bit);
                vIsLockedOut.Direction = ParameterDirection.Input; 
                sqlCommand.Parameters.Add(vIsLockedOut);
                SqlParameter vCreateDate = new SqlParameter("@CreateDate", SqlDbType.DateTime);
                vCreateDate.Direction = ParameterDirection.Input; 
                sqlCommand.Parameters.Add(vCreateDate);
                SqlParameter vLastLoginDate = new SqlParameter("@LastLoginDate", SqlDbType.DateTime);
                vLastLoginDate.Direction = ParameterDirection.Input; 
                sqlCommand.Parameters.Add(vLastLoginDate);
                SqlParameter vLastPasswordChangedDate = new SqlParameter("@LastPasswordChangedDate", SqlDbType.DateTime);
                vLastPasswordChangedDate.Direction = ParameterDirection.Input; 
                sqlCommand.Parameters.Add(vLastPasswordChangedDate);
                SqlParameter vLastLockoutDate = new SqlParameter("@LastLockoutDate", SqlDbType.DateTime);
                vLastLockoutDate.Direction = ParameterDirection.Input; 
                sqlCommand.Parameters.Add(vLastLockoutDate);
                SqlParameter vFailedPasswordAttemptCount = new SqlParameter("@FailedPasswordAttemptCount", SqlDbType.Int);
                vFailedPasswordAttemptCount.Direction = ParameterDirection.Input; 
                sqlCommand.Parameters.Add(vFailedPasswordAttemptCount);
                SqlParameter vFailedPasswordAttemptWindowStart = new SqlParameter("@FailedPasswordAttemptWindowStart", SqlDbType.DateTime);
                vFailedPasswordAttemptWindowStart.Direction = ParameterDirection.Input; 
                sqlCommand.Parameters.Add(vFailedPasswordAttemptWindowStart);
                SqlParameter vFailedPasswordAnswerAttemptCount = new SqlParameter("@FailedPasswordAnswerAttemptCount", SqlDbType.Int);
                vFailedPasswordAnswerAttemptCount.Direction = ParameterDirection.Input; 
                sqlCommand.Parameters.Add(vFailedPasswordAnswerAttemptCount);
                SqlParameter vFailedPasswordAnswerAttemptWindowStart = new SqlParameter("@FailedPasswordAnswerAttemptWindowStart", SqlDbType.DateTime);
                vFailedPasswordAnswerAttemptWindowStart.Direction = ParameterDirection.Input; 
                sqlCommand.Parameters.Add(vFailedPasswordAnswerAttemptWindowStart);
                SqlParameter vComment = new SqlParameter("@Comment", SqlDbType.NVarChar, 1073741823);
                vComment.Direction = ParameterDirection.Input; 
                sqlCommand.Parameters.Add(vComment);

                // Set input parameter values
                SqlServerHelper.SetParameterValue(vApplicationId, aspnetMembership.ApplicationId);
                SqlServerHelper.SetParameterValue(vUserId, aspnetMembership.UserId);
                SqlServerHelper.SetParameterValue(vPassword, aspnetMembership.Password);
                SqlServerHelper.SetParameterValue(vPasswordFormat, aspnetMembership.PasswordFormat);
                SqlServerHelper.SetParameterValue(vPasswordSalt, aspnetMembership.PasswordSalt);
                SqlServerHelper.SetParameterValue(vMobilePIN, aspnetMembership.MobilePIN);
                SqlServerHelper.SetParameterValue(vEmail, aspnetMembership.Email);
                SqlServerHelper.SetParameterValue(vLoweredEmail, aspnetMembership.LoweredEmail);
                SqlServerHelper.SetParameterValue(vPasswordQuestion, aspnetMembership.PasswordQuestion);
                SqlServerHelper.SetParameterValue(vPasswordAnswer, aspnetMembership.PasswordAnswer);
                SqlServerHelper.SetParameterValue(vIsApproved, aspnetMembership.IsApproved);
                SqlServerHelper.SetParameterValue(vIsLockedOut, aspnetMembership.IsLockedOut);
                SqlServerHelper.SetParameterValue(vCreateDate, aspnetMembership.CreateDate);
                SqlServerHelper.SetParameterValue(vLastLoginDate, aspnetMembership.LastLoginDate);
                SqlServerHelper.SetParameterValue(vLastPasswordChangedDate, aspnetMembership.LastPasswordChangedDate);
                SqlServerHelper.SetParameterValue(vLastLockoutDate, aspnetMembership.LastLockoutDate);
                SqlServerHelper.SetParameterValue(vFailedPasswordAttemptCount, aspnetMembership.FailedPasswordAttemptCount);
                SqlServerHelper.SetParameterValue(vFailedPasswordAttemptWindowStart, aspnetMembership.FailedPasswordAttemptWindowStart);
                SqlServerHelper.SetParameterValue(vFailedPasswordAnswerAttemptCount, aspnetMembership.FailedPasswordAnswerAttemptCount);
                SqlServerHelper.SetParameterValue(vFailedPasswordAnswerAttemptWindowStart, aspnetMembership.FailedPasswordAnswerAttemptWindowStart);
                if(aspnetMembership.CommentStream != null)
                    SqlServerHelper.SetParameterValue(vComment, aspnetMembership.CommentStream);
                else
                    SqlServerHelper.SetParameterValue(vComment, aspnetMembership.Comment);

                try
                {
                    // Attach command
                    AttachCommand(sqlCommand);

                    // Execute command
                    __rowsAffected = sqlCommand.ExecuteNonQuery(); 
                    if(__rowsAffected == 0)
                    {
                        return __rowsAffected; 
                    }
                    

                }
                finally
                {
                    // Detach command
                    DetachCommand(sqlCommand);
                }

            }
            
            return __rowsAffected; 
        }

        public int Delete(AspnetMembership aspnetMembership)
        {
            int __rowsAffected = 0;
            
            // Create command
            using (SqlCommand sqlCommand = new SqlCommand("AspnetMembershipDelete"))
            {
                // Set command type
                sqlCommand.CommandType = CommandType.StoredProcedure; 

                try
                {
                    // Attach command
                    AttachCommand(sqlCommand);

                    // Add command parameters
                    SqlParameter vUserId = new SqlParameter("@UserId", SqlDbType.UniqueIdentifier);
                    vUserId.Direction = ParameterDirection.Input; 
                    sqlCommand.Parameters.Add(vUserId);

                    // Set input parameter values
                    SqlServerHelper.SetParameterValue(vUserId, aspnetMembership.UserId);

                    // Execute command
                    __rowsAffected = sqlCommand.ExecuteNonQuery(); 

                }
                finally
                {
                    // Detach command
                    DetachCommand(sqlCommand);
                }

            }
            
            return __rowsAffected; 
        }

        public int Insert(AspnetMembership aspnetMembership)
        {
            int __rowsAffected = 0;
            
            // Create command
            using (SqlCommand sqlCommand = new SqlCommand("AspnetMembershipInsert"))
            {
                // Set command type
                sqlCommand.CommandType = CommandType.StoredProcedure; 

                // Add command parameters
                SqlParameter vApplicationId = new SqlParameter("@ApplicationId", SqlDbType.UniqueIdentifier);
                vApplicationId.Direction = ParameterDirection.Input; 
                sqlCommand.Parameters.Add(vApplicationId);
                SqlParameter vUserId = new SqlParameter("@UserId", SqlDbType.UniqueIdentifier);
                vUserId.Direction = ParameterDirection.Input; 
                sqlCommand.Parameters.Add(vUserId);
                SqlParameter vPassword = new SqlParameter("@Password", SqlDbType.NVarChar, 128);
                vPassword.Direction = ParameterDirection.Input; 
                sqlCommand.Parameters.Add(vPassword);
                SqlParameter vPasswordFormat = new SqlParameter("@PasswordFormat", SqlDbType.Int);
                vPasswordFormat.Direction = ParameterDirection.Input; 
                sqlCommand.Parameters.Add(vPasswordFormat);
                SqlParameter vPasswordSalt = new SqlParameter("@PasswordSalt", SqlDbType.NVarChar, 128);
                vPasswordSalt.Direction = ParameterDirection.Input; 
                sqlCommand.Parameters.Add(vPasswordSalt);
                SqlParameter vMobilePIN = new SqlParameter("@MobilePIN", SqlDbType.NVarChar, 16);
                vMobilePIN.Direction = ParameterDirection.Input; 
                sqlCommand.Parameters.Add(vMobilePIN);
                SqlParameter vEmail = new SqlParameter("@Email", SqlDbType.NVarChar, 256);
                vEmail.Direction = ParameterDirection.Input; 
                sqlCommand.Parameters.Add(vEmail);
                SqlParameter vLoweredEmail = new SqlParameter("@LoweredEmail", SqlDbType.NVarChar, 256);
                vLoweredEmail.Direction = ParameterDirection.Input; 
                sqlCommand.Parameters.Add(vLoweredEmail);
                SqlParameter vPasswordQuestion = new SqlParameter("@PasswordQuestion", SqlDbType.NVarChar, 256);
                vPasswordQuestion.Direction = ParameterDirection.Input; 
                sqlCommand.Parameters.Add(vPasswordQuestion);
                SqlParameter vPasswordAnswer = new SqlParameter("@PasswordAnswer", SqlDbType.NVarChar, 128);
                vPasswordAnswer.Direction = ParameterDirection.Input; 
                sqlCommand.Parameters.Add(vPasswordAnswer);
                SqlParameter vIsApproved = new SqlParameter("@IsApproved", SqlDbType.Bit);
                vIsApproved.Direction = ParameterDirection.Input; 
                sqlCommand.Parameters.Add(vIsApproved);
                SqlParameter vIsLockedOut = new SqlParameter("@IsLockedOut", SqlDbType.Bit);
                vIsLockedOut.Direction = ParameterDirection.Input; 
                sqlCommand.Parameters.Add(vIsLockedOut);
                SqlParameter vCreateDate = new SqlParameter("@CreateDate", SqlDbType.DateTime);
                vCreateDate.Direction = ParameterDirection.Input; 
                sqlCommand.Parameters.Add(vCreateDate);
                SqlParameter vLastLoginDate = new SqlParameter("@LastLoginDate", SqlDbType.DateTime);
                vLastLoginDate.Direction = ParameterDirection.Input; 
                sqlCommand.Parameters.Add(vLastLoginDate);
                SqlParameter vLastPasswordChangedDate = new SqlParameter("@LastPasswordChangedDate", SqlDbType.DateTime);
                vLastPasswordChangedDate.Direction = ParameterDirection.Input; 
                sqlCommand.Parameters.Add(vLastPasswordChangedDate);
                SqlParameter vLastLockoutDate = new SqlParameter("@LastLockoutDate", SqlDbType.DateTime);
                vLastLockoutDate.Direction = ParameterDirection.Input; 
                sqlCommand.Parameters.Add(vLastLockoutDate);
                SqlParameter vFailedPasswordAttemptCount = new SqlParameter("@FailedPasswordAttemptCount", SqlDbType.Int);
                vFailedPasswordAttemptCount.Direction = ParameterDirection.Input; 
                sqlCommand.Parameters.Add(vFailedPasswordAttemptCount);
                SqlParameter vFailedPasswordAttemptWindowStart = new SqlParameter("@FailedPasswordAttemptWindowStart", SqlDbType.DateTime);
                vFailedPasswordAttemptWindowStart.Direction = ParameterDirection.Input; 
                sqlCommand.Parameters.Add(vFailedPasswordAttemptWindowStart);
                SqlParameter vFailedPasswordAnswerAttemptCount = new SqlParameter("@FailedPasswordAnswerAttemptCount", SqlDbType.Int);
                vFailedPasswordAnswerAttemptCount.Direction = ParameterDirection.Input; 
                sqlCommand.Parameters.Add(vFailedPasswordAnswerAttemptCount);
                SqlParameter vFailedPasswordAnswerAttemptWindowStart = new SqlParameter("@FailedPasswordAnswerAttemptWindowStart", SqlDbType.DateTime);
                vFailedPasswordAnswerAttemptWindowStart.Direction = ParameterDirection.Input; 
                sqlCommand.Parameters.Add(vFailedPasswordAnswerAttemptWindowStart);
                SqlParameter vComment = new SqlParameter("@Comment", SqlDbType.NVarChar, 1073741823);
                vComment.Direction = ParameterDirection.Input; 
                sqlCommand.Parameters.Add(vComment);

                // Set input parameter values
                SqlServerHelper.SetParameterValue(vApplicationId, aspnetMembership.ApplicationId);
                SqlServerHelper.SetParameterValue(vUserId, aspnetMembership.UserId);
                SqlServerHelper.SetParameterValue(vPassword, aspnetMembership.Password);
                SqlServerHelper.SetParameterValue(vPasswordFormat, aspnetMembership.PasswordFormat);
                SqlServerHelper.SetParameterValue(vPasswordSalt, aspnetMembership.PasswordSalt);
                SqlServerHelper.SetParameterValue(vMobilePIN, aspnetMembership.MobilePIN);
                SqlServerHelper.SetParameterValue(vEmail, aspnetMembership.Email);
                SqlServerHelper.SetParameterValue(vLoweredEmail, aspnetMembership.LoweredEmail);
                SqlServerHelper.SetParameterValue(vPasswordQuestion, aspnetMembership.PasswordQuestion);
                SqlServerHelper.SetParameterValue(vPasswordAnswer, aspnetMembership.PasswordAnswer);
                SqlServerHelper.SetParameterValue(vIsApproved, aspnetMembership.IsApproved);
                SqlServerHelper.SetParameterValue(vIsLockedOut, aspnetMembership.IsLockedOut);
                SqlServerHelper.SetParameterValue(vCreateDate, aspnetMembership.CreateDate);
                SqlServerHelper.SetParameterValue(vLastLoginDate, aspnetMembership.LastLoginDate);
                SqlServerHelper.SetParameterValue(vLastPasswordChangedDate, aspnetMembership.LastPasswordChangedDate);
                SqlServerHelper.SetParameterValue(vLastLockoutDate, aspnetMembership.LastLockoutDate);
                SqlServerHelper.SetParameterValue(vFailedPasswordAttemptCount, aspnetMembership.FailedPasswordAttemptCount);
                SqlServerHelper.SetParameterValue(vFailedPasswordAttemptWindowStart, aspnetMembership.FailedPasswordAttemptWindowStart);
                SqlServerHelper.SetParameterValue(vFailedPasswordAnswerAttemptCount, aspnetMembership.FailedPasswordAnswerAttemptCount);
                SqlServerHelper.SetParameterValue(vFailedPasswordAnswerAttemptWindowStart, aspnetMembership.FailedPasswordAnswerAttemptWindowStart);
                if(aspnetMembership.CommentStream != null)
                    SqlServerHelper.SetParameterValue(vComment, aspnetMembership.CommentStream);
                else
                    SqlServerHelper.SetParameterValue(vComment, aspnetMembership.Comment);

                try
                {
                    // Attach command
                    AttachCommand(sqlCommand);

                    // Execute command
                    __rowsAffected = sqlCommand.ExecuteNonQuery(); 
                    if(__rowsAffected == 0)
                    {
                        return __rowsAffected; 
                    }
                    

                }
                finally
                {
                    // Detach command
                    DetachCommand(sqlCommand);
                }

            }
            
            return __rowsAffected; 
        }

        public IReader<AspnetMembership> ListAll()
        {
            // Create command
            using (SqlCommand sqlCommand = new SqlCommand("AspnetMembershipListAll"))
            {
                // Set command type
                sqlCommand.CommandType = CommandType.StoredProcedure; 

                // Execute command
                SqlDataReader reader = sqlCommand.ExecuteReader(AttachReaderCommand(sqlCommand));

                // Return reader
                return new SqlServerAspnetMembershipReader(reader); 
            }
        }

        public IReader<AspnetMembership> ListForApplicationId(Guid applicationId)
        {
            // Create command
            using (SqlCommand sqlCommand = new SqlCommand("AspnetMembershipListForApplicationId"))
            {
                // Set command type
                sqlCommand.CommandType = CommandType.StoredProcedure; 

                // Add command parameters
                SqlParameter vApplicationId = new SqlParameter("@ApplicationId", SqlDbType.UniqueIdentifier);
                vApplicationId.Direction = ParameterDirection.Input; 
                sqlCommand.Parameters.Add(vApplicationId);
                
                // Set input parameter values
                SqlServerHelper.SetParameterValue(vApplicationId, applicationId);

                // Execute command
                SqlDataReader reader = sqlCommand.ExecuteReader(AttachReaderCommand(sqlCommand));

                // Return reader
                return new SqlServerAspnetMembershipReader(reader); 
            }
        }

        public IReader<AspnetMembership> ListForUserId(Guid userId)
        {
            // Create command
            using (SqlCommand sqlCommand = new SqlCommand("AspnetMembershipListForUserId"))
            {
                // Set command type
                sqlCommand.CommandType = CommandType.StoredProcedure; 

                // Add command parameters
                SqlParameter vUserId = new SqlParameter("@UserId", SqlDbType.UniqueIdentifier);
                vUserId.Direction = ParameterDirection.Input; 
                sqlCommand.Parameters.Add(vUserId);
                
                // Set input parameter values
                SqlServerHelper.SetParameterValue(vUserId, userId);

                // Execute command
                SqlDataReader reader = sqlCommand.ExecuteReader(AttachReaderCommand(sqlCommand));

                // Return reader
                return new SqlServerAspnetMembershipReader(reader); 
            }
        }

        public IReader<AspnetMembership> ListForaspnet_Membership_index(Guid applicationId, string loweredEmail)
        {
            // Create command
            using (SqlCommand sqlCommand = new SqlCommand("AspnetMembershipListByAspnetMembershipIndex"))
            {
                // Set command type
                sqlCommand.CommandType = CommandType.StoredProcedure; 

                // Add command parameters
                SqlParameter vApplicationId = new SqlParameter("@ApplicationId", SqlDbType.UniqueIdentifier);
                vApplicationId.Direction = ParameterDirection.Input; 
                sqlCommand.Parameters.Add(vApplicationId);
                SqlParameter vLoweredEmail = new SqlParameter("@LoweredEmail", SqlDbType.NVarChar, 256);
                vLoweredEmail.Direction = ParameterDirection.Input; 
                sqlCommand.Parameters.Add(vLoweredEmail);
                
                // Set input parameter values
                SqlServerHelper.SetParameterValue(vApplicationId, applicationId);
                SqlServerHelper.SetParameterValue(vLoweredEmail, loweredEmail);

                // Execute command
                SqlDataReader reader = sqlCommand.ExecuteReader(AttachReaderCommand(sqlCommand));

                // Return reader
                return new SqlServerAspnetMembershipReader(reader); 
            }
        }

    }

    public partial class SqlServerAspnetMembershipReader : IReader<AspnetMembership>
    {
        private SqlDataReader sqlDataReader;

        private AspnetMembership _AspnetMembership;

        private int _ApplicationIdOrdinal = -1;
        private int _UserIdOrdinal = -1;
        private int _PasswordOrdinal = -1;
        private int _PasswordFormatOrdinal = -1;
        private int _PasswordSaltOrdinal = -1;
        private int _MobilePINOrdinal = -1;
        private int _EmailOrdinal = -1;
        private int _LoweredEmailOrdinal = -1;
        private int _PasswordQuestionOrdinal = -1;
        private int _PasswordAnswerOrdinal = -1;
        private int _IsApprovedOrdinal = -1;
        private int _IsLockedOutOrdinal = -1;
        private int _CreateDateOrdinal = -1;
        private int _LastLoginDateOrdinal = -1;
        private int _LastPasswordChangedDateOrdinal = -1;
        private int _LastLockoutDateOrdinal = -1;
        private int _FailedPasswordAttemptCountOrdinal = -1;
        private int _FailedPasswordAttemptWindowStartOrdinal = -1;
        private int _FailedPasswordAnswerAttemptCountOrdinal = -1;
        private int _FailedPasswordAnswerAttemptWindowStartOrdinal = -1;
        private int _CommentOrdinal = -1;

        public SqlServerAspnetMembershipReader(SqlDataReader sqlDataReader)
        {
            this.sqlDataReader = sqlDataReader; 
            for (int  i = 0; i < sqlDataReader.FieldCount; i++)
            {
                string columnName = sqlDataReader.GetName(i);
                columnName = columnName.ToUpper(); 
                switch (columnName)
                {
                    case "APPLICATIONID":
                        _ApplicationIdOrdinal = i; 
                        break;
                    
                    case "USERID":
                        _UserIdOrdinal = i; 
                        break;
                    
                    case "PASSWORD":
                        _PasswordOrdinal = i; 
                        break;
                    
                    case "PASSWORDFORMAT":
                        _PasswordFormatOrdinal = i; 
                        break;
                    
                    case "PASSWORDSALT":
                        _PasswordSaltOrdinal = i; 
                        break;
                    
                    case "MOBILEPIN":
                        _MobilePINOrdinal = i; 
                        break;
                    
                    case "EMAIL":
                        _EmailOrdinal = i; 
                        break;
                    
                    case "LOWEREDEMAIL":
                        _LoweredEmailOrdinal = i; 
                        break;
                    
                    case "PASSWORDQUESTION":
                        _PasswordQuestionOrdinal = i; 
                        break;
                    
                    case "PASSWORDANSWER":
                        _PasswordAnswerOrdinal = i; 
                        break;
                    
                    case "ISAPPROVED":
                        _IsApprovedOrdinal = i; 
                        break;
                    
                    case "ISLOCKEDOUT":
                        _IsLockedOutOrdinal = i; 
                        break;
                    
                    case "CREATEDATE":
                        _CreateDateOrdinal = i; 
                        break;
                    
                    case "LASTLOGINDATE":
                        _LastLoginDateOrdinal = i; 
                        break;
                    
                    case "LASTPASSWORDCHANGEDDATE":
                        _LastPasswordChangedDateOrdinal = i; 
                        break;
                    
                    case "LASTLOCKOUTDATE":
                        _LastLockoutDateOrdinal = i; 
                        break;
                    
                    case "FAILEDPASSWORDATTEMPTCOUNT":
                        _FailedPasswordAttemptCountOrdinal = i; 
                        break;
                    
                    case "FAILEDPASSWORDATTEMPTWINDOWSTART":
                        _FailedPasswordAttemptWindowStartOrdinal = i; 
                        break;
                    
                    case "FAILEDPASSWORDANSWERATTEMPTCOUNT":
                        _FailedPasswordAnswerAttemptCountOrdinal = i; 
                        break;
                    
                    case "FAILEDPASSWORDANSWERATTEMPTWINDOWSTART":
                        _FailedPasswordAnswerAttemptWindowStartOrdinal = i; 
                        break;
                    
                    case "COMMENT":
                        _CommentOrdinal = i; 
                        break;
                    
                }
            }
        }

        #region IReader<AspnetMembership> Implementation
        
        public bool Read()
        {
            _AspnetMembership = null; 
            return this.sqlDataReader.Read(); 
        }

        public AspnetMembership Current
        {
            get
            {
                if(_AspnetMembership == null)
                {
                    _AspnetMembership = new AspnetMembership();
                    if(_ApplicationIdOrdinal != -1)
                    {
                        _AspnetMembership.ApplicationId = SqlServerHelper.ToGuid(sqlDataReader, _ApplicationIdOrdinal); 
                    }
                    if(_UserIdOrdinal != -1)
                    {
                        _AspnetMembership.UserId = SqlServerHelper.ToGuid(sqlDataReader, _UserIdOrdinal); 
                    }
                    _AspnetMembership.Password = SqlServerHelper.ToString(sqlDataReader, _PasswordOrdinal); 
                    if(_PasswordFormatOrdinal != -1)
                    {
                        _AspnetMembership.PasswordFormat = SqlServerHelper.ToInt32(sqlDataReader, _PasswordFormatOrdinal); 
                    }
                    _AspnetMembership.PasswordSalt = SqlServerHelper.ToString(sqlDataReader, _PasswordSaltOrdinal); 
                    _AspnetMembership.MobilePIN = SqlServerHelper.ToString(sqlDataReader, _MobilePINOrdinal); 
                    _AspnetMembership.Email = SqlServerHelper.ToString(sqlDataReader, _EmailOrdinal); 
                    _AspnetMembership.LoweredEmail = SqlServerHelper.ToString(sqlDataReader, _LoweredEmailOrdinal); 
                    _AspnetMembership.PasswordQuestion = SqlServerHelper.ToString(sqlDataReader, _PasswordQuestionOrdinal); 
                    _AspnetMembership.PasswordAnswer = SqlServerHelper.ToString(sqlDataReader, _PasswordAnswerOrdinal); 
                    if(_IsApprovedOrdinal != -1)
                    {
                        _AspnetMembership.IsApproved = SqlServerHelper.ToBoolean(sqlDataReader, _IsApprovedOrdinal); 
                    }
                    if(_IsLockedOutOrdinal != -1)
                    {
                        _AspnetMembership.IsLockedOut = SqlServerHelper.ToBoolean(sqlDataReader, _IsLockedOutOrdinal); 
                    }
                    if(_CreateDateOrdinal != -1)
                    {
                        _AspnetMembership.CreateDate = SqlServerHelper.ToDateTime(sqlDataReader, _CreateDateOrdinal); 
                    }
                    if(_LastLoginDateOrdinal != -1)
                    {
                        _AspnetMembership.LastLoginDate = SqlServerHelper.ToDateTime(sqlDataReader, _LastLoginDateOrdinal); 
                    }
                    if(_LastPasswordChangedDateOrdinal != -1)
                    {
                        _AspnetMembership.LastPasswordChangedDate = SqlServerHelper.ToDateTime(sqlDataReader, _LastPasswordChangedDateOrdinal); 
                    }
                    if(_LastLockoutDateOrdinal != -1)
                    {
                        _AspnetMembership.LastLockoutDate = SqlServerHelper.ToDateTime(sqlDataReader, _LastLockoutDateOrdinal); 
                    }
                    if(_FailedPasswordAttemptCountOrdinal != -1)
                    {
                        _AspnetMembership.FailedPasswordAttemptCount = SqlServerHelper.ToInt32(sqlDataReader, _FailedPasswordAttemptCountOrdinal); 
                    }
                    if(_FailedPasswordAttemptWindowStartOrdinal != -1)
                    {
                        _AspnetMembership.FailedPasswordAttemptWindowStart = SqlServerHelper.ToDateTime(sqlDataReader, _FailedPasswordAttemptWindowStartOrdinal); 
                    }
                    if(_FailedPasswordAnswerAttemptCountOrdinal != -1)
                    {
                        _AspnetMembership.FailedPasswordAnswerAttemptCount = SqlServerHelper.ToInt32(sqlDataReader, _FailedPasswordAnswerAttemptCountOrdinal); 
                    }
                    if(_FailedPasswordAnswerAttemptWindowStartOrdinal != -1)
                    {
                        _AspnetMembership.FailedPasswordAnswerAttemptWindowStart = SqlServerHelper.ToDateTime(sqlDataReader, _FailedPasswordAnswerAttemptWindowStartOrdinal); 
                    }
                    _AspnetMembership.Comment = SqlServerHelper.ToString(sqlDataReader, _CommentOrdinal); 
                }
                

                return _AspnetMembership; 
            }
        }

        public void Close()
        {
            sqlDataReader.Close();
        }

        public List<AspnetMembership> ToList()
        {
            List<AspnetMembership> list = new List<AspnetMembership>();
            while(this.Read())
            {
                list.Add(this.Current);
            }
            this.Close();
            return list; 
        }

        public DataTable ToDataTable()
        {
            DataTable dataTable = new DataTable();
            dataTable.Load(sqlDataReader);
            return dataTable; 
        }

        #endregion
        
        #region IDisposable Implementation
        
        public void Dispose()
        {
            sqlDataReader.Dispose();
        }
        #endregion
        
        #region IEnumerable<AspnetMembership> Implementation
        
        public IEnumerator<AspnetMembership> GetEnumerator()
        {
            return new AspnetMembershipEnumerator(this); 
        }

        #endregion
        
        #region IEnumerable Implementation
        
        IEnumerator IEnumerable.GetEnumerator()
        {
            return new AspnetMembershipEnumerator(this); 
        }

        #endregion
        
        
        private partial class AspnetMembershipEnumerator : IEnumerator<AspnetMembership>
        {
            private IReader<AspnetMembership> aspnetMembershipReader;

            public AspnetMembershipEnumerator(IReader<AspnetMembership> aspnetMembershipReader)
            {
                this.aspnetMembershipReader = aspnetMembershipReader; 
            }

            #region IEnumerator<AspnetMembership> Members
            
            public AspnetMembership Current
            {
                get { return this.aspnetMembershipReader.Current; }
            }

            #endregion
            
            #region IDisposable Members
            
            public void Dispose()
            {
                this.aspnetMembershipReader.Dispose();
            }

            #endregion
            
            #region IEnumerator Members
            
            object IEnumerator.Current
            {
                get { return this.aspnetMembershipReader.Current; }
            }

            public bool MoveNext()
            {
                return this.aspnetMembershipReader.Read(); 
            }

            public void Reset()
            {
                throw new Exception("Reset of aspnetmembership reader is not supported."); 
            }

            #endregion
            
        }
    }
}
