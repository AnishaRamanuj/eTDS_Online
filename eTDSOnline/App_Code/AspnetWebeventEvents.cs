// This code was generated by an EVALUATION copy of Schematrix SchemaCoder.
// Redistribution of this source code, or an application developed from it, is forbidden.
// Modification of this source code to remove this comment is also forbidden.
// Please visit http://www.schematrix.com/ to obtain a license to use this software.


using System;
using System.Collections;
using System.Collections.Generic;
using System.Data;
using System.Data.SqlClient;
using System.Data.SqlTypes;
using System.IO;

namespace PayrollProject
{
    public partial class AspnetWebeventEvents
    {
        private static IAspnetWebeventEventsPersister _DefaultPersister;
        private IAspnetWebeventEventsPersister _Persister;
        private string _EventId;
        private DateTime _EventTimeUtc;
        private DateTime _EventTime;
        private string _EventType;
        private decimal _EventSequence;
        private decimal _EventOccurrence;
        private int _EventCode;
        private int _EventDetailCode;
        private string _Message;
        private string _ApplicationPath;
        private string _ApplicationVirtualPath;
        private string _MachineName;
        private string _RequestUrl;
        private string _ExceptionType;
        private string _Details;
        private Stream _DetailsStream;

        static AspnetWebeventEvents()
        {
            // Assign default persister
            _DefaultPersister = new SqlServerAspnetWebeventEventsPersister();
        }

        public AspnetWebeventEvents()
        {
            // Assign default persister to instance persister
            _Persister = _DefaultPersister; 
        }

        public AspnetWebeventEvents(string _EventId)
        {
            // Assign default persister to instance persister
            _Persister = _DefaultPersister; 

            // Assign method parameter to private fields
            this._EventId = _EventId; 

            // Call associated retrieve method
            Retrieve();
        }

        public AspnetWebeventEvents(DataRow row)
        {
            // Assign default persister to instance persister
            _Persister = _DefaultPersister; 

            // Assign column values to private members
            for (int  i = 0; i < row.Table.Columns.Count; i++)
            {
                switch (row.Table.Columns[i].ColumnName.ToUpper())
                {
                    case "EVENTID":
                        this.EventId = (string)row[i, DataRowVersion.Current]; 
                        break;
                    
                    case "EVENTTIMEUTC":
                        this.EventTimeUtc = Convert.ToDateTime(row[i, DataRowVersion.Current]); 
                        break;
                    
                    case "EVENTTIME":
                        this.EventTime = Convert.ToDateTime(row[i, DataRowVersion.Current]); 
                        break;
                    
                    case "EVENTTYPE":
                        this.EventType = (string)row[i, DataRowVersion.Current]; 
                        break;
                    
                    case "EVENTSEQUENCE":
                        this.EventSequence = Convert.ToDecimal(row[i, DataRowVersion.Current]); 
                        break;
                    
                    case "EVENTOCCURRENCE":
                        this.EventOccurrence = Convert.ToDecimal(row[i, DataRowVersion.Current]); 
                        break;
                    
                    case "EVENTCODE":
                        this.EventCode = Convert.ToInt32(row[i, DataRowVersion.Current]); 
                        break;
                    
                    case "EVENTDETAILCODE":
                        this.EventDetailCode = Convert.ToInt32(row[i, DataRowVersion.Current]); 
                        break;
                    
                    case "MESSAGE":
                        if(row.IsNull(i) == false)
                        {
                            this.Message = (string)row[i, DataRowVersion.Current]; 
                        }
                        break;
                    
                    case "APPLICATIONPATH":
                        if(row.IsNull(i) == false)
                        {
                            this.ApplicationPath = (string)row[i, DataRowVersion.Current]; 
                        }
                        break;
                    
                    case "APPLICATIONVIRTUALPATH":
                        if(row.IsNull(i) == false)
                        {
                            this.ApplicationVirtualPath = (string)row[i, DataRowVersion.Current]; 
                        }
                        break;
                    
                    case "MACHINENAME":
                        this.MachineName = (string)row[i, DataRowVersion.Current]; 
                        break;
                    
                    case "REQUESTURL":
                        if(row.IsNull(i) == false)
                        {
                            this.RequestUrl = (string)row[i, DataRowVersion.Current]; 
                        }
                        break;
                    
                    case "EXCEPTIONTYPE":
                        if(row.IsNull(i) == false)
                        {
                            this.ExceptionType = (string)row[i, DataRowVersion.Current]; 
                        }
                        break;
                    
                    case "DETAILS":
                        if(row.IsNull(i) == false)
                        {
                            this.Details = (string)row[i, DataRowVersion.Current]; 
                        }
                        break;
                    
                }
            }
        }

        public static IAspnetWebeventEventsPersister DefaultPersister
        {
            get { return _DefaultPersister; }
            set { _DefaultPersister = value; }
        }

        public IAspnetWebeventEventsPersister Persister
        {
            get { return _Persister; }
            set { _Persister = value; }
        }

        public string EventId
        {
            get { return _EventId; }
            set { _EventId = value; }
        }

        public DateTime EventTimeUtc
        {
            get { return _EventTimeUtc; }
            set { _EventTimeUtc = value; }
        }

        public DateTime EventTime
        {
            get { return _EventTime; }
            set { _EventTime = value; }
        }

        public string EventType
        {
            get { return _EventType; }
            set { _EventType = value; }
        }

        public decimal EventSequence
        {
            get { return _EventSequence; }
            set { _EventSequence = value; }
        }

        public decimal EventOccurrence
        {
            get { return _EventOccurrence; }
            set { _EventOccurrence = value; }
        }

        public int EventCode
        {
            get { return _EventCode; }
            set { _EventCode = value; }
        }

        public int EventDetailCode
        {
            get { return _EventDetailCode; }
            set { _EventDetailCode = value; }
        }

        public string Message
        {
            get { return _Message; }
            set { _Message = value; }
        }

        public string ApplicationPath
        {
            get { return _ApplicationPath; }
            set { _ApplicationPath = value; }
        }

        public string ApplicationVirtualPath
        {
            get { return _ApplicationVirtualPath; }
            set { _ApplicationVirtualPath = value; }
        }

        public string MachineName
        {
            get { return _MachineName; }
            set { _MachineName = value; }
        }

        public string RequestUrl
        {
            get { return _RequestUrl; }
            set { _RequestUrl = value; }
        }

        public string ExceptionType
        {
            get { return _ExceptionType; }
            set { _ExceptionType = value; }
        }

        public string Details
        {
            get { return _Details; }
            set { _Details = value; }
        }

        public Stream DetailsStream
        {
            get { return _DetailsStream; }
            set { _DetailsStream = value; }
        }

        public virtual void Clone(AspnetWebeventEvents sourceObject)
        {
            // Clone attributes from source object
            this._EventId = sourceObject.EventId; 
            this._EventTimeUtc = sourceObject.EventTimeUtc; 
            this._EventTime = sourceObject.EventTime; 
            this._EventType = sourceObject.EventType; 
            this._EventSequence = sourceObject.EventSequence; 
            this._EventOccurrence = sourceObject.EventOccurrence; 
            this._EventCode = sourceObject.EventCode; 
            this._EventDetailCode = sourceObject.EventDetailCode; 
            this._Message = sourceObject.Message; 
            this._ApplicationPath = sourceObject.ApplicationPath; 
            this._ApplicationVirtualPath = sourceObject.ApplicationVirtualPath; 
            this._MachineName = sourceObject.MachineName; 
            this._RequestUrl = sourceObject.RequestUrl; 
            this._ExceptionType = sourceObject.ExceptionType; 
            this._Details = sourceObject.Details; 
        }

        public virtual int Retrieve()
        {
            return _Persister.Retrieve(this); 
        }

        public virtual int Update()
        {
            return _Persister.Update(this); 
        }

        public virtual int Delete()
        {
            return _Persister.Delete(this); 
        }

        public virtual int Insert()
        {
            return _Persister.Insert(this); 
        }

        public static IReader<AspnetWebeventEvents> ListAll()
        {
            return _DefaultPersister.ListAll(); 
        }

    }
    
    public partial interface IAspnetWebeventEventsPersister
    {
        int Retrieve(AspnetWebeventEvents aspnetWebeventEvents);
        int Update(AspnetWebeventEvents aspnetWebeventEvents);
        int Delete(AspnetWebeventEvents aspnetWebeventEvents);
        int Insert(AspnetWebeventEvents aspnetWebeventEvents);
        IReader<AspnetWebeventEvents> ListAll();
    }
    
    public partial class SqlServerAspnetWebeventEventsPersister : SqlPersisterBase, IAspnetWebeventEventsPersister
    {
        public SqlServerAspnetWebeventEventsPersister()
        {
        }

        public SqlServerAspnetWebeventEventsPersister(string connectionString) : base(connectionString)
        {
        }

        public SqlServerAspnetWebeventEventsPersister(SqlConnection connection) : base(connection)
        {
        }

        public SqlServerAspnetWebeventEventsPersister(SqlTransaction transaction) : base(transaction)
        {
        }

        public int Retrieve(AspnetWebeventEvents aspnetWebeventEvents)
        {
            int __rowsAffected = 1;
            
            // Create command
            using (SqlCommand sqlCommand = new SqlCommand("AspnetWebeventEventsGet"))
            {
                // Set command type
                sqlCommand.CommandType = CommandType.StoredProcedure; 

                try
                {
                    // Attach command
                    AttachCommand(sqlCommand);

                    // Add command parameters
                    SqlParameter vEventId = new SqlParameter("@EventId", SqlDbType.Char, 32);
                    vEventId.Direction = ParameterDirection.InputOutput; 
                    sqlCommand.Parameters.Add(vEventId);
                    SqlParameter vEventTimeUtc = new SqlParameter("@EventTimeUtc", SqlDbType.DateTime);
                    vEventTimeUtc.Direction = ParameterDirection.Output; 
                    sqlCommand.Parameters.Add(vEventTimeUtc);
                    SqlParameter vEventTime = new SqlParameter("@EventTime", SqlDbType.DateTime);
                    vEventTime.Direction = ParameterDirection.Output; 
                    sqlCommand.Parameters.Add(vEventTime);
                    SqlParameter vEventType = new SqlParameter("@EventType", SqlDbType.NVarChar, 256);
                    vEventType.Direction = ParameterDirection.Output; 
                    sqlCommand.Parameters.Add(vEventType);
                    SqlParameter vEventSequence = new SqlParameter("@EventSequence", SqlDbType.Decimal);
                    vEventSequence.Precision = 19; 
                    vEventSequence.Scale = 0; 
                    vEventSequence.Direction = ParameterDirection.Output; 
                    sqlCommand.Parameters.Add(vEventSequence);
                    SqlParameter vEventOccurrence = new SqlParameter("@EventOccurrence", SqlDbType.Decimal);
                    vEventOccurrence.Precision = 19; 
                    vEventOccurrence.Scale = 0; 
                    vEventOccurrence.Direction = ParameterDirection.Output; 
                    sqlCommand.Parameters.Add(vEventOccurrence);
                    SqlParameter vEventCode = new SqlParameter("@EventCode", SqlDbType.Int);
                    vEventCode.Direction = ParameterDirection.Output; 
                    sqlCommand.Parameters.Add(vEventCode);
                    SqlParameter vEventDetailCode = new SqlParameter("@EventDetailCode", SqlDbType.Int);
                    vEventDetailCode.Direction = ParameterDirection.Output; 
                    sqlCommand.Parameters.Add(vEventDetailCode);
                    SqlParameter vMessage = new SqlParameter("@Message", SqlDbType.NVarChar, 1024);
                    vMessage.Direction = ParameterDirection.Output; 
                    sqlCommand.Parameters.Add(vMessage);
                    SqlParameter vApplicationPath = new SqlParameter("@ApplicationPath", SqlDbType.NVarChar, 256);
                    vApplicationPath.Direction = ParameterDirection.Output; 
                    sqlCommand.Parameters.Add(vApplicationPath);
                    SqlParameter vApplicationVirtualPath = new SqlParameter("@ApplicationVirtualPath", SqlDbType.NVarChar, 256);
                    vApplicationVirtualPath.Direction = ParameterDirection.Output; 
                    sqlCommand.Parameters.Add(vApplicationVirtualPath);
                    SqlParameter vMachineName = new SqlParameter("@MachineName", SqlDbType.NVarChar, 256);
                    vMachineName.Direction = ParameterDirection.Output; 
                    sqlCommand.Parameters.Add(vMachineName);
                    SqlParameter vRequestUrl = new SqlParameter("@RequestUrl", SqlDbType.NVarChar, 1024);
                    vRequestUrl.Direction = ParameterDirection.Output; 
                    sqlCommand.Parameters.Add(vRequestUrl);
                    SqlParameter vExceptionType = new SqlParameter("@ExceptionType", SqlDbType.NVarChar, 256);
                    vExceptionType.Direction = ParameterDirection.Output; 
                    sqlCommand.Parameters.Add(vExceptionType);
                    SqlParameter vDetails = new SqlParameter("@Details", SqlDbType.NVarChar, 1073741823);
                    vDetails.Direction = ParameterDirection.Output; 
                    sqlCommand.Parameters.Add(vDetails);

                    // Set input parameter values
                    SqlServerHelper.SetParameterValue(vEventId, aspnetWebeventEvents.EventId);

                    // Execute command
                    sqlCommand.ExecuteNonQuery();

                    try
                    {
                        // Get output parameter values
                        aspnetWebeventEvents.EventId = SqlServerHelper.ToString(vEventId); 
                        aspnetWebeventEvents.EventTimeUtc = SqlServerHelper.ToDateTime(vEventTimeUtc); 
                        aspnetWebeventEvents.EventTime = SqlServerHelper.ToDateTime(vEventTime); 
                        aspnetWebeventEvents.EventType = SqlServerHelper.ToString(vEventType); 
                        aspnetWebeventEvents.EventSequence = SqlServerHelper.ToDecimal(vEventSequence); 
                        aspnetWebeventEvents.EventOccurrence = SqlServerHelper.ToDecimal(vEventOccurrence); 
                        aspnetWebeventEvents.EventCode = SqlServerHelper.ToInt32(vEventCode); 
                        aspnetWebeventEvents.EventDetailCode = SqlServerHelper.ToInt32(vEventDetailCode); 
                        aspnetWebeventEvents.Message = SqlServerHelper.ToString(vMessage); 
                        aspnetWebeventEvents.ApplicationPath = SqlServerHelper.ToString(vApplicationPath); 
                        aspnetWebeventEvents.ApplicationVirtualPath = SqlServerHelper.ToString(vApplicationVirtualPath); 
                        aspnetWebeventEvents.MachineName = SqlServerHelper.ToString(vMachineName); 
                        aspnetWebeventEvents.RequestUrl = SqlServerHelper.ToString(vRequestUrl); 
                        aspnetWebeventEvents.ExceptionType = SqlServerHelper.ToString(vExceptionType); 
                        if(aspnetWebeventEvents.DetailsStream != null)
                            SqlServerHelper.ToStream(vDetails, aspnetWebeventEvents.DetailsStream);
                        else
                            aspnetWebeventEvents.Details = SqlServerHelper.ToString(vDetails); 
                        

                    }
                    catch(Exception ex)
                    {
                        if(ex is System.NullReferenceException)
                        {
                            __rowsAffected = 0; 
                        }
                        else
                        {
                            throw ex; 
                        }
                    }
                }
                finally
                {
                    // Detach command
                    DetachCommand(sqlCommand);
                }

            }
            
            return __rowsAffected; 
        }

        public int Update(AspnetWebeventEvents aspnetWebeventEvents)
        {
            int __rowsAffected = 0;
            
            // Create command
            using (SqlCommand sqlCommand = new SqlCommand("AspnetWebeventEventsUpdate"))
            {
                // Set command type
                sqlCommand.CommandType = CommandType.StoredProcedure; 

                // Add command parameters
                SqlParameter vEventId = new SqlParameter("@EventId", SqlDbType.Char, 32);
                vEventId.Direction = ParameterDirection.Input; 
                sqlCommand.Parameters.Add(vEventId);
                SqlParameter vEventTimeUtc = new SqlParameter("@EventTimeUtc", SqlDbType.DateTime);
                vEventTimeUtc.Direction = ParameterDirection.Input; 
                sqlCommand.Parameters.Add(vEventTimeUtc);
                SqlParameter vEventTime = new SqlParameter("@EventTime", SqlDbType.DateTime);
                vEventTime.Direction = ParameterDirection.Input; 
                sqlCommand.Parameters.Add(vEventTime);
                SqlParameter vEventType = new SqlParameter("@EventType", SqlDbType.NVarChar, 256);
                vEventType.Direction = ParameterDirection.Input; 
                sqlCommand.Parameters.Add(vEventType);
                SqlParameter vEventSequence = new SqlParameter("@EventSequence", SqlDbType.Decimal);
                vEventSequence.Precision = 19; 
                vEventSequence.Scale = 0; 
                vEventSequence.Direction = ParameterDirection.Input; 
                sqlCommand.Parameters.Add(vEventSequence);
                SqlParameter vEventOccurrence = new SqlParameter("@EventOccurrence", SqlDbType.Decimal);
                vEventOccurrence.Precision = 19; 
                vEventOccurrence.Scale = 0; 
                vEventOccurrence.Direction = ParameterDirection.Input; 
                sqlCommand.Parameters.Add(vEventOccurrence);
                SqlParameter vEventCode = new SqlParameter("@EventCode", SqlDbType.Int);
                vEventCode.Direction = ParameterDirection.Input; 
                sqlCommand.Parameters.Add(vEventCode);
                SqlParameter vEventDetailCode = new SqlParameter("@EventDetailCode", SqlDbType.Int);
                vEventDetailCode.Direction = ParameterDirection.Input; 
                sqlCommand.Parameters.Add(vEventDetailCode);
                SqlParameter vMessage = new SqlParameter("@Message", SqlDbType.NVarChar, 1024);
                vMessage.Direction = ParameterDirection.Input; 
                sqlCommand.Parameters.Add(vMessage);
                SqlParameter vApplicationPath = new SqlParameter("@ApplicationPath", SqlDbType.NVarChar, 256);
                vApplicationPath.Direction = ParameterDirection.Input; 
                sqlCommand.Parameters.Add(vApplicationPath);
                SqlParameter vApplicationVirtualPath = new SqlParameter("@ApplicationVirtualPath", SqlDbType.NVarChar, 256);
                vApplicationVirtualPath.Direction = ParameterDirection.Input; 
                sqlCommand.Parameters.Add(vApplicationVirtualPath);
                SqlParameter vMachineName = new SqlParameter("@MachineName", SqlDbType.NVarChar, 256);
                vMachineName.Direction = ParameterDirection.Input; 
                sqlCommand.Parameters.Add(vMachineName);
                SqlParameter vRequestUrl = new SqlParameter("@RequestUrl", SqlDbType.NVarChar, 1024);
                vRequestUrl.Direction = ParameterDirection.Input; 
                sqlCommand.Parameters.Add(vRequestUrl);
                SqlParameter vExceptionType = new SqlParameter("@ExceptionType", SqlDbType.NVarChar, 256);
                vExceptionType.Direction = ParameterDirection.Input; 
                sqlCommand.Parameters.Add(vExceptionType);
                SqlParameter vDetails = new SqlParameter("@Details", SqlDbType.NVarChar, 1073741823);
                vDetails.Direction = ParameterDirection.Input; 
                sqlCommand.Parameters.Add(vDetails);

                // Set input parameter values
                SqlServerHelper.SetParameterValue(vEventId, aspnetWebeventEvents.EventId);
                SqlServerHelper.SetParameterValue(vEventTimeUtc, aspnetWebeventEvents.EventTimeUtc);
                SqlServerHelper.SetParameterValue(vEventTime, aspnetWebeventEvents.EventTime);
                SqlServerHelper.SetParameterValue(vEventType, aspnetWebeventEvents.EventType);
                SqlServerHelper.SetParameterValue(vEventSequence, aspnetWebeventEvents.EventSequence);
                SqlServerHelper.SetParameterValue(vEventOccurrence, aspnetWebeventEvents.EventOccurrence);
                SqlServerHelper.SetParameterValue(vEventCode, aspnetWebeventEvents.EventCode);
                SqlServerHelper.SetParameterValue(vEventDetailCode, aspnetWebeventEvents.EventDetailCode);
                SqlServerHelper.SetParameterValue(vMessage, aspnetWebeventEvents.Message);
                SqlServerHelper.SetParameterValue(vApplicationPath, aspnetWebeventEvents.ApplicationPath);
                SqlServerHelper.SetParameterValue(vApplicationVirtualPath, aspnetWebeventEvents.ApplicationVirtualPath);
                SqlServerHelper.SetParameterValue(vMachineName, aspnetWebeventEvents.MachineName);
                SqlServerHelper.SetParameterValue(vRequestUrl, aspnetWebeventEvents.RequestUrl);
                SqlServerHelper.SetParameterValue(vExceptionType, aspnetWebeventEvents.ExceptionType);
                if(aspnetWebeventEvents.DetailsStream != null)
                    SqlServerHelper.SetParameterValue(vDetails, aspnetWebeventEvents.DetailsStream);
                else
                    SqlServerHelper.SetParameterValue(vDetails, aspnetWebeventEvents.Details);

                try
                {
                    // Attach command
                    AttachCommand(sqlCommand);

                    // Execute command
                    __rowsAffected = sqlCommand.ExecuteNonQuery(); 
                    if(__rowsAffected == 0)
                    {
                        return __rowsAffected; 
                    }
                    

                }
                finally
                {
                    // Detach command
                    DetachCommand(sqlCommand);
                }

            }
            
            return __rowsAffected; 
        }

        public int Delete(AspnetWebeventEvents aspnetWebeventEvents)
        {
            int __rowsAffected = 0;
            
            // Create command
            using (SqlCommand sqlCommand = new SqlCommand("AspnetWebeventEventsDelete"))
            {
                // Set command type
                sqlCommand.CommandType = CommandType.StoredProcedure; 

                try
                {
                    // Attach command
                    AttachCommand(sqlCommand);

                    // Add command parameters
                    SqlParameter vEventId = new SqlParameter("@EventId", SqlDbType.Char, 32);
                    vEventId.Direction = ParameterDirection.Input; 
                    sqlCommand.Parameters.Add(vEventId);

                    // Set input parameter values
                    SqlServerHelper.SetParameterValue(vEventId, aspnetWebeventEvents.EventId);

                    // Execute command
                    __rowsAffected = sqlCommand.ExecuteNonQuery(); 

                }
                finally
                {
                    // Detach command
                    DetachCommand(sqlCommand);
                }

            }
            
            return __rowsAffected; 
        }

        public int Insert(AspnetWebeventEvents aspnetWebeventEvents)
        {
            int __rowsAffected = 0;
            
            // Create command
            using (SqlCommand sqlCommand = new SqlCommand("AspnetWebeventEventsInsert"))
            {
                // Set command type
                sqlCommand.CommandType = CommandType.StoredProcedure; 

                // Add command parameters
                SqlParameter vEventId = new SqlParameter("@EventId", SqlDbType.Char, 32);
                vEventId.Direction = ParameterDirection.Input; 
                sqlCommand.Parameters.Add(vEventId);
                SqlParameter vEventTimeUtc = new SqlParameter("@EventTimeUtc", SqlDbType.DateTime);
                vEventTimeUtc.Direction = ParameterDirection.Input; 
                sqlCommand.Parameters.Add(vEventTimeUtc);
                SqlParameter vEventTime = new SqlParameter("@EventTime", SqlDbType.DateTime);
                vEventTime.Direction = ParameterDirection.Input; 
                sqlCommand.Parameters.Add(vEventTime);
                SqlParameter vEventType = new SqlParameter("@EventType", SqlDbType.NVarChar, 256);
                vEventType.Direction = ParameterDirection.Input; 
                sqlCommand.Parameters.Add(vEventType);
                SqlParameter vEventSequence = new SqlParameter("@EventSequence", SqlDbType.Decimal);
                vEventSequence.Precision = 19; 
                vEventSequence.Scale = 0; 
                vEventSequence.Direction = ParameterDirection.Input; 
                sqlCommand.Parameters.Add(vEventSequence);
                SqlParameter vEventOccurrence = new SqlParameter("@EventOccurrence", SqlDbType.Decimal);
                vEventOccurrence.Precision = 19; 
                vEventOccurrence.Scale = 0; 
                vEventOccurrence.Direction = ParameterDirection.Input; 
                sqlCommand.Parameters.Add(vEventOccurrence);
                SqlParameter vEventCode = new SqlParameter("@EventCode", SqlDbType.Int);
                vEventCode.Direction = ParameterDirection.Input; 
                sqlCommand.Parameters.Add(vEventCode);
                SqlParameter vEventDetailCode = new SqlParameter("@EventDetailCode", SqlDbType.Int);
                vEventDetailCode.Direction = ParameterDirection.Input; 
                sqlCommand.Parameters.Add(vEventDetailCode);
                SqlParameter vMessage = new SqlParameter("@Message", SqlDbType.NVarChar, 1024);
                vMessage.Direction = ParameterDirection.Input; 
                sqlCommand.Parameters.Add(vMessage);
                SqlParameter vApplicationPath = new SqlParameter("@ApplicationPath", SqlDbType.NVarChar, 256);
                vApplicationPath.Direction = ParameterDirection.Input; 
                sqlCommand.Parameters.Add(vApplicationPath);
                SqlParameter vApplicationVirtualPath = new SqlParameter("@ApplicationVirtualPath", SqlDbType.NVarChar, 256);
                vApplicationVirtualPath.Direction = ParameterDirection.Input; 
                sqlCommand.Parameters.Add(vApplicationVirtualPath);
                SqlParameter vMachineName = new SqlParameter("@MachineName", SqlDbType.NVarChar, 256);
                vMachineName.Direction = ParameterDirection.Input; 
                sqlCommand.Parameters.Add(vMachineName);
                SqlParameter vRequestUrl = new SqlParameter("@RequestUrl", SqlDbType.NVarChar, 1024);
                vRequestUrl.Direction = ParameterDirection.Input; 
                sqlCommand.Parameters.Add(vRequestUrl);
                SqlParameter vExceptionType = new SqlParameter("@ExceptionType", SqlDbType.NVarChar, 256);
                vExceptionType.Direction = ParameterDirection.Input; 
                sqlCommand.Parameters.Add(vExceptionType);
                SqlParameter vDetails = new SqlParameter("@Details", SqlDbType.NVarChar, 1073741823);
                vDetails.Direction = ParameterDirection.Input; 
                sqlCommand.Parameters.Add(vDetails);

                // Set input parameter values
                SqlServerHelper.SetParameterValue(vEventId, aspnetWebeventEvents.EventId);
                SqlServerHelper.SetParameterValue(vEventTimeUtc, aspnetWebeventEvents.EventTimeUtc);
                SqlServerHelper.SetParameterValue(vEventTime, aspnetWebeventEvents.EventTime);
                SqlServerHelper.SetParameterValue(vEventType, aspnetWebeventEvents.EventType);
                SqlServerHelper.SetParameterValue(vEventSequence, aspnetWebeventEvents.EventSequence);
                SqlServerHelper.SetParameterValue(vEventOccurrence, aspnetWebeventEvents.EventOccurrence);
                SqlServerHelper.SetParameterValue(vEventCode, aspnetWebeventEvents.EventCode);
                SqlServerHelper.SetParameterValue(vEventDetailCode, aspnetWebeventEvents.EventDetailCode);
                SqlServerHelper.SetParameterValue(vMessage, aspnetWebeventEvents.Message);
                SqlServerHelper.SetParameterValue(vApplicationPath, aspnetWebeventEvents.ApplicationPath);
                SqlServerHelper.SetParameterValue(vApplicationVirtualPath, aspnetWebeventEvents.ApplicationVirtualPath);
                SqlServerHelper.SetParameterValue(vMachineName, aspnetWebeventEvents.MachineName);
                SqlServerHelper.SetParameterValue(vRequestUrl, aspnetWebeventEvents.RequestUrl);
                SqlServerHelper.SetParameterValue(vExceptionType, aspnetWebeventEvents.ExceptionType);
                if(aspnetWebeventEvents.DetailsStream != null)
                    SqlServerHelper.SetParameterValue(vDetails, aspnetWebeventEvents.DetailsStream);
                else
                    SqlServerHelper.SetParameterValue(vDetails, aspnetWebeventEvents.Details);

                try
                {
                    // Attach command
                    AttachCommand(sqlCommand);

                    // Execute command
                    __rowsAffected = sqlCommand.ExecuteNonQuery(); 
                    if(__rowsAffected == 0)
                    {
                        return __rowsAffected; 
                    }
                    

                }
                finally
                {
                    // Detach command
                    DetachCommand(sqlCommand);
                }

            }
            
            return __rowsAffected; 
        }

        public IReader<AspnetWebeventEvents> ListAll()
        {
            // Create command
            using (SqlCommand sqlCommand = new SqlCommand("AspnetWebeventEventsListAll"))
            {
                // Set command type
                sqlCommand.CommandType = CommandType.StoredProcedure; 

                // Execute command
                SqlDataReader reader = sqlCommand.ExecuteReader(AttachReaderCommand(sqlCommand));

                // Return reader
                return new SqlServerAspnetWebeventEventsReader(reader); 
            }
        }

    }

    public partial class SqlServerAspnetWebeventEventsReader : IReader<AspnetWebeventEvents>
    {
        private SqlDataReader sqlDataReader;

        private AspnetWebeventEvents _AspnetWebeventEvents;

        private int _EventIdOrdinal = -1;
        private int _EventTimeUtcOrdinal = -1;
        private int _EventTimeOrdinal = -1;
        private int _EventTypeOrdinal = -1;
        private int _EventSequenceOrdinal = -1;
        private int _EventOccurrenceOrdinal = -1;
        private int _EventCodeOrdinal = -1;
        private int _EventDetailCodeOrdinal = -1;
        private int _MessageOrdinal = -1;
        private int _ApplicationPathOrdinal = -1;
        private int _ApplicationVirtualPathOrdinal = -1;
        private int _MachineNameOrdinal = -1;
        private int _RequestUrlOrdinal = -1;
        private int _ExceptionTypeOrdinal = -1;
        private int _DetailsOrdinal = -1;

        public SqlServerAspnetWebeventEventsReader(SqlDataReader sqlDataReader)
        {
            this.sqlDataReader = sqlDataReader; 
            for (int  i = 0; i < sqlDataReader.FieldCount; i++)
            {
                string columnName = sqlDataReader.GetName(i);
                columnName = columnName.ToUpper(); 
                switch (columnName)
                {
                    case "EVENTID":
                        _EventIdOrdinal = i; 
                        break;
                    
                    case "EVENTTIMEUTC":
                        _EventTimeUtcOrdinal = i; 
                        break;
                    
                    case "EVENTTIME":
                        _EventTimeOrdinal = i; 
                        break;
                    
                    case "EVENTTYPE":
                        _EventTypeOrdinal = i; 
                        break;
                    
                    case "EVENTSEQUENCE":
                        _EventSequenceOrdinal = i; 
                        break;
                    
                    case "EVENTOCCURRENCE":
                        _EventOccurrenceOrdinal = i; 
                        break;
                    
                    case "EVENTCODE":
                        _EventCodeOrdinal = i; 
                        break;
                    
                    case "EVENTDETAILCODE":
                        _EventDetailCodeOrdinal = i; 
                        break;
                    
                    case "MESSAGE":
                        _MessageOrdinal = i; 
                        break;
                    
                    case "APPLICATIONPATH":
                        _ApplicationPathOrdinal = i; 
                        break;
                    
                    case "APPLICATIONVIRTUALPATH":
                        _ApplicationVirtualPathOrdinal = i; 
                        break;
                    
                    case "MACHINENAME":
                        _MachineNameOrdinal = i; 
                        break;
                    
                    case "REQUESTURL":
                        _RequestUrlOrdinal = i; 
                        break;
                    
                    case "EXCEPTIONTYPE":
                        _ExceptionTypeOrdinal = i; 
                        break;
                    
                    case "DETAILS":
                        _DetailsOrdinal = i; 
                        break;
                    
                }
            }
        }

        #region IReader<AspnetWebeventEvents> Implementation
        
        public bool Read()
        {
            _AspnetWebeventEvents = null; 
            return this.sqlDataReader.Read(); 
        }

        public AspnetWebeventEvents Current
        {
            get
            {
                if(_AspnetWebeventEvents == null)
                {
                    _AspnetWebeventEvents = new AspnetWebeventEvents();
                    _AspnetWebeventEvents.EventId = SqlServerHelper.ToString(sqlDataReader, _EventIdOrdinal); 
                    if(_EventTimeUtcOrdinal != -1)
                    {
                        _AspnetWebeventEvents.EventTimeUtc = SqlServerHelper.ToDateTime(sqlDataReader, _EventTimeUtcOrdinal); 
                    }
                    if(_EventTimeOrdinal != -1)
                    {
                        _AspnetWebeventEvents.EventTime = SqlServerHelper.ToDateTime(sqlDataReader, _EventTimeOrdinal); 
                    }
                    _AspnetWebeventEvents.EventType = SqlServerHelper.ToString(sqlDataReader, _EventTypeOrdinal); 
                    if(_EventSequenceOrdinal != -1)
                    {
                        _AspnetWebeventEvents.EventSequence = SqlServerHelper.ToDecimal(sqlDataReader, _EventSequenceOrdinal); 
                    }
                    if(_EventOccurrenceOrdinal != -1)
                    {
                        _AspnetWebeventEvents.EventOccurrence = SqlServerHelper.ToDecimal(sqlDataReader, _EventOccurrenceOrdinal); 
                    }
                    if(_EventCodeOrdinal != -1)
                    {
                        _AspnetWebeventEvents.EventCode = SqlServerHelper.ToInt32(sqlDataReader, _EventCodeOrdinal); 
                    }
                    if(_EventDetailCodeOrdinal != -1)
                    {
                        _AspnetWebeventEvents.EventDetailCode = SqlServerHelper.ToInt32(sqlDataReader, _EventDetailCodeOrdinal); 
                    }
                    _AspnetWebeventEvents.Message = SqlServerHelper.ToString(sqlDataReader, _MessageOrdinal); 
                    _AspnetWebeventEvents.ApplicationPath = SqlServerHelper.ToString(sqlDataReader, _ApplicationPathOrdinal); 
                    _AspnetWebeventEvents.ApplicationVirtualPath = SqlServerHelper.ToString(sqlDataReader, _ApplicationVirtualPathOrdinal); 
                    _AspnetWebeventEvents.MachineName = SqlServerHelper.ToString(sqlDataReader, _MachineNameOrdinal); 
                    _AspnetWebeventEvents.RequestUrl = SqlServerHelper.ToString(sqlDataReader, _RequestUrlOrdinal); 
                    _AspnetWebeventEvents.ExceptionType = SqlServerHelper.ToString(sqlDataReader, _ExceptionTypeOrdinal); 
                    _AspnetWebeventEvents.Details = SqlServerHelper.ToString(sqlDataReader, _DetailsOrdinal); 
                }
                

                return _AspnetWebeventEvents; 
            }
        }

        public void Close()
        {
            sqlDataReader.Close();
        }

        public List<AspnetWebeventEvents> ToList()
        {
            List<AspnetWebeventEvents> list = new List<AspnetWebeventEvents>();
            while(this.Read())
            {
                list.Add(this.Current);
            }
            this.Close();
            return list; 
        }

        public DataTable ToDataTable()
        {
            DataTable dataTable = new DataTable();
            dataTable.Load(sqlDataReader);
            return dataTable; 
        }

        #endregion
        
        #region IDisposable Implementation
        
        public void Dispose()
        {
            sqlDataReader.Dispose();
        }
        #endregion
        
        #region IEnumerable<AspnetWebeventEvents> Implementation
        
        public IEnumerator<AspnetWebeventEvents> GetEnumerator()
        {
            return new AspnetWebeventEventsEnumerator(this); 
        }

        #endregion
        
        #region IEnumerable Implementation
        
        IEnumerator IEnumerable.GetEnumerator()
        {
            return new AspnetWebeventEventsEnumerator(this); 
        }

        #endregion
        
        
        private partial class AspnetWebeventEventsEnumerator : IEnumerator<AspnetWebeventEvents>
        {
            private IReader<AspnetWebeventEvents> aspnetWebeventEventsReader;

            public AspnetWebeventEventsEnumerator(IReader<AspnetWebeventEvents> aspnetWebeventEventsReader)
            {
                this.aspnetWebeventEventsReader = aspnetWebeventEventsReader; 
            }

            #region IEnumerator<AspnetWebeventEvents> Members
            
            public AspnetWebeventEvents Current
            {
                get { return this.aspnetWebeventEventsReader.Current; }
            }

            #endregion
            
            #region IDisposable Members
            
            public void Dispose()
            {
                this.aspnetWebeventEventsReader.Dispose();
            }

            #endregion
            
            #region IEnumerator Members
            
            object IEnumerator.Current
            {
                get { return this.aspnetWebeventEventsReader.Current; }
            }

            public bool MoveNext()
            {
                return this.aspnetWebeventEventsReader.Read(); 
            }

            public void Reset()
            {
                throw new Exception("Reset of aspnetwebeventevents reader is not supported."); 
            }

            #endregion
            
        }
    }
}
