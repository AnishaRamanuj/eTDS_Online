// This code was generated by an EVALUATION copy of Schematrix SchemaCoder.
// Redistribution of this source code, or an application developed from it, is forbidden.
// Modification of this source code to remove this comment is also forbidden.
// Please visit http://www.schematrix.com/ to obtain a license to use this software.

using System;
using System.Collections;
using System.Collections.Generic;
using System.Data;
using System.Data.SqlClient;
using System.Data.SqlTypes;
using System.IO;

namespace PayrollProject
{
    public partial class AspnetProfile
    {
        private static IAspnetProfilePersister _DefaultPersister;
        private IAspnetProfilePersister _Persister;
        private Guid _UserId;
        private string _PropertyNames;
        private Stream _PropertyNamesStream;
        private string _PropertyValuesString;
        private Stream _PropertyValuesStringStream;
        private byte[] _PropertyValuesBinary;
        private Stream _PropertyValuesBinaryStream;
        private DateTime _LastUpdatedDate;

        static AspnetProfile()
        {
            // Assign default persister
            _DefaultPersister = new SqlServerAspnetProfilePersister();
        }

        public AspnetProfile()
        {
            // Assign default persister to instance persister
            _Persister = _DefaultPersister; 
        }

        public AspnetProfile(Guid _UserId)
        {
            // Assign default persister to instance persister
            _Persister = _DefaultPersister; 

            // Assign method parameter to private fields
            this._UserId = _UserId; 

            // Call associated retrieve method
            Retrieve();
        }

        public AspnetProfile(DataRow row)
        {
            // Assign default persister to instance persister
            _Persister = _DefaultPersister; 

            // Assign column values to private members
            for (int  i = 0; i < row.Table.Columns.Count; i++)
            {
                switch (row.Table.Columns[i].ColumnName.ToUpper())
                {
                    case "USERID":
                        if(row[i, DataRowVersion.Current] is Guid)
                        {
                            this.UserId = (Guid)row[i, DataRowVersion.Current]; 
                        }
                        else
                        {
                            this.UserId = new Guid((Byte[])row[i, DataRowVersion.Current]); 
                        }
                        break;
                    
                    case "PROPERTYNAMES":
                        this.PropertyNames = (string)row[i, DataRowVersion.Current]; 
                        break;
                    
                    case "PROPERTYVALUESSTRING":
                        this.PropertyValuesString = (string)row[i, DataRowVersion.Current]; 
                        break;
                    
                    case "PROPERTYVALUESBINARY":
                        this.PropertyValuesBinary = (Byte[])row[i, DataRowVersion.Current]; 
                        break;
                    
                    case "LASTUPDATEDDATE":
                        this.LastUpdatedDate = Convert.ToDateTime(row[i, DataRowVersion.Current]); 
                        break;
                    
                }
            }
        }

        public static IAspnetProfilePersister DefaultPersister
        {
            get { return _DefaultPersister; }
            set { _DefaultPersister = value; }
        }

        public IAspnetProfilePersister Persister
        {
            get { return _Persister; }
            set { _Persister = value; }
        }

        public Guid UserId
        {
            get { return _UserId; }
            set { _UserId = value; }
        }

        public string PropertyNames
        {
            get { return _PropertyNames; }
            set { _PropertyNames = value; }
        }

        public Stream PropertyNamesStream
        {
            get { return _PropertyNamesStream; }
            set { _PropertyNamesStream = value; }
        }

        public string PropertyValuesString
        {
            get { return _PropertyValuesString; }
            set { _PropertyValuesString = value; }
        }

        public Stream PropertyValuesStringStream
        {
            get { return _PropertyValuesStringStream; }
            set { _PropertyValuesStringStream = value; }
        }

        public byte[] PropertyValuesBinary
        {
            get { return _PropertyValuesBinary; }
            set { _PropertyValuesBinary = value; }
        }

        public Stream PropertyValuesBinaryStream
        {
            get { return _PropertyValuesBinaryStream; }
            set { _PropertyValuesBinaryStream = value; }
        }

        public DateTime LastUpdatedDate
        {
            get { return _LastUpdatedDate; }
            set { _LastUpdatedDate = value; }
        }

        public virtual void Clone(AspnetProfile sourceObject)
        {
            // Clone attributes from source object
            this._UserId = sourceObject.UserId; 
            this._PropertyNames = sourceObject.PropertyNames; 
            this._PropertyValuesString = sourceObject.PropertyValuesString; 
            if(sourceObject.PropertyValuesBinary == null)
            {
                this._PropertyValuesBinary = null; 
            }
            else
            {
                this._PropertyValuesBinary = (byte[])sourceObject.PropertyValuesBinary.Clone(); 
            }
            this._LastUpdatedDate = sourceObject.LastUpdatedDate; 
        }

        public virtual int Retrieve()
        {
            return _Persister.Retrieve(this); 
        }

        public virtual int Update()
        {
            return _Persister.Update(this); 
        }

        public virtual int Delete()
        {
            return _Persister.Delete(this); 
        }

        public virtual int Insert()
        {
            return _Persister.Insert(this); 
        }

        public static IReader<AspnetProfile> ListAll()
        {
            return _DefaultPersister.ListAll(); 
        }

        public static IReader<AspnetProfile> ListForUserId(Guid userId)
        {
            return _DefaultPersister.ListForUserId(userId); 
        }

    }
    
    public partial interface IAspnetProfilePersister
    {
        int Retrieve(AspnetProfile aspnetProfile);
        int Update(AspnetProfile aspnetProfile);
        int Delete(AspnetProfile aspnetProfile);
        int Insert(AspnetProfile aspnetProfile);
        IReader<AspnetProfile> ListAll();
        IReader<AspnetProfile> ListForUserId(Guid userId);
    }
    
    public partial class SqlServerAspnetProfilePersister : SqlPersisterBase, IAspnetProfilePersister
    {
        public SqlServerAspnetProfilePersister()
        {
        }

        public SqlServerAspnetProfilePersister(string connectionString) : base(connectionString)
        {
        }

        public SqlServerAspnetProfilePersister(SqlConnection connection) : base(connection)
        {
        }

        public SqlServerAspnetProfilePersister(SqlTransaction transaction) : base(transaction)
        {
        }

        public int Retrieve(AspnetProfile aspnetProfile)
        {
            int __rowsAffected = 1;
            
            // Create command
            using (SqlCommand sqlCommand = new SqlCommand("AspnetProfileGet"))
            {
                // Set command type
                sqlCommand.CommandType = CommandType.StoredProcedure; 

                try
                {
                    // Attach command
                    AttachCommand(sqlCommand);

                    // Add command parameters
                    SqlParameter vUserId = new SqlParameter("@UserId", SqlDbType.UniqueIdentifier);
                    vUserId.Direction = ParameterDirection.InputOutput; 
                    sqlCommand.Parameters.Add(vUserId);
                    SqlParameter vPropertyNames = new SqlParameter("@PropertyNames", SqlDbType.NVarChar, 1073741823);
                    vPropertyNames.Direction = ParameterDirection.Output; 
                    sqlCommand.Parameters.Add(vPropertyNames);
                    SqlParameter vPropertyValuesString = new SqlParameter("@PropertyValuesString", SqlDbType.NVarChar, 1073741823);
                    vPropertyValuesString.Direction = ParameterDirection.Output; 
                    sqlCommand.Parameters.Add(vPropertyValuesString);
                    SqlParameter vPropertyValuesBinary = new SqlParameter("@PropertyValuesBinary", SqlDbType.VarBinary, 2147483647);
                    vPropertyValuesBinary.Direction = ParameterDirection.Output; 
                    sqlCommand.Parameters.Add(vPropertyValuesBinary);
                    SqlParameter vLastUpdatedDate = new SqlParameter("@LastUpdatedDate", SqlDbType.DateTime);
                    vLastUpdatedDate.Direction = ParameterDirection.Output; 
                    sqlCommand.Parameters.Add(vLastUpdatedDate);

                    // Set input parameter values
                    SqlServerHelper.SetParameterValue(vUserId, aspnetProfile.UserId);

                    // Execute command
                    sqlCommand.ExecuteNonQuery();

                    try
                    {
                        // Get output parameter values
                        aspnetProfile.UserId = SqlServerHelper.ToGuid(vUserId); 
                        if(aspnetProfile.PropertyNamesStream != null)
                            SqlServerHelper.ToStream(vPropertyNames, aspnetProfile.PropertyNamesStream);
                        else
                            aspnetProfile.PropertyNames = SqlServerHelper.ToString(vPropertyNames); 
                        
                        if(aspnetProfile.PropertyValuesStringStream != null)
                            SqlServerHelper.ToStream(vPropertyValuesString, aspnetProfile.PropertyValuesStringStream);
                        else
                            aspnetProfile.PropertyValuesString = SqlServerHelper.ToString(vPropertyValuesString); 
                        
                        if(aspnetProfile.PropertyValuesBinaryStream != null)
                            SqlServerHelper.ToStream(vPropertyValuesBinary, aspnetProfile.PropertyValuesBinaryStream);
                        else
                            aspnetProfile.PropertyValuesBinary = SqlServerHelper.ToByteArray(vPropertyValuesBinary); 
                        
                        aspnetProfile.LastUpdatedDate = SqlServerHelper.ToDateTime(vLastUpdatedDate); 

                    }
                    catch(Exception ex)
                    {
                        if(ex is System.NullReferenceException)
                        {
                            __rowsAffected = 0; 
                        }
                        else
                        {
                            throw ex; 
                        }
                    }
                }
                finally
                {
                    // Detach command
                    DetachCommand(sqlCommand);
                }

            }
            
            return __rowsAffected; 
        }

        public int Update(AspnetProfile aspnetProfile)
        {
            int __rowsAffected = 0;
            
            // Create command
            using (SqlCommand sqlCommand = new SqlCommand("AspnetProfileUpdate"))
            {
                // Set command type
                sqlCommand.CommandType = CommandType.StoredProcedure; 

                // Add command parameters
                SqlParameter vUserId = new SqlParameter("@UserId", SqlDbType.UniqueIdentifier);
                vUserId.Direction = ParameterDirection.Input; 
                sqlCommand.Parameters.Add(vUserId);
                SqlParameter vPropertyNames = new SqlParameter("@PropertyNames", SqlDbType.NVarChar, 1073741823);
                vPropertyNames.Direction = ParameterDirection.Input; 
                sqlCommand.Parameters.Add(vPropertyNames);
                SqlParameter vPropertyValuesString = new SqlParameter("@PropertyValuesString", SqlDbType.NVarChar, 1073741823);
                vPropertyValuesString.Direction = ParameterDirection.Input; 
                sqlCommand.Parameters.Add(vPropertyValuesString);
                SqlParameter vPropertyValuesBinary = new SqlParameter("@PropertyValuesBinary", SqlDbType.VarBinary, 2147483647);
                vPropertyValuesBinary.Direction = ParameterDirection.Input; 
                sqlCommand.Parameters.Add(vPropertyValuesBinary);
                SqlParameter vLastUpdatedDate = new SqlParameter("@LastUpdatedDate", SqlDbType.DateTime);
                vLastUpdatedDate.Direction = ParameterDirection.Input; 
                sqlCommand.Parameters.Add(vLastUpdatedDate);

                // Set input parameter values
                SqlServerHelper.SetParameterValue(vUserId, aspnetProfile.UserId);
                if(aspnetProfile.PropertyNamesStream != null)
                    SqlServerHelper.SetParameterValue(vPropertyNames, aspnetProfile.PropertyNamesStream);
                else
                    SqlServerHelper.SetParameterValue(vPropertyNames, aspnetProfile.PropertyNames);
                if(aspnetProfile.PropertyValuesStringStream != null)
                    SqlServerHelper.SetParameterValue(vPropertyValuesString, aspnetProfile.PropertyValuesStringStream);
                else
                    SqlServerHelper.SetParameterValue(vPropertyValuesString, aspnetProfile.PropertyValuesString);
                if(aspnetProfile.PropertyValuesBinaryStream != null)
                    SqlServerHelper.SetParameterValue(vPropertyValuesBinary, aspnetProfile.PropertyValuesBinaryStream);
                else
                    SqlServerHelper.SetParameterValue(vPropertyValuesBinary, aspnetProfile.PropertyValuesBinary);
                SqlServerHelper.SetParameterValue(vLastUpdatedDate, aspnetProfile.LastUpdatedDate);

                try
                {
                    // Attach command
                    AttachCommand(sqlCommand);

                    // Execute command
                    __rowsAffected = sqlCommand.ExecuteNonQuery(); 
                    if(__rowsAffected == 0)
                    {
                        return __rowsAffected; 
                    }
                    

                }
                finally
                {
                    // Detach command
                    DetachCommand(sqlCommand);
                }

            }
            
            return __rowsAffected; 
        }

        public int Delete(AspnetProfile aspnetProfile)
        {
            int __rowsAffected = 0;
            
            // Create command
            using (SqlCommand sqlCommand = new SqlCommand("AspnetProfileDelete"))
            {
                // Set command type
                sqlCommand.CommandType = CommandType.StoredProcedure; 

                try
                {
                    // Attach command
                    AttachCommand(sqlCommand);

                    // Add command parameters
                    SqlParameter vUserId = new SqlParameter("@UserId", SqlDbType.UniqueIdentifier);
                    vUserId.Direction = ParameterDirection.Input; 
                    sqlCommand.Parameters.Add(vUserId);

                    // Set input parameter values
                    SqlServerHelper.SetParameterValue(vUserId, aspnetProfile.UserId);

                    // Execute command
                    __rowsAffected = sqlCommand.ExecuteNonQuery(); 

                }
                finally
                {
                    // Detach command
                    DetachCommand(sqlCommand);
                }

            }
            
            return __rowsAffected; 
        }

        public int Insert(AspnetProfile aspnetProfile)
        {
            int __rowsAffected = 0;
            
            // Create command
            using (SqlCommand sqlCommand = new SqlCommand("AspnetProfileInsert"))
            {
                // Set command type
                sqlCommand.CommandType = CommandType.StoredProcedure; 

                // Add command parameters
                SqlParameter vUserId = new SqlParameter("@UserId", SqlDbType.UniqueIdentifier);
                vUserId.Direction = ParameterDirection.Input; 
                sqlCommand.Parameters.Add(vUserId);
                SqlParameter vPropertyNames = new SqlParameter("@PropertyNames", SqlDbType.NVarChar, 1073741823);
                vPropertyNames.Direction = ParameterDirection.Input; 
                sqlCommand.Parameters.Add(vPropertyNames);
                SqlParameter vPropertyValuesString = new SqlParameter("@PropertyValuesString", SqlDbType.NVarChar, 1073741823);
                vPropertyValuesString.Direction = ParameterDirection.Input; 
                sqlCommand.Parameters.Add(vPropertyValuesString);
                SqlParameter vPropertyValuesBinary = new SqlParameter("@PropertyValuesBinary", SqlDbType.VarBinary, 2147483647);
                vPropertyValuesBinary.Direction = ParameterDirection.Input; 
                sqlCommand.Parameters.Add(vPropertyValuesBinary);
                SqlParameter vLastUpdatedDate = new SqlParameter("@LastUpdatedDate", SqlDbType.DateTime);
                vLastUpdatedDate.Direction = ParameterDirection.Input; 
                sqlCommand.Parameters.Add(vLastUpdatedDate);

                // Set input parameter values
                SqlServerHelper.SetParameterValue(vUserId, aspnetProfile.UserId);
                if(aspnetProfile.PropertyNamesStream != null)
                    SqlServerHelper.SetParameterValue(vPropertyNames, aspnetProfile.PropertyNamesStream);
                else
                    SqlServerHelper.SetParameterValue(vPropertyNames, aspnetProfile.PropertyNames);
                if(aspnetProfile.PropertyValuesStringStream != null)
                    SqlServerHelper.SetParameterValue(vPropertyValuesString, aspnetProfile.PropertyValuesStringStream);
                else
                    SqlServerHelper.SetParameterValue(vPropertyValuesString, aspnetProfile.PropertyValuesString);
                if(aspnetProfile.PropertyValuesBinaryStream != null)
                    SqlServerHelper.SetParameterValue(vPropertyValuesBinary, aspnetProfile.PropertyValuesBinaryStream);
                else
                    SqlServerHelper.SetParameterValue(vPropertyValuesBinary, aspnetProfile.PropertyValuesBinary);
                SqlServerHelper.SetParameterValue(vLastUpdatedDate, aspnetProfile.LastUpdatedDate);

                try
                {
                    // Attach command
                    AttachCommand(sqlCommand);

                    // Execute command
                    __rowsAffected = sqlCommand.ExecuteNonQuery(); 
                    if(__rowsAffected == 0)
                    {
                        return __rowsAffected; 
                    }
                    

                }
                finally
                {
                    // Detach command
                    DetachCommand(sqlCommand);
                }

            }
            
            return __rowsAffected; 
        }

        public IReader<AspnetProfile> ListAll()
        {
            // Create command
            using (SqlCommand sqlCommand = new SqlCommand("AspnetProfileListAll"))
            {
                // Set command type
                sqlCommand.CommandType = CommandType.StoredProcedure; 

                // Execute command
                SqlDataReader reader = sqlCommand.ExecuteReader(AttachReaderCommand(sqlCommand));

                // Return reader
                return new SqlServerAspnetProfileReader(reader); 
            }
        }

        public IReader<AspnetProfile> ListForUserId(Guid userId)
        {
            // Create command
            using (SqlCommand sqlCommand = new SqlCommand("AspnetProfileListForUserId"))
            {
                // Set command type
                sqlCommand.CommandType = CommandType.StoredProcedure; 

                // Add command parameters
                SqlParameter vUserId = new SqlParameter("@UserId", SqlDbType.UniqueIdentifier);
                vUserId.Direction = ParameterDirection.Input; 
                sqlCommand.Parameters.Add(vUserId);
                
                // Set input parameter values
                SqlServerHelper.SetParameterValue(vUserId, userId);

                // Execute command
                SqlDataReader reader = sqlCommand.ExecuteReader(AttachReaderCommand(sqlCommand));

                // Return reader
                return new SqlServerAspnetProfileReader(reader); 
            }
        }

    }

    public partial class SqlServerAspnetProfileReader : IReader<AspnetProfile>
    {
        private SqlDataReader sqlDataReader;

        private AspnetProfile _AspnetProfile;

        private int _UserIdOrdinal = -1;
        private int _PropertyNamesOrdinal = -1;
        private int _PropertyValuesStringOrdinal = -1;
        private int _PropertyValuesBinaryOrdinal = -1;
        private int _LastUpdatedDateOrdinal = -1;

        public SqlServerAspnetProfileReader(SqlDataReader sqlDataReader)
        {
            this.sqlDataReader = sqlDataReader; 
            for (int  i = 0; i < sqlDataReader.FieldCount; i++)
            {
                string columnName = sqlDataReader.GetName(i);
                columnName = columnName.ToUpper(); 
                switch (columnName)
                {
                    case "USERID":
                        _UserIdOrdinal = i; 
                        break;
                    
                    case "PROPERTYNAMES":
                        _PropertyNamesOrdinal = i; 
                        break;
                    
                    case "PROPERTYVALUESSTRING":
                        _PropertyValuesStringOrdinal = i; 
                        break;
                    
                    case "PROPERTYVALUESBINARY":
                        _PropertyValuesBinaryOrdinal = i; 
                        break;
                    
                    case "LASTUPDATEDDATE":
                        _LastUpdatedDateOrdinal = i; 
                        break;
                    
                }
            }
        }

        #region IReader<AspnetProfile> Implementation
        
        public bool Read()
        {
            _AspnetProfile = null; 
            return this.sqlDataReader.Read(); 
        }

        public AspnetProfile Current
        {
            get
            {
                if(_AspnetProfile == null)
                {
                    _AspnetProfile = new AspnetProfile();
                    if(_UserIdOrdinal != -1)
                    {
                        _AspnetProfile.UserId = SqlServerHelper.ToGuid(sqlDataReader, _UserIdOrdinal); 
                    }
                    _AspnetProfile.PropertyNames = SqlServerHelper.ToString(sqlDataReader, _PropertyNamesOrdinal); 
                    _AspnetProfile.PropertyValuesString = SqlServerHelper.ToString(sqlDataReader, _PropertyValuesStringOrdinal); 
                    _AspnetProfile.PropertyValuesBinary = SqlServerHelper.ToByteArray(sqlDataReader, _PropertyValuesBinaryOrdinal); 
                    if(_LastUpdatedDateOrdinal != -1)
                    {
                        _AspnetProfile.LastUpdatedDate = SqlServerHelper.ToDateTime(sqlDataReader, _LastUpdatedDateOrdinal); 
                    }
                }
                

                return _AspnetProfile; 
            }
        }

        public void Close()
        {
            sqlDataReader.Close();
        }

        public List<AspnetProfile> ToList()
        {
            List<AspnetProfile> list = new List<AspnetProfile>();
            while(this.Read())
            {
                list.Add(this.Current);
            }
            this.Close();
            return list; 
        }

        public DataTable ToDataTable()
        {
            DataTable dataTable = new DataTable();
            dataTable.Load(sqlDataReader);
            return dataTable; 
        }

        #endregion
        
        #region IDisposable Implementation
        
        public void Dispose()
        {
            sqlDataReader.Dispose();
        }
        #endregion
        
        #region IEnumerable<AspnetProfile> Implementation
        
        public IEnumerator<AspnetProfile> GetEnumerator()
        {
            return new AspnetProfileEnumerator(this); 
        }

        #endregion
        
        #region IEnumerable Implementation
        
        IEnumerator IEnumerable.GetEnumerator()
        {
            return new AspnetProfileEnumerator(this); 
        }

        #endregion
        
        
        private partial class AspnetProfileEnumerator : IEnumerator<AspnetProfile>
        {
            private IReader<AspnetProfile> aspnetProfileReader;

            public AspnetProfileEnumerator(IReader<AspnetProfile> aspnetProfileReader)
            {
                this.aspnetProfileReader = aspnetProfileReader; 
            }

            #region IEnumerator<AspnetProfile> Members
            
            public AspnetProfile Current
            {
                get { return this.aspnetProfileReader.Current; }
            }

            #endregion
            
            #region IDisposable Members
            
            public void Dispose()
            {
                this.aspnetProfileReader.Dispose();
            }

            #endregion
            
            #region IEnumerator Members
            
            object IEnumerator.Current
            {
                get { return this.aspnetProfileReader.Current; }
            }

            public bool MoveNext()
            {
                return this.aspnetProfileReader.Read(); 
            }

            public void Reset()
            {
                throw new Exception("Reset of aspnetprofile reader is not supported."); 
            }

            #endregion
            
        }
    }
}
