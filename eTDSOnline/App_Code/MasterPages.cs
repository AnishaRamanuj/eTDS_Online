// This code was generated by an EVALUATION copy of Schematrix SchemaCoder.
// Redistribution of this source code, or an application developed from it, is forbidden.
// Modification of this source code to remove this comment is also forbidden.
// Please visit http://www.schematrix.com/ to obtain a license to use this software.


using System;
using System.Collections;
using System.Collections.Generic;
using System.Data;
using System.Data.SqlClient;
using System.Data.SqlTypes;
using System.IO;

namespace PayrollProject
{
    public partial class MasterPages
    {
        private static IMasterPagesPersister _DefaultPersister;
        private IMasterPagesPersister _Persister;
        private int _MasterPageID;
        private string _PageTitle;
        private string _PageName;
        private DateTime _ModifiedDate;
        private int _PageOrder;
        private int? _Status;
        private int? _Module_ID;

        static MasterPages()
        {
            // Assign default persister
            _DefaultPersister = new SqlServerMasterPagesPersister();
        }

        public MasterPages()
        {
            // Assign default persister to instance persister
            _Persister = _DefaultPersister; 
        }

        public MasterPages(int _MasterPageID)
        {
            // Assign default persister to instance persister
            _Persister = _DefaultPersister; 

            // Assign method parameter to private fields
            this._MasterPageID = _MasterPageID; 

            // Call associated retrieve method
            Retrieve();
        }

        public MasterPages(DataRow row)
        {
            // Assign default persister to instance persister
            _Persister = _DefaultPersister; 

            // Assign column values to private members
            for (int  i = 0; i < row.Table.Columns.Count; i++)
            {
                switch (row.Table.Columns[i].ColumnName.ToUpper())
                {
                    case "MASTERPAGEID":
                        this.MasterPageID = Convert.ToInt32(row[i, DataRowVersion.Current]); 
                        break;
                    
                    case "PAGETITLE":
                        this.PageTitle = (string)row[i, DataRowVersion.Current]; 
                        break;
                    
                    case "PAGENAME":
                        this.PageName = (string)row[i, DataRowVersion.Current]; 
                        break;
                    
                    case "MODIFIEDDATE":
                        this.ModifiedDate = Convert.ToDateTime(row[i, DataRowVersion.Current]); 
                        break;
                    
                    case "PAGEORDER":
                        this.PageOrder = Convert.ToInt32(row[i, DataRowVersion.Current]); 
                        break;
                    
                    case "STATUS":
                        if(row.IsNull(i) == false)
                        {
                            this.Status = Convert.ToInt32(row[i, DataRowVersion.Current]); 
                        }
                        break;

                    case "MODULE_ID":
                        if (row.IsNull(i) == false)
                        {
                            this.Status = Convert.ToInt32(row[i, DataRowVersion.Current]);
                        }
                        break; 
                }
            }
        }

        public static IMasterPagesPersister DefaultPersister
        {
            get { return _DefaultPersister; }
            set { _DefaultPersister = value; }
        }

        public IMasterPagesPersister Persister
        {
            get { return _Persister; }
            set { _Persister = value; }
        }

        public int MasterPageID
        {
            get { return _MasterPageID; }
            set { _MasterPageID = value; }
        }

        public string PageTitle
        {
            get { return _PageTitle; }
            set { _PageTitle = value; }
        }

        public string PageName
        {
            get { return _PageName; }
            set { _PageName = value; }
        }

        public DateTime ModifiedDate
        {
            get { return _ModifiedDate; }
            set { _ModifiedDate = value; }
        }

        public int PageOrder
        {
            get { return _PageOrder; }
            set { _PageOrder = value; }
        }

        public int? Status
        {
            get { return _Status; }
            set { _Status = value; }
        }

        public int? Module_ID
        {
            get { return _Module_ID ; }
            set { _Module_ID = value; }
        }
        public virtual void Clone(MasterPages sourceObject)
        {
            // Clone attributes from source object
            this._MasterPageID = sourceObject.MasterPageID; 
            this._PageTitle = sourceObject.PageTitle; 
            this._PageName = sourceObject.PageName; 
            this._ModifiedDate = sourceObject.ModifiedDate; 
            this._PageOrder = sourceObject.PageOrder; 
            this._Status = sourceObject.Status;
            this._Module_ID = sourceObject._Module_ID; 
        }

        public virtual int Retrieve()
        {
            return _Persister.Retrieve(this); 
        }

        public virtual int Update()
        {
            return _Persister.Update(this); 
        }

        public virtual int Delete()
        {
            return _Persister.Delete(this); 
        }

        public virtual int Insert()
        {
            return _Persister.Insert(this); 
        }

        public static IReader<MasterPages> ListAll()
        {
            return _DefaultPersister.ListAll(); 
        }

    }
    
    public partial interface IMasterPagesPersister
    {
        int Retrieve(MasterPages masterPages);
        int Update(MasterPages masterPages);
        int Delete(MasterPages masterPages);
        int Insert(MasterPages masterPages);
        IReader<MasterPages> ListAll();
    }
    
    public partial class SqlServerMasterPagesPersister : SqlPersisterBase, IMasterPagesPersister
    {
        public SqlServerMasterPagesPersister()
        {
        }

        public SqlServerMasterPagesPersister(string connectionString) : base(connectionString)
        {
        }

        public SqlServerMasterPagesPersister(SqlConnection connection) : base(connection)
        {
        }

        public SqlServerMasterPagesPersister(SqlTransaction transaction) : base(transaction)
        {
        }

        public int Retrieve(MasterPages masterPages)
        {
            int __rowsAffected = 1;
            
            // Create command
            using (SqlCommand sqlCommand = new SqlCommand("MasterPagesGet"))
            {
                // Set command type
                sqlCommand.CommandType = CommandType.StoredProcedure; 

                try
                {
                    // Attach command
                    AttachCommand(sqlCommand);

                    // Add command parameters
                    SqlParameter vMasterPageID = new SqlParameter("@MasterPageID", SqlDbType.Int);
                    vMasterPageID.Direction = ParameterDirection.InputOutput; 
                    sqlCommand.Parameters.Add(vMasterPageID);
                    SqlParameter vPageTitle = new SqlParameter("@PageTitle", SqlDbType.VarChar, 50);
                    vPageTitle.Direction = ParameterDirection.Output; 
                    sqlCommand.Parameters.Add(vPageTitle);
                    SqlParameter vPageName = new SqlParameter("@PageName", SqlDbType.VarChar, 50);
                    vPageName.Direction = ParameterDirection.Output; 
                    sqlCommand.Parameters.Add(vPageName);
                    SqlParameter vModifiedDate = new SqlParameter("@ModifiedDate", SqlDbType.DateTime);
                    vModifiedDate.Direction = ParameterDirection.Output; 
                    sqlCommand.Parameters.Add(vModifiedDate);
                    SqlParameter vPageOrder = new SqlParameter("@PageOrder", SqlDbType.Int);
                    vPageOrder.Direction = ParameterDirection.Output; 
                    sqlCommand.Parameters.Add(vPageOrder);
                    SqlParameter vStatus = new SqlParameter("@Status", SqlDbType.Int);
                    vStatus.Direction = ParameterDirection.Output; 
                    sqlCommand.Parameters.Add(vStatus);

                    SqlParameter vModule_ID = new SqlParameter("@Module_ID", SqlDbType.Int);
                    vModule_ID.Direction = ParameterDirection.Output;
                    sqlCommand.Parameters.Add(vModule_ID);

                    // Set input parameter values
                    SqlServerHelper.SetParameterValue(vMasterPageID, masterPages.MasterPageID);

                    // Execute command
                    sqlCommand.ExecuteNonQuery();

                    try
                    {
                        // Get output parameter values
                        masterPages.MasterPageID = SqlServerHelper.ToInt32(vMasterPageID); 
                        masterPages.PageTitle = SqlServerHelper.ToString(vPageTitle); 
                        masterPages.PageName = SqlServerHelper.ToString(vPageName); 
                        masterPages.ModifiedDate = SqlServerHelper.ToDateTime(vModifiedDate); 
                        masterPages.PageOrder = SqlServerHelper.ToInt32(vPageOrder); 
                        masterPages.Status = SqlServerHelper.ToNullableInt32(vStatus);
                        masterPages.Module_ID  = SqlServerHelper.ToNullableInt32(vModule_ID); 
                    }
                    catch(Exception ex)
                    {
                        if(ex is System.NullReferenceException)
                        {
                            __rowsAffected = 0; 
                        }
                        else
                        {
                            throw ex; 
                        }
                    }
                }
                finally
                {
                    // Detach command
                    DetachCommand(sqlCommand);
                }

            }
            
            return __rowsAffected; 
        }

        public int Update(MasterPages masterPages)
        {
            int __rowsAffected = 0;
            
            // Create command
            using (SqlCommand sqlCommand = new SqlCommand("MasterPagesUpdate"))
            {
                // Set command type
                sqlCommand.CommandType = CommandType.StoredProcedure; 

                // Add command parameters
                SqlParameter vMasterPageID = new SqlParameter("@MasterPageID", SqlDbType.Int);
                vMasterPageID.Direction = ParameterDirection.Input; 
                sqlCommand.Parameters.Add(vMasterPageID);
                SqlParameter vPageTitle = new SqlParameter("@PageTitle", SqlDbType.VarChar, 50);
                vPageTitle.Direction = ParameterDirection.Input; 
                sqlCommand.Parameters.Add(vPageTitle);
                SqlParameter vPageName = new SqlParameter("@PageName", SqlDbType.VarChar, 50);
                vPageName.Direction = ParameterDirection.Input; 
                sqlCommand.Parameters.Add(vPageName);
                SqlParameter vModifiedDate = new SqlParameter("@ModifiedDate", SqlDbType.DateTime);
                vModifiedDate.Direction = ParameterDirection.Input; 
                sqlCommand.Parameters.Add(vModifiedDate);
                SqlParameter vPageOrder = new SqlParameter("@PageOrder", SqlDbType.Int);
                vPageOrder.Direction = ParameterDirection.Input; 
                sqlCommand.Parameters.Add(vPageOrder);
                SqlParameter vStatus = new SqlParameter("@Status", SqlDbType.Int);
                vStatus.Direction = ParameterDirection.Input; 
                sqlCommand.Parameters.Add(vStatus);

                SqlParameter vModule_ID = new SqlParameter("@Module_ID", SqlDbType.Int);
                vModule_ID.Direction = ParameterDirection.Input;
                sqlCommand.Parameters.Add(vModule_ID);

                // Set input parameter values
                SqlServerHelper.SetParameterValue(vMasterPageID, masterPages.MasterPageID);
                SqlServerHelper.SetParameterValue(vPageTitle, masterPages.PageTitle);
                SqlServerHelper.SetParameterValue(vPageName, masterPages.PageName);
                SqlServerHelper.SetParameterValue(vModifiedDate, masterPages.ModifiedDate);
                SqlServerHelper.SetParameterValue(vPageOrder, masterPages.PageOrder);
                SqlServerHelper.SetParameterValue(vStatus, masterPages.Status);
                SqlServerHelper.SetParameterValue(vModule_ID, masterPages.Module_ID);
                try
                {
                    // Attach command
                    AttachCommand(sqlCommand);

                    // Execute command
                    __rowsAffected = sqlCommand.ExecuteNonQuery(); 
                    if(__rowsAffected == 0)
                    {
                        return __rowsAffected; 
                    }
                    

                }
                finally
                {
                    // Detach command
                    DetachCommand(sqlCommand);
                }

            }
            
            return __rowsAffected; 
        }

        public int Delete(MasterPages masterPages)
        {
            int __rowsAffected = 0;
            
            // Create command
            using (SqlCommand sqlCommand = new SqlCommand("MasterPagesDelete"))
            {
                // Set command type
                sqlCommand.CommandType = CommandType.StoredProcedure; 

                try
                {
                    // Attach command
                    AttachCommand(sqlCommand);

                    // Add command parameters
                    SqlParameter vMasterPageID = new SqlParameter("@MasterPageID", SqlDbType.Int);
                    vMasterPageID.Direction = ParameterDirection.Input; 
                    sqlCommand.Parameters.Add(vMasterPageID);

                    // Set input parameter values
                    SqlServerHelper.SetParameterValue(vMasterPageID, masterPages.MasterPageID);

                    // Execute command
                    __rowsAffected = sqlCommand.ExecuteNonQuery(); 

                }
                finally
                {
                    // Detach command
                    DetachCommand(sqlCommand);
                }

            }
            
            return __rowsAffected; 
        }

        public int Insert(MasterPages masterPages)
        {
            int __rowsAffected = 0;
            
            // Create command
            using (SqlCommand sqlCommand = new SqlCommand("MasterPagesInsert"))
            {
                // Set command type
                sqlCommand.CommandType = CommandType.StoredProcedure; 

                // Add command parameters
                SqlParameter vMasterPageID = new SqlParameter("@MasterPageID", SqlDbType.Int);
                vMasterPageID.Direction = ParameterDirection.InputOutput; 
                sqlCommand.Parameters.Add(vMasterPageID);
                SqlParameter vPageTitle = new SqlParameter("@PageTitle", SqlDbType.VarChar, 50);
                vPageTitle.Direction = ParameterDirection.Input; 
                sqlCommand.Parameters.Add(vPageTitle);
                SqlParameter vPageName = new SqlParameter("@PageName", SqlDbType.VarChar, 50);
                vPageName.Direction = ParameterDirection.Input; 
                sqlCommand.Parameters.Add(vPageName);
                SqlParameter vModifiedDate = new SqlParameter("@ModifiedDate", SqlDbType.DateTime);
                vModifiedDate.Direction = ParameterDirection.Input; 
                sqlCommand.Parameters.Add(vModifiedDate);
                SqlParameter vPageOrder = new SqlParameter("@PageOrder", SqlDbType.Int);
                vPageOrder.Direction = ParameterDirection.Input; 
                sqlCommand.Parameters.Add(vPageOrder);
                SqlParameter vStatus = new SqlParameter("@Status", SqlDbType.Int);
                vStatus.Direction = ParameterDirection.Input; 
                sqlCommand.Parameters.Add(vStatus);

                SqlParameter vModule_ID = new SqlParameter("@Module_ID", SqlDbType.Int);
                vModule_ID.Direction = ParameterDirection.Input;
                sqlCommand.Parameters.Add(vModule_ID);

                // Set input parameter values
                SqlServerHelper.SetParameterValue(
                    vMasterPageID, 
                    masterPages.MasterPageID, 
                    0);
                SqlServerHelper.SetParameterValue(vPageTitle, masterPages.PageTitle);
                SqlServerHelper.SetParameterValue(vPageName, masterPages.PageName);
                SqlServerHelper.SetParameterValue(vModifiedDate, masterPages.ModifiedDate);
                SqlServerHelper.SetParameterValue(vPageOrder, masterPages.PageOrder);
                SqlServerHelper.SetParameterValue(vStatus, masterPages.Status);
                SqlServerHelper.SetParameterValue(vModule_ID, masterPages.Module_ID);

                try
                {
                    // Attach command
                    AttachCommand(sqlCommand);

                    // Execute command
                    __rowsAffected = sqlCommand.ExecuteNonQuery(); 
                    if(__rowsAffected == 0)
                    {
                        return __rowsAffected; 
                    }
                    

                    // Get output parameter values
                    masterPages.MasterPageID = SqlServerHelper.ToInt32(vMasterPageID); 

                }
                finally
                {
                    // Detach command
                    DetachCommand(sqlCommand);
                }

            }
            
            return __rowsAffected; 
        }

        public IReader<MasterPages> ListAll()
        {
            // Create command
            using (SqlCommand sqlCommand = new SqlCommand("MasterPagesListAll"))
            {
                // Set command type
                sqlCommand.CommandType = CommandType.StoredProcedure; 

                // Execute command
                SqlDataReader reader = sqlCommand.ExecuteReader(AttachReaderCommand(sqlCommand));

                // Return reader
                return new SqlServerMasterPagesReader(reader); 
            }
        }

    }

    public partial class SqlServerMasterPagesReader : IReader<MasterPages>
    {
        private SqlDataReader sqlDataReader;

        private MasterPages _MasterPages;

        private int _MasterPageIDOrdinal = -1;
        private int _PageTitleOrdinal = -1;
        private int _PageNameOrdinal = -1;
        private int _ModifiedDateOrdinal = -1;
        private int _PageOrderOrdinal = -1;
        private int _StatusOrdinal = -1;
        private int _Module_IDOrdinal = -1;

        public SqlServerMasterPagesReader(SqlDataReader sqlDataReader)
        {
            this.sqlDataReader = sqlDataReader; 
            for (int  i = 0; i < sqlDataReader.FieldCount; i++)
            {
                string columnName = sqlDataReader.GetName(i);
                columnName = columnName.ToUpper(); 
                switch (columnName)
                {
                    case "MASTERPAGEID":
                        _MasterPageIDOrdinal = i; 
                        break;
                    
                    case "PAGETITLE":
                        _PageTitleOrdinal = i; 
                        break;
                    
                    case "PAGENAME":
                        _PageNameOrdinal = i; 
                        break;
                    
                    case "MODIFIEDDATE":
                        _ModifiedDateOrdinal = i; 
                        break;
                    
                    case "PAGEORDER":
                        _PageOrderOrdinal = i; 
                        break;
                    
                    case "STATUS":
                        _StatusOrdinal = i; 
                        break;

                    case "MODULE_ID":
                        _Module_IDOrdinal = i;
                        break;
                    
                }
            }
        }

        #region IReader<MasterPages> Implementation
        
        public bool Read()
        {
            _MasterPages = null; 
            return this.sqlDataReader.Read(); 
        }

        public MasterPages Current
        {
            get
            {
                if(_MasterPages == null)
                {
                    _MasterPages = new MasterPages();
                    if(_MasterPageIDOrdinal != -1)
                    {
                        _MasterPages.MasterPageID = SqlServerHelper.ToInt32(sqlDataReader, _MasterPageIDOrdinal); 
                    }
                    _MasterPages.PageTitle = SqlServerHelper.ToString(sqlDataReader, _PageTitleOrdinal); 
                    _MasterPages.PageName = SqlServerHelper.ToString(sqlDataReader, _PageNameOrdinal); 
                    if(_ModifiedDateOrdinal != -1)
                    {
                        _MasterPages.ModifiedDate = SqlServerHelper.ToDateTime(sqlDataReader, _ModifiedDateOrdinal); 
                    }
                    if(_PageOrderOrdinal != -1)
                    {
                        _MasterPages.PageOrder = SqlServerHelper.ToInt32(sqlDataReader, _PageOrderOrdinal); 
                    }
                    _MasterPages.Status = SqlServerHelper.ToNullableInt32(sqlDataReader, _StatusOrdinal);
                    _MasterPages.Module_ID  = SqlServerHelper.ToNullableInt32(sqlDataReader, _Module_IDOrdinal); 
                }
                

                return _MasterPages; 
            }
        }

        public void Close()
        {
            sqlDataReader.Close();
        }

        public List<MasterPages> ToList()
        {
            List<MasterPages> list = new List<MasterPages>();
            while(this.Read())
            {
                list.Add(this.Current);
            }
            this.Close();
            return list; 
        }

        public DataTable ToDataTable()
        {
            DataTable dataTable = new DataTable();
            dataTable.Load(sqlDataReader);
            return dataTable; 
        }

        #endregion
        
        #region IDisposable Implementation
        
        public void Dispose()
        {
            sqlDataReader.Dispose();
        }
        #endregion
        
        #region IEnumerable<MasterPages> Implementation
        
        public IEnumerator<MasterPages> GetEnumerator()
        {
            return new MasterPagesEnumerator(this); 
        }

        #endregion
        
        #region IEnumerable Implementation
        
        IEnumerator IEnumerable.GetEnumerator()
        {
            return new MasterPagesEnumerator(this); 
        }

        #endregion
        
        
        private partial class MasterPagesEnumerator : IEnumerator<MasterPages>
        {
            private IReader<MasterPages> masterPagesReader;

            public MasterPagesEnumerator(IReader<MasterPages> masterPagesReader)
            {
                this.masterPagesReader = masterPagesReader; 
            }

            #region IEnumerator<MasterPages> Members
            
            public MasterPages Current
            {
                get { return this.masterPagesReader.Current; }
            }

            #endregion
            
            #region IDisposable Members
            
            public void Dispose()
            {
                this.masterPagesReader.Dispose();
            }

            #endregion
            
            #region IEnumerator Members
            
            object IEnumerator.Current
            {
                get { return this.masterPagesReader.Current; }
            }

            public bool MoveNext()
            {
                return this.masterPagesReader.Read(); 
            }

            public void Reset()
            {
                throw new Exception("Reset of masterpages reader is not supported."); 
            }

            #endregion
            
        }
    }
}
