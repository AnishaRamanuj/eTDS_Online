// This code was generated by an EVALUATION copy of Schematrix SchemaCoder.
// Redistribution of this source code, or an application developed from it, is forbidden.
// Modification of this source code to remove this comment is also forbidden.
// Please visit http://www.schematrix.com/ to obtain a license to use this software.

using System;
using System.Collections;
using System.Collections.Generic;
using System.Data;
using System.Data.SqlClient;
using System.Data.SqlTypes;
using System.IO;

namespace PayrollProject
{
    public partial class SubPageAccess
    {
        private static ISubPageAccessPersister _DefaultPersister;
        private ISubPageAccessPersister _Persister;
        private int _SubPageID;
        private int? _StaffID;
        private int? _CompID;
        private int? _ModuleID;
        private string _RoleName;

        static SubPageAccess()
        {
            // Assign default persister
            _DefaultPersister = new SqlServerSubPageAccessPersister();
        }

        public SubPageAccess()
        {
            // Assign default persister to instance persister
            _Persister = _DefaultPersister; 
        }

        public SubPageAccess(DataRow row)
        {
            // Assign default persister to instance persister
            _Persister = _DefaultPersister; 

            // Assign column values to private members
            for (int  i = 0; i < row.Table.Columns.Count; i++)
            {
                switch (row.Table.Columns[i].ColumnName.ToUpper())
                {
                    case "SUBPAGEID":
                        this.SubPageID = Convert.ToInt32(row[i, DataRowVersion.Current]); 
                        break;

                    case "STAFFID":
                        if (row.IsNull(i) == false)
                        {
                            this.StaffID = Convert.ToInt32(row[i, DataRowVersion.Current]);
                        }
                        break;
                    
                    case "COMPID":
                        if(row.IsNull(i) == false)
                        {
                            this.CompID = Convert.ToInt32(row[i, DataRowVersion.Current]); 
                        }
                        break;

                    case "MODULEID":
                        if (row.IsNull(i) == false)
                        {
                            this.ModuleID = Convert.ToInt32(row[i, DataRowVersion.Current]);
                        }
                        break;
                    case "ROLENAME":
                        if (row.IsNull(i) == false)
                        {
                            this.RoleName = row[i, DataRowVersion.Current].ToString();
                        }
                        break;
                }
            }
        }

        public static ISubPageAccessPersister DefaultPersister
        {
            get { return _DefaultPersister; }
            set { _DefaultPersister = value; }
        }

        public ISubPageAccessPersister Persister
        {
            get { return _Persister; }
            set { _Persister = value; }
        }

        public int SubPageID
        {
            get { return _SubPageID; }
            set { _SubPageID = value; }
        }

        public int? StaffID
        {
            get { return _StaffID; }
            set { _StaffID = value; }
        }

        public int? CompID
        {
            get { return _CompID; }
            set { _CompID = value; }
        }

        public int? ModuleID
        {
            get { return _ModuleID; }
            set { _ModuleID = value; }
        }

        public String RoleName
        {
            get { return _RoleName; }
            set { _RoleName = value; }
        }

        public virtual void Clone(SubPageAccess sourceObject)
        {
            // Clone attributes from source object
            this._SubPageID = sourceObject.SubPageID;
            this._StaffID = sourceObject.StaffID;
            this._CompID = sourceObject.CompID;
            this._ModuleID = sourceObject.ModuleID;
            this._RoleName = sourceObject.RoleName; 
        }

        public virtual int Insert()
        {
            return _Persister.Insert(this); 
        }

        public static IReader<SubPageAccess> ListAll()
        {
            return _DefaultPersister.ListAll(); 
        }

    }
    
    public partial interface ISubPageAccessPersister
    {
        int Insert(SubPageAccess subPageAccess);
        IReader<SubPageAccess> ListAll();
    }
    
    public partial class SqlServerSubPageAccessPersister : SqlPersisterBase, ISubPageAccessPersister
    {
        public SqlServerSubPageAccessPersister()
        {
        }

        public SqlServerSubPageAccessPersister(string connectionString) : base(connectionString)
        {
        }

        public SqlServerSubPageAccessPersister(SqlConnection connection) : base(connection)
        {
        }

        public SqlServerSubPageAccessPersister(SqlTransaction transaction) : base(transaction)
        {
        }

        public int Insert(SubPageAccess subPageAccess)
        {
            int __rowsAffected = 0;
            
            // Create command
            using (SqlCommand sqlCommand = new SqlCommand("SubPageAccessInsert"))
            {
                // Set command type
                sqlCommand.CommandType = CommandType.StoredProcedure; 

                // Add command parameters
                SqlParameter vSubPageID = new SqlParameter("@SubPageID", SqlDbType.Int);
                vSubPageID.Direction = ParameterDirection.Input; 
                sqlCommand.Parameters.Add(vSubPageID);
                SqlParameter vStaffID = new SqlParameter("@StaffID", SqlDbType.Int);
                vStaffID.Direction = ParameterDirection.Input;
                sqlCommand.Parameters.Add(vStaffID);
                SqlParameter vCompID = new SqlParameter("@CompID", SqlDbType.Int);
                vCompID.Direction = ParameterDirection.Input; 
                sqlCommand.Parameters.Add(vCompID);
                SqlParameter vModuleID = new SqlParameter("@ModuleID", SqlDbType.Int);
                vModuleID.Direction = ParameterDirection.Input;
                sqlCommand.Parameters.Add(vModuleID);
                SqlParameter vRoleName = new SqlParameter("@RoleName", SqlDbType.Char);
                vRoleName.Direction = ParameterDirection.Input;
                sqlCommand.Parameters.Add(vRoleName);

                // Set input parameter values
                SqlServerHelper.SetParameterValue(vSubPageID, subPageAccess.SubPageID);
                SqlServerHelper.SetParameterValue(vStaffID, subPageAccess.StaffID);
                SqlServerHelper.SetParameterValue(vCompID, subPageAccess.CompID);
                SqlServerHelper.SetParameterValue(vModuleID, subPageAccess.ModuleID);
                SqlServerHelper.SetParameterValue(vRoleName, subPageAccess.RoleName);

                try
                {
                    // Attach command
                    AttachCommand(sqlCommand);

                    // Execute command
                    __rowsAffected = sqlCommand.ExecuteNonQuery(); 
                    if(__rowsAffected == 0)
                    {
                        return __rowsAffected; 
                    }
                    

                }
                finally
                {
                    // Detach command
                    DetachCommand(sqlCommand);
                }

            }
            
            return __rowsAffected; 
        }

        public IReader<SubPageAccess> ListAll()
        {
            // Create command
            using (SqlCommand sqlCommand = new SqlCommand("SubPageAccessListAll"))
            {
                // Set command type
                sqlCommand.CommandType = CommandType.StoredProcedure; 

                // Execute command
                SqlDataReader reader = sqlCommand.ExecuteReader(AttachReaderCommand(sqlCommand));

                // Return reader
                return new SqlServerSubPageAccessReader(reader); 
            }
        }

    }

    public partial class SqlServerSubPageAccessReader : IReader<SubPageAccess>
    {
        private SqlDataReader sqlDataReader;

        private SubPageAccess _SubPageAccess;

        private int _SubPageIDOrdinal = -1;
        private int _StaffIDOrdinal = -1;
        private int _CompIDOrdinal = -1;
        private int _ModuleIDOrdinal = -1;
        private int _RoleNameOrdinal = -1;

        public SqlServerSubPageAccessReader(SqlDataReader sqlDataReader)
        {
            this.sqlDataReader = sqlDataReader; 
            for (int  i = 0; i < sqlDataReader.FieldCount; i++)
            {
                string columnName = sqlDataReader.GetName(i);
                columnName = columnName.ToUpper(); 
                switch (columnName)
                {
                    case "SUBPAGEID":
                        _SubPageIDOrdinal = i; 
                        break;

                    case "STAFFID":
                        _StaffIDOrdinal = i;
                        break;

                    case "COMPID":
                        _CompIDOrdinal = i;
                        break;

                    case "MODULEID":
                        _ModuleIDOrdinal = i;
                        break;

                    case "ROLENAME":
                        _RoleNameOrdinal = i;
                        break;
                    
                }
            }
        }

        #region IReader<SubPageAccess> Implementation
        
        public bool Read()
        {
            _SubPageAccess = null; 
            return this.sqlDataReader.Read(); 
        }

        public SubPageAccess Current
        {
            get
            {
                if(_SubPageAccess == null)
                {
                    _SubPageAccess = new SubPageAccess();
                    if(_SubPageIDOrdinal != -1)
                    {
                        _SubPageAccess.SubPageID = SqlServerHelper.ToInt32(sqlDataReader, _SubPageIDOrdinal); 
                    }
                    _SubPageAccess.StaffID = SqlServerHelper.ToNullableInt32(sqlDataReader, _StaffIDOrdinal);
                    _SubPageAccess.CompID = SqlServerHelper.ToNullableInt32(sqlDataReader, _CompIDOrdinal);
                    _SubPageAccess.ModuleID = SqlServerHelper.ToNullableInt32(sqlDataReader, _ModuleIDOrdinal);
                    _SubPageAccess.RoleName = SqlServerHelper.ToString(sqlDataReader, _RoleNameOrdinal); 
                }
                

                return _SubPageAccess; 
            }
        }

        public void Close()
        {
            sqlDataReader.Close();
        }

        public List<SubPageAccess> ToList()
        {
            List<SubPageAccess> list = new List<SubPageAccess>();
            while(this.Read())
            {
                list.Add(this.Current);
            }
            this.Close();
            return list; 
        }

        public DataTable ToDataTable()
        {
            DataTable dataTable = new DataTable();
            dataTable.Load(sqlDataReader);
            return dataTable; 
        }

        #endregion
        
        #region IDisposable Implementation
        
        public void Dispose()
        {
            sqlDataReader.Dispose();
        }
        #endregion
        
        #region IEnumerable<SubPageAccess> Implementation
        
        public IEnumerator<SubPageAccess> GetEnumerator()
        {
            return new SubPageAccessEnumerator(this); 
        }

        #endregion
        
        #region IEnumerable Implementation
        
        IEnumerator IEnumerable.GetEnumerator()
        {
            return new SubPageAccessEnumerator(this); 
        }

        #endregion
        
        
        private partial class SubPageAccessEnumerator : IEnumerator<SubPageAccess>
        {
            private IReader<SubPageAccess> subPageAccessReader;

            public SubPageAccessEnumerator(IReader<SubPageAccess> subPageAccessReader)
            {
                this.subPageAccessReader = subPageAccessReader; 
            }

            #region IEnumerator<SubPageAccess> Members
            
            public SubPageAccess Current
            {
                get { return this.subPageAccessReader.Current; }
            }

            #endregion
            
            #region IDisposable Members
            
            public void Dispose()
            {
                this.subPageAccessReader.Dispose();
            }

            #endregion
            
            #region IEnumerator Members
            
            object IEnumerator.Current
            {
                get { return this.subPageAccessReader.Current; }
            }

            public bool MoveNext()
            {
                return this.subPageAccessReader.Read(); 
            }

            public void Reset()
            {
                throw new Exception("Reset of subpageaccess reader is not supported."); 
            }

            #endregion
            
        }
    }
}
