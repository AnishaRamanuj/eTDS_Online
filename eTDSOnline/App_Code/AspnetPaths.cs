// This code was generated by an EVALUATION copy of Schematrix SchemaCoder.
// Redistribution of this source code, or an application developed from it, is forbidden.
// Modification of this source code to remove this comment is also forbidden.
// Please visit http://www.schematrix.com/ to obtain a license to use this software.


using System;
using System.Collections;
using System.Collections.Generic;
using System.Data;
using System.Data.SqlClient;
using System.Data.SqlTypes;
using System.IO;

namespace PayrollProject
{
    public partial class AspnetPaths
    {
        private static IAspnetPathsPersister _DefaultPersister;
        private IAspnetPathsPersister _Persister;
        private Guid _ApplicationId;
        private Guid _PathId;
        private string _Path;
        private string _LoweredPath;

        static AspnetPaths()
        {
            // Assign default persister
            _DefaultPersister = new SqlServerAspnetPathsPersister();
        }

        public AspnetPaths()
        {
            // Assign default persister to instance persister
            _Persister = _DefaultPersister; 
        }

        public AspnetPaths(Guid _PathId)
        {
            // Assign default persister to instance persister
            _Persister = _DefaultPersister; 

            // Assign method parameter to private fields
            this._PathId = _PathId; 

            // Call associated retrieve method
            Retrieve();
        }

        public AspnetPaths(Guid _ApplicationId, string _LoweredPath)
        {
            // Assign default persister to instance persister
            _Persister = _DefaultPersister; 

            // Assign method parameter to private fields
            this._ApplicationId = _ApplicationId; 
            this._LoweredPath = _LoweredPath; 

            // Call associated retrieve method
            RetrieveByAspnetPaths();
        }

        public AspnetPaths(DataRow row)
        {
            // Assign default persister to instance persister
            _Persister = _DefaultPersister; 

            // Assign column values to private members
            for (int  i = 0; i < row.Table.Columns.Count; i++)
            {
                switch (row.Table.Columns[i].ColumnName.ToUpper())
                {
                    case "APPLICATIONID":
                        if(row[i, DataRowVersion.Current] is Guid)
                        {
                            this.ApplicationId = (Guid)row[i, DataRowVersion.Current]; 
                        }
                        else
                        {
                            this.ApplicationId = new Guid((Byte[])row[i, DataRowVersion.Current]); 
                        }
                        break;
                    
                    case "PATHID":
                        if(row[i, DataRowVersion.Current] is Guid)
                        {
                            this.PathId = (Guid)row[i, DataRowVersion.Current]; 
                        }
                        else
                        {
                            this.PathId = new Guid((Byte[])row[i, DataRowVersion.Current]); 
                        }
                        break;
                    
                    case "PATH":
                        this.Path = (string)row[i, DataRowVersion.Current]; 
                        break;
                    
                    case "LOWEREDPATH":
                        this.LoweredPath = (string)row[i, DataRowVersion.Current]; 
                        break;
                    
                }
            }
        }

        public static IAspnetPathsPersister DefaultPersister
        {
            get { return _DefaultPersister; }
            set { _DefaultPersister = value; }
        }

        public IAspnetPathsPersister Persister
        {
            get { return _Persister; }
            set { _Persister = value; }
        }

        public Guid ApplicationId
        {
            get { return _ApplicationId; }
            set { _ApplicationId = value; }
        }

        public Guid PathId
        {
            get { return _PathId; }
            set { _PathId = value; }
        }

        public string Path
        {
            get { return _Path; }
            set { _Path = value; }
        }

        public string LoweredPath
        {
            get { return _LoweredPath; }
            set { _LoweredPath = value; }
        }

        public virtual void Clone(AspnetPaths sourceObject)
        {
            // Clone attributes from source object
            this._ApplicationId = sourceObject.ApplicationId; 
            this._PathId = sourceObject.PathId; 
            this._Path = sourceObject.Path; 
            this._LoweredPath = sourceObject.LoweredPath; 
        }

        public virtual int Retrieve()
        {
            return _Persister.Retrieve(this); 
        }

        public virtual int Update()
        {
            return _Persister.Update(this); 
        }

        public virtual int Delete()
        {
            return _Persister.Delete(this); 
        }

        public virtual int Insert()
        {
            return _Persister.Insert(this); 
        }

        public static IReader<AspnetPaths> ListAll()
        {
            return _DefaultPersister.ListAll(); 
        }

        public static IReader<AspnetPaths> ListForApplicationId(Guid applicationId)
        {
            return _DefaultPersister.ListForApplicationId(applicationId); 
        }

        public virtual int RetrieveByAspnetPaths()
        {
            return _Persister.RetrieveByAspnetPaths(this); 
        }

    }
    
    public partial interface IAspnetPathsPersister
    {
        int Retrieve(AspnetPaths aspnetPaths);
        int Update(AspnetPaths aspnetPaths);
        int Delete(AspnetPaths aspnetPaths);
        int Insert(AspnetPaths aspnetPaths);
        IReader<AspnetPaths> ListAll();
        IReader<AspnetPaths> ListForApplicationId(Guid applicationId);
        int RetrieveByAspnetPaths(AspnetPaths aspnetPaths);
    }
    
    public partial class SqlServerAspnetPathsPersister : SqlPersisterBase, IAspnetPathsPersister
    {
        public SqlServerAspnetPathsPersister()
        {
        }

        public SqlServerAspnetPathsPersister(string connectionString) : base(connectionString)
        {
        }

        public SqlServerAspnetPathsPersister(SqlConnection connection) : base(connection)
        {
        }

        public SqlServerAspnetPathsPersister(SqlTransaction transaction) : base(transaction)
        {
        }

        public int Retrieve(AspnetPaths aspnetPaths)
        {
            int __rowsAffected = 1;
            
            // Create command
            using (SqlCommand sqlCommand = new SqlCommand("AspnetPathsGet"))
            {
                // Set command type
                sqlCommand.CommandType = CommandType.StoredProcedure; 

                try
                {
                    // Attach command
                    AttachCommand(sqlCommand);

                    // Add command parameters
                    SqlParameter vApplicationId = new SqlParameter("@ApplicationId", SqlDbType.UniqueIdentifier);
                    vApplicationId.Direction = ParameterDirection.Output; 
                    sqlCommand.Parameters.Add(vApplicationId);
                    SqlParameter vPathId = new SqlParameter("@PathId", SqlDbType.UniqueIdentifier);
                    vPathId.Direction = ParameterDirection.InputOutput; 
                    sqlCommand.Parameters.Add(vPathId);
                    SqlParameter vPath = new SqlParameter("@Path", SqlDbType.NVarChar, 256);
                    vPath.Direction = ParameterDirection.Output; 
                    sqlCommand.Parameters.Add(vPath);
                    SqlParameter vLoweredPath = new SqlParameter("@LoweredPath", SqlDbType.NVarChar, 256);
                    vLoweredPath.Direction = ParameterDirection.Output; 
                    sqlCommand.Parameters.Add(vLoweredPath);

                    // Set input parameter values
                    SqlServerHelper.SetParameterValue(vPathId, aspnetPaths.PathId);

                    // Execute command
                    sqlCommand.ExecuteNonQuery();

                    try
                    {
                        // Get output parameter values
                        aspnetPaths.ApplicationId = SqlServerHelper.ToGuid(vApplicationId); 
                        aspnetPaths.PathId = SqlServerHelper.ToGuid(vPathId); 
                        aspnetPaths.Path = SqlServerHelper.ToString(vPath); 
                        aspnetPaths.LoweredPath = SqlServerHelper.ToString(vLoweredPath); 

                    }
                    catch(Exception ex)
                    {
                        if(ex is System.NullReferenceException)
                        {
                            __rowsAffected = 0; 
                        }
                        else
                        {
                            throw ex; 
                        }
                    }
                }
                finally
                {
                    // Detach command
                    DetachCommand(sqlCommand);
                }

            }
            
            return __rowsAffected; 
        }

        public int Update(AspnetPaths aspnetPaths)
        {
            int __rowsAffected = 0;
            
            // Create command
            using (SqlCommand sqlCommand = new SqlCommand("AspnetPathsUpdate"))
            {
                // Set command type
                sqlCommand.CommandType = CommandType.StoredProcedure; 

                // Add command parameters
                SqlParameter vApplicationId = new SqlParameter("@ApplicationId", SqlDbType.UniqueIdentifier);
                vApplicationId.Direction = ParameterDirection.Input; 
                sqlCommand.Parameters.Add(vApplicationId);
                SqlParameter vPathId = new SqlParameter("@PathId", SqlDbType.UniqueIdentifier);
                vPathId.Direction = ParameterDirection.Input; 
                sqlCommand.Parameters.Add(vPathId);
                SqlParameter vPath = new SqlParameter("@Path", SqlDbType.NVarChar, 256);
                vPath.Direction = ParameterDirection.Input; 
                sqlCommand.Parameters.Add(vPath);
                SqlParameter vLoweredPath = new SqlParameter("@LoweredPath", SqlDbType.NVarChar, 256);
                vLoweredPath.Direction = ParameterDirection.Input; 
                sqlCommand.Parameters.Add(vLoweredPath);

                // Set input parameter values
                SqlServerHelper.SetParameterValue(vApplicationId, aspnetPaths.ApplicationId);
                SqlServerHelper.SetParameterValue(vPathId, aspnetPaths.PathId);
                SqlServerHelper.SetParameterValue(vPath, aspnetPaths.Path);
                SqlServerHelper.SetParameterValue(vLoweredPath, aspnetPaths.LoweredPath);

                try
                {
                    // Attach command
                    AttachCommand(sqlCommand);

                    // Execute command
                    __rowsAffected = sqlCommand.ExecuteNonQuery(); 
                    if(__rowsAffected == 0)
                    {
                        return __rowsAffected; 
                    }
                    

                }
                finally
                {
                    // Detach command
                    DetachCommand(sqlCommand);
                }

            }
            
            return __rowsAffected; 
        }

        public int Delete(AspnetPaths aspnetPaths)
        {
            int __rowsAffected = 0;
            
            // Create command
            using (SqlCommand sqlCommand = new SqlCommand("AspnetPathsDelete"))
            {
                // Set command type
                sqlCommand.CommandType = CommandType.StoredProcedure; 

                try
                {
                    // Attach command
                    AttachCommand(sqlCommand);

                    // Add command parameters
                    SqlParameter vPathId = new SqlParameter("@PathId", SqlDbType.UniqueIdentifier);
                    vPathId.Direction = ParameterDirection.Input; 
                    sqlCommand.Parameters.Add(vPathId);

                    // Set input parameter values
                    SqlServerHelper.SetParameterValue(vPathId, aspnetPaths.PathId);

                    // Execute command
                    __rowsAffected = sqlCommand.ExecuteNonQuery(); 

                }
                finally
                {
                    // Detach command
                    DetachCommand(sqlCommand);
                }

            }
            
            return __rowsAffected; 
        }

        public int Insert(AspnetPaths aspnetPaths)
        {
            int __rowsAffected = 0;
            
            // Create command
            using (SqlCommand sqlCommand = new SqlCommand("AspnetPathsInsert"))
            {
                // Set command type
                sqlCommand.CommandType = CommandType.StoredProcedure; 

                // Add command parameters
                SqlParameter vApplicationId = new SqlParameter("@ApplicationId", SqlDbType.UniqueIdentifier);
                vApplicationId.Direction = ParameterDirection.Input; 
                sqlCommand.Parameters.Add(vApplicationId);
                SqlParameter vPathId = new SqlParameter("@PathId", SqlDbType.UniqueIdentifier);
                vPathId.Direction = ParameterDirection.Input; 
                sqlCommand.Parameters.Add(vPathId);
                SqlParameter vPath = new SqlParameter("@Path", SqlDbType.NVarChar, 256);
                vPath.Direction = ParameterDirection.Input; 
                sqlCommand.Parameters.Add(vPath);
                SqlParameter vLoweredPath = new SqlParameter("@LoweredPath", SqlDbType.NVarChar, 256);
                vLoweredPath.Direction = ParameterDirection.Input; 
                sqlCommand.Parameters.Add(vLoweredPath);

                // Set input parameter values
                SqlServerHelper.SetParameterValue(vApplicationId, aspnetPaths.ApplicationId);
                SqlServerHelper.SetParameterValue(vPathId, aspnetPaths.PathId);
                SqlServerHelper.SetParameterValue(vPath, aspnetPaths.Path);
                SqlServerHelper.SetParameterValue(vLoweredPath, aspnetPaths.LoweredPath);

                try
                {
                    // Attach command
                    AttachCommand(sqlCommand);

                    // Execute command
                    __rowsAffected = sqlCommand.ExecuteNonQuery(); 
                    if(__rowsAffected == 0)
                    {
                        return __rowsAffected; 
                    }
                    

                }
                finally
                {
                    // Detach command
                    DetachCommand(sqlCommand);
                }

            }
            
            return __rowsAffected; 
        }

        public IReader<AspnetPaths> ListAll()
        {
            // Create command
            using (SqlCommand sqlCommand = new SqlCommand("AspnetPathsListAll"))
            {
                // Set command type
                sqlCommand.CommandType = CommandType.StoredProcedure; 

                // Execute command
                SqlDataReader reader = sqlCommand.ExecuteReader(AttachReaderCommand(sqlCommand));

                // Return reader
                return new SqlServerAspnetPathsReader(reader); 
            }
        }

        public IReader<AspnetPaths> ListForApplicationId(Guid applicationId)
        {
            // Create command
            using (SqlCommand sqlCommand = new SqlCommand("AspnetPathsListForApplicationId"))
            {
                // Set command type
                sqlCommand.CommandType = CommandType.StoredProcedure; 

                // Add command parameters
                SqlParameter vApplicationId = new SqlParameter("@ApplicationId", SqlDbType.UniqueIdentifier);
                vApplicationId.Direction = ParameterDirection.Input; 
                sqlCommand.Parameters.Add(vApplicationId);
                
                // Set input parameter values
                SqlServerHelper.SetParameterValue(vApplicationId, applicationId);

                // Execute command
                SqlDataReader reader = sqlCommand.ExecuteReader(AttachReaderCommand(sqlCommand));

                // Return reader
                return new SqlServerAspnetPathsReader(reader); 
            }
        }

        public int RetrieveByAspnetPaths(AspnetPaths aspnetPaths)
        {
            int __rowsAffected = 1;
            
            // Create command
            using (SqlCommand sqlCommand = new SqlCommand("AspnetPathsGetByAspnetPathsIndex"))
            {
                // Set command type
                sqlCommand.CommandType = CommandType.StoredProcedure; 

                try
                {
                    // Attach command
                    AttachCommand(sqlCommand);

                    // Add command parameters
                    SqlParameter vApplicationId = new SqlParameter("@ApplicationId", SqlDbType.UniqueIdentifier);
                    vApplicationId.Direction = ParameterDirection.InputOutput; 
                    sqlCommand.Parameters.Add(vApplicationId);
                    SqlParameter vPathId = new SqlParameter("@PathId", SqlDbType.UniqueIdentifier);
                    vPathId.Direction = ParameterDirection.Output; 
                    sqlCommand.Parameters.Add(vPathId);
                    SqlParameter vPath = new SqlParameter("@Path", SqlDbType.NVarChar, 256);
                    vPath.Direction = ParameterDirection.Output; 
                    sqlCommand.Parameters.Add(vPath);
                    SqlParameter vLoweredPath = new SqlParameter("@LoweredPath", SqlDbType.NVarChar, 256);
                    vLoweredPath.Direction = ParameterDirection.InputOutput; 
                    sqlCommand.Parameters.Add(vLoweredPath);

                    // Set input parameter values
                    SqlServerHelper.SetParameterValue(vApplicationId, aspnetPaths.ApplicationId);
                    SqlServerHelper.SetParameterValue(vLoweredPath, aspnetPaths.LoweredPath);

                    // Execute command
                    sqlCommand.ExecuteNonQuery();

                    try
                    {
                        // Get output parameter values
                        aspnetPaths.ApplicationId = SqlServerHelper.ToGuid(vApplicationId); 
                        aspnetPaths.PathId = SqlServerHelper.ToGuid(vPathId); 
                        aspnetPaths.Path = SqlServerHelper.ToString(vPath); 
                        aspnetPaths.LoweredPath = SqlServerHelper.ToString(vLoweredPath); 

                    }
                    catch(Exception ex)
                    {
                        if(ex is System.NullReferenceException)
                        {
                            __rowsAffected = 0; 
                        }
                        else
                        {
                            throw ex; 
                        }
                    }
                }
                finally
                {
                    // Detach command
                    DetachCommand(sqlCommand);
                }

            }
            
            return __rowsAffected; 
        }

    }

    public partial class SqlServerAspnetPathsReader : IReader<AspnetPaths>
    {
        private SqlDataReader sqlDataReader;

        private AspnetPaths _AspnetPaths;

        private int _ApplicationIdOrdinal = -1;
        private int _PathIdOrdinal = -1;
        private int _PathOrdinal = -1;
        private int _LoweredPathOrdinal = -1;

        public SqlServerAspnetPathsReader(SqlDataReader sqlDataReader)
        {
            this.sqlDataReader = sqlDataReader; 
            for (int  i = 0; i < sqlDataReader.FieldCount; i++)
            {
                string columnName = sqlDataReader.GetName(i);
                columnName = columnName.ToUpper(); 
                switch (columnName)
                {
                    case "APPLICATIONID":
                        _ApplicationIdOrdinal = i; 
                        break;
                    
                    case "PATHID":
                        _PathIdOrdinal = i; 
                        break;
                    
                    case "PATH":
                        _PathOrdinal = i; 
                        break;
                    
                    case "LOWEREDPATH":
                        _LoweredPathOrdinal = i; 
                        break;
                    
                }
            }
        }

        #region IReader<AspnetPaths> Implementation
        
        public bool Read()
        {
            _AspnetPaths = null; 
            return this.sqlDataReader.Read(); 
        }

        public AspnetPaths Current
        {
            get
            {
                if(_AspnetPaths == null)
                {
                    _AspnetPaths = new AspnetPaths();
                    if(_ApplicationIdOrdinal != -1)
                    {
                        _AspnetPaths.ApplicationId = SqlServerHelper.ToGuid(sqlDataReader, _ApplicationIdOrdinal); 
                    }
                    if(_PathIdOrdinal != -1)
                    {
                        _AspnetPaths.PathId = SqlServerHelper.ToGuid(sqlDataReader, _PathIdOrdinal); 
                    }
                    _AspnetPaths.Path = SqlServerHelper.ToString(sqlDataReader, _PathOrdinal); 
                    _AspnetPaths.LoweredPath = SqlServerHelper.ToString(sqlDataReader, _LoweredPathOrdinal); 
                }
                

                return _AspnetPaths; 
            }
        }

        public void Close()
        {
            sqlDataReader.Close();
        }

        public List<AspnetPaths> ToList()
        {
            List<AspnetPaths> list = new List<AspnetPaths>();
            while(this.Read())
            {
                list.Add(this.Current);
            }
            this.Close();
            return list; 
        }

        public DataTable ToDataTable()
        {
            DataTable dataTable = new DataTable();
            dataTable.Load(sqlDataReader);
            return dataTable; 
        }

        #endregion
        
        #region IDisposable Implementation
        
        public void Dispose()
        {
            sqlDataReader.Dispose();
        }
        #endregion
        
        #region IEnumerable<AspnetPaths> Implementation
        
        public IEnumerator<AspnetPaths> GetEnumerator()
        {
            return new AspnetPathsEnumerator(this); 
        }

        #endregion
        
        #region IEnumerable Implementation
        
        IEnumerator IEnumerable.GetEnumerator()
        {
            return new AspnetPathsEnumerator(this); 
        }

        #endregion
        
        
        private partial class AspnetPathsEnumerator : IEnumerator<AspnetPaths>
        {
            private IReader<AspnetPaths> aspnetPathsReader;

            public AspnetPathsEnumerator(IReader<AspnetPaths> aspnetPathsReader)
            {
                this.aspnetPathsReader = aspnetPathsReader; 
            }

            #region IEnumerator<AspnetPaths> Members
            
            public AspnetPaths Current
            {
                get { return this.aspnetPathsReader.Current; }
            }

            #endregion
            
            #region IDisposable Members
            
            public void Dispose()
            {
                this.aspnetPathsReader.Dispose();
            }

            #endregion
            
            #region IEnumerator Members
            
            object IEnumerator.Current
            {
                get { return this.aspnetPathsReader.Current; }
            }

            public bool MoveNext()
            {
                return this.aspnetPathsReader.Read(); 
            }

            public void Reset()
            {
                throw new Exception("Reset of aspnetpaths reader is not supported."); 
            }

            #endregion
            
        }
    }
}
